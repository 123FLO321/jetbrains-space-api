{
  "openapi": "3.0.0",
  "info": {
    "title": "Space",
    "version": "2022.2.0-DEV.104457"
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "paths": {
    "/absences": {
      "post": {
        "summary": "Create absence",
        "description": {
          "text": "Create an absence for a given profile (member)"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "member": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "location": {
                    "nullable": true,
                    "type": "string"
                  },
                  "since": {
                    "type": "string",
                    "format": "full-date"
                  },
                  "till": {
                    "type": "string",
                    "format": "full-date"
                  },
                  "available": {
                    "default": false,
                    "type": "boolean"
                  },
                  "icon": {
                    "type": "string"
                  },
                  "customFieldValues": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomFieldInputValue"
                    }
                  }
                },
                "required": [
                  "member",
                  "reason",
                  "description",
                  "since",
                  "till",
                  "icon"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbsenceRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update absences"
          }
        ]
      },
      "get": {
        "summary": "Get all absences",
        "description": {
          "text": "Search absences. Parameters are applied as 'AND' filters."
        },
        "parameters": [
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "member",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "members",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "location",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "team",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "till",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "viewMode",
            "in": "query",
            "required": false,
            "schema": {
              "default": "All",
              "$ref": "#/components/schemas/AbsenceListMode"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AbsenceRecord"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View absences"
          }
        ]
      }
    },
    "/absences/{id}/approve": {
      "post": {
        "summary": "Approve absence",
        "description": {
          "text": "Approve/unapprove an existing absence. Setting approve to true will approve the absence, false will remove the approval."
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "approve": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "approve"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Approve absences"
          }
        ]
      }
    },
    "/absences/member:{member}": {
      "get": {
        "summary": "Get all absences by member",
        "description": {
          "text": "Get absences for a given profile ID"
        },
        "parameters": [
          {
            "name": "member",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AbsenceRecord"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View absences"
          }
        ]
      }
    },
    "/absences/{id}": {
      "get": {
        "summary": "Get absence",
        "description": {
          "text": "Get an absence"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "$ref": "#/components/schemas/AbsenceRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View absences"
          }
        ]
      },
      "patch": {
        "summary": "Update absence",
        "description": {
          "text": "Update an existing absence. Optional parameters will be ignored when not specified and updated otherwise."
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "member": {
                    "nullable": true,
                    "type": "string"
                  },
                  "reason": {
                    "nullable": true,
                    "type": "string"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  },
                  "location": {
                    "nullable": true,
                    "type": "string"
                  },
                  "since": {
                    "nullable": true,
                    "type": "string",
                    "format": "full-date"
                  },
                  "till": {
                    "nullable": true,
                    "type": "string",
                    "format": "full-date"
                  },
                  "available": {
                    "type": "boolean"
                  },
                  "icon": {
                    "nullable": true,
                    "type": "string"
                  },
                  "customFieldValues": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomFieldInputValue"
                    }
                  }
                },
                "required": [
                  "available"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbsenceRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update absences"
          }
        ]
      },
      "delete": {
        "summary": "Delete absence",
        "description": {
          "text": "Archive/restore an existing absence. Setting delete to true will archive the absence, false will restore it."
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "required": false,
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update absences"
          },
          {
            "title": "Manage historical absences"
          }
        ]
      }
    },
    "/absences/{id}/delete-approval": {
      "delete": {
        "summary": "Delete absence approval",
        "description": {
          "text": "Delete approval for a given absence"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Approve absences"
          }
        ]
      }
    },
    "/absences/absence-reasons": {
      "post": {
        "summary": "Create absence reason",
        "description": {
          "text": "Create a new absence reason"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "defaultAvailability": {
                    "type": "boolean"
                  },
                  "approvalRequired": {
                    "type": "boolean"
                  },
                  "icon": {
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "description",
                  "defaultAvailability",
                  "approvalRequired"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbsenceReasonRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage absence types"
          }
        ]
      },
      "get": {
        "summary": "Get all absence reasons",
        "description": {
          "text": "Get available absence reasons"
        },
        "parameters": [
          {
            "name": "withArchived",
            "in": "query",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AbsenceReasonRecord"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View absence types"
          }
        ]
      }
    },
    "/absences/absence-reasons/{id}": {
      "get": {
        "summary": "Get absence reason",
        "description": {
          "text": "Get an absence reason"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "$ref": "#/components/schemas/AbsenceReasonRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View absence types"
          }
        ]
      },
      "patch": {
        "summary": "Update absence reason",
        "description": {
          "text": "Update an existing absence reason"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "defaultAvailability": {
                    "type": "boolean"
                  },
                  "approvalRequired": {
                    "type": "boolean"
                  },
                  "icon": {
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "description",
                  "defaultAvailability",
                  "approvalRequired"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbsenceReasonRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage absence types"
          }
        ]
      },
      "delete": {
        "summary": "Delete absence reason",
        "description": {
          "text": "Archive/restore an existing absence reason. Setting delete to true will archive the absence reason, false will restore it."
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "required": false,
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage absence types"
          }
        ]
      }
    },
    "/administration/support": {
      "post": {
        "summary": "Create support",
        "description": {
          "text": "Create a profile for support"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupportProfileDTO"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Grant permissions to other members"
          }
        ]
      }
    },
    "/administration/user-agreement": {
      "get": {
        "summary": "Get user agreement",
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "$ref": "#/components/schemas/UA_UserAgreement"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": []
      },
      "patch": {
        "summary": "Upload new user agreement",
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "newContent": {
                    "type": "string"
                  },
                  "invalidate": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "newContent",
                  "invalidate"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UA_UserAgreement"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Grant permissions to other members"
          }
        ]
      }
    },
    "/administration/user-agreement/enabled": {
      "post": {
        "summary": "Enable / disable user agreement",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "enabled"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Grant permissions to other members"
          }
        ]
      },
      "get": {
        "summary": "Is user agreement enabled?",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": []
      }
    },
    "/administration/user-agreement/status": {
      "get": {
        "summary": "Get all user agreement statuses",
        "parameters": [
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "name": "accepted",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "name": "activeProfilesOnly",
            "in": "query",
            "required": false,
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UA_UserAgreementStatus"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Grant permissions to other members"
          }
        ]
      }
    },
    "/administration/user-agreement/status/{profile}": {
      "get": {
        "summary": "Get user agreement status for a profile",
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UA_UserAgreementStatus"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Grant permissions to other members"
          }
        ]
      }
    },
    "/applications": {
      "post": {
        "summary": "Create application",
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "pictureAttachmentId": {
                    "nullable": true,
                    "type": "string"
                  },
                  "defaultExternalPicture": {
                    "nullable": true,
                    "type": "string"
                  },
                  "clientId": {
                    "nullable": true,
                    "type": "string"
                  },
                  "clientSecret": {
                    "nullable": true,
                    "type": "string"
                  },
                  "clientCredentialsFlowEnabled": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "codeFlowEnabled": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "codeFlowRedirectURIs": {
                    "nullable": true,
                    "type": "string"
                  },
                  "pkceRequired": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "implicitFlowEnabled": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "implicitFlowRedirectURIs": {
                    "nullable": true,
                    "type": "string"
                  },
                  "endpointUri": {
                    "nullable": true,
                    "type": "string"
                  },
                  "endpointSslVerification": {
                    "default": true,
                    "type": "boolean"
                  },
                  "appLevelAuth": {
                    "nullable": true,
                    "$ref": "#/components/schemas/EndpointAuthCreate"
                  },
                  "sslKeystoreAuth": {
                    "nullable": true,
                    "type": "string"
                  },
                  "hasSigningKey": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "hasPublicKeySignature": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "basicAuthUsername": {
                    "nullable": true,
                    "type": "string"
                  },
                  "basicAuthPassword": {
                    "nullable": true,
                    "type": "string"
                  },
                  "bearerAuthToken": {
                    "nullable": true,
                    "type": "string"
                  },
                  "connectToSpace": {
                    "nullable": true,
                    "default": false,
                    "type": "boolean"
                  },
                  "state": {
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ES_App"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Create applications"
          }
        ]
      }
    },
    "/applications/{application}/restore": {
      "post": {
        "summary": "Restore application",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update applications"
          }
        ]
      }
    },
    "/applications/paged": {
      "get": {
        "summary": "Get all applications",
        "parameters": [
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "owner",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "withArchived",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "withManaged",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": true,
              "type": "boolean"
            }
          },
          {
            "name": "ordering",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/AppsOrdering"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ES_App"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View applications"
          }
        ]
      }
    },
    "/applications/{application}": {
      "get": {
        "summary": "Get application",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ES_App"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View applications"
          }
        ]
      },
      "patch": {
        "summary": "Update application",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "nullable": true,
                    "type": "string"
                  },
                  "pictureAttachmentId": {
                    "nullable": true,
                    "type": "string"
                  },
                  "defaultExternalPicture": {
                    "nullable": true,
                    "type": "string"
                  },
                  "clientSecret": {
                    "nullable": true,
                    "type": "string"
                  },
                  "clientCredentialsFlowEnabled": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "codeFlowEnabled": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "codeFlowRedirectURIs": {
                    "nullable": true,
                    "type": "string"
                  },
                  "pkceRequired": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "implicitFlowEnabled": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "implicitFlowRedirectURIs": {
                    "nullable": true,
                    "type": "string"
                  },
                  "endpointUri": {
                    "nullable": true,
                    "type": "string"
                  },
                  "endpointSslVerification": {
                    "type": "boolean"
                  },
                  "hasVerificationToken": {
                    "type": "boolean"
                  },
                  "hasPublicKeySignature": {
                    "type": "boolean"
                  },
                  "hasSigningKey": {
                    "type": "boolean"
                  },
                  "appLevelAuth": {
                    "$ref": "#/components/schemas/EndpointAppLevelAuthUpdateType"
                  },
                  "sslKeystoreAuth": {
                    "nullable": true,
                    "type": "string"
                  },
                  "basicAuthUsername": {
                    "type": "string"
                  },
                  "basicAuthPassword": {
                    "type": "string"
                  },
                  "bearerAuthToken": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ES_App"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update applications"
          }
        ]
      },
      "delete": {
        "summary": "Delete application",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Delete applications"
          }
        ]
      }
    },
    "/applications/{application}/bearer-token": {
      "get": {
        "summary": "Bearer Token",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View application secrets"
          }
        ]
      }
    },
    "/applications/{application}/last-client-credentials-access": {
      "get": {
        "summary": "Get last client credentials access info",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "$ref": "#/components/schemas/AccessRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View applications"
          }
        ]
      }
    },
    "/applications/{application}/public-keys": {
      "get": {
        "summary": "Public Keys",
        "description": {
          "text": "Returns list of public keys in JWKS format. If message signature is successfully verified with any of the returned public keys, the message can be considered authentic."
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View applications"
          }
        ]
      }
    },
    "/applications/ui-extensions": {
      "patch": {
        "summary": "Set UI extensions",
        "description": {
          "text": "Set UI extensions supported by the calling application in specified context. Only the application itself can set its extensions."
        },
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contextIdentifier": {
                    "$ref": "#/components/schemas/PermissionContextIdentifier"
                  },
                  "extensions": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AppUiExtensionIn"
                    }
                  }
                },
                "required": [
                  "contextIdentifier",
                  "extensions"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/applications/authorizations/authorized-applications": {
      "get": {
        "summary": "Get applications authorized in context",
        "description": {
          "text": "List applications authorized in specified context"
        },
        "parameters": [
          {
            "name": "contextIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ES_App"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View applications"
          }
        ]
      }
    },
    "/applications/unfurls/domains": {
      "patch": {
        "summary": "Update unfurled domains",
        "description": {
          "text": "Update list of domains for unfurling by the application. Method is to be called by the application providing unfurls."
        },
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "domains": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "domains"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update applications"
          }
        ]
      }
    },
    "/applications/unfurls/patterns": {
      "patch": {
        "summary": "Update unfurled patterns",
        "description": {
          "text": "Update list of external ID prefixes for unfurling by the application. Method is to be called by the application providing unfurls."
        },
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "patterns": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ApplicationUnfurlPatternRequest"
                    }
                  }
                },
                "required": [
                  "patterns"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update applications"
          }
        ]
      }
    },
    "/applications/unfurls/queue/content": {
      "post": {
        "summary": "Post unfurls content",
        "description": {
          "text": "Provide Space with unfurls content. Method is to be called by the application providing unfurls."
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "unfurls": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ApplicationUnfurl"
                    }
                  }
                },
                "required": [
                  "unfurls"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PostUnfurlContentResult"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Provide external unfurls as attachments"
          }
        ]
      }
    },
    "/applications/unfurls/queue/request-external-auth": {
      "post": {
        "summary": "Request external system authentication",
        "description": {
          "text": "Request user to authenticate in external system to provide unfurls from it. Method is to be called by the application providing unfurls."
        },
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "queueItemId": {
                    "type": "string"
                  },
                  "message": {
                    "$ref": "#/components/schemas/ApplicationUnfurlContent.Message"
                  }
                },
                "required": [
                  "queueItemId",
                  "message"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Provide external unfurls as attachments"
          }
        ]
      }
    },
    "/applications/unfurls/queue/reset-external-auth-requests": {
      "post": {
        "summary": "Clear external system authentication requests",
        "description": {
          "text": "Clear all external system authentication requests for the specified user. Method is to be called by the application providing unfurls."
        },
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "$ref": "#/components/schemas/ProfileIdentifier"
                  }
                },
                "required": [
                  "userId"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Provide external unfurls as attachments"
          }
        ]
      }
    },
    "/applications/unfurls/queue": {
      "get": {
        "summary": "Get unfurl queue items",
        "description": {
          "text": "Get links for unfurling by the application. Method is to be called by the application providing unfurls."
        },
        "parameters": [
          {
            "name": "fromEtag",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "batchSize",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationUnfurlQueueItem"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Provide external unfurls as attachments"
          }
        ]
      }
    },
    "/applications/{application}/authorizations/authorized-contexts": {
      "get": {
        "summary": "Get all authorized contexts",
        "description": {
          "text": "List authorized contexts of an application"
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermissionContextApi"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View applications"
          }
        ]
      }
    },
    "/applications/{application}/authorizations/authorized-rights": {
      "get": {
        "summary": "Get all authorized rights",
        "description": {
          "text": "List authorized rights of an application in specified context"
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contextIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RightDTO"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View applications"
          }
        ]
      },
      "patch": {
        "summary": "Update authorized right",
        "description": {
          "text": "Generic method for editing authorized right status in given context."
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contextIdentifier": {
                    "$ref": "#/components/schemas/PermissionContextIdentifier"
                  },
                  "updates": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RightUpdateDTO"
                    }
                  }
                },
                "required": [
                  "contextIdentifier",
                  "updates"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "delete": {
        "summary": "Delete authorized right",
        "description": {
          "text": "Remove application authorization in specified context"
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contextIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/applications/{application}/authorizations/authorized-rights/request-rights": {
      "patch": {
        "summary": "Request Rights",
        "description": {
          "text": "Request rights for an application in specified context"
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contextIdentifier": {
                    "$ref": "#/components/schemas/PermissionContextIdentifier"
                  },
                  "rightCodes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "contextIdentifier",
                  "rightCodes"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update applications"
          }
        ]
      }
    },
    "/applications/{application}/authorizations/required-rights": {
      "get": {
        "summary": "Get all required rights",
        "description": {
          "text": "List required rights for an application"
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RightDTO"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View applications"
          }
        ]
      },
      "patch": {
        "summary": "Update required right",
        "description": {
          "text": "Update list of required rights for an application"
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "rightCodesToAdd": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "rightCodesToRemove": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "requestRightsInAuthorizedContexts": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "rightCodesToAdd",
                  "rightCodesToRemove",
                  "requestRightsInAuthorizedContexts"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update applications"
          }
        ]
      }
    },
    "/applications/{application}/client-secret/regenerate": {
      "post": {
        "summary": "Regenerate app secret",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update applications"
          }
        ]
      }
    },
    "/applications/{application}/client-secret": {
      "get": {
        "summary": "Get client secret",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View application secrets"
          }
        ]
      }
    },
    "/applications/{application}/permanent-tokens": {
      "post": {
        "summary": "Create permanent token",
        "description": {
          "text": "Create a permanent token for the given application that can be used to access the current organisation"
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "scope": {
                    "type": "string"
                  },
                  "expires": {
                    "nullable": true,
                    "type": "string",
                    "format": "date-time"
                  }
                },
                "required": [
                  "name",
                  "scope"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "first": {
                      "$ref": "#/components/schemas/ES_ApplicationPermanentToken"
                    },
                    "second": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "first",
                    "second"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update applications"
          }
        ]
      },
      "get": {
        "summary": "Get all permanent tokens",
        "description": {
          "text": "Get permanent tokens used to access the current organisation by the given application"
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ES_ApplicationPermanentToken"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View application secrets"
          }
        ]
      }
    },
    "/applications/{application}/permanent-tokens/{tokenId}": {
      "patch": {
        "summary": "Update permanent token",
        "description": {
          "text": "Update an existing personal token used to access the current organisation. The permanent token's name and/or scope can be updated."
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "nullable": true,
                    "type": "string"
                  },
                  "scope": {
                    "nullable": true,
                    "type": "string"
                  },
                  "expires": {
                    "nullable": true,
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update applications"
          }
        ]
      },
      "delete": {
        "summary": "Delete permanent token",
        "description": {
          "text": "Delete a personal token used to access the current organisation"
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update applications"
          }
        ]
      }
    },
    "/applications/{application}/permanent-tokens/current": {
      "delete": {
        "summary": "Delete current permanent token",
        "description": {
          "text": "Delete personal token of the given application"
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/applications/{application}/signing-key/regenerate": {
      "post": {
        "summary": "Regenerate signing key",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update applications"
          }
        ]
      }
    },
    "/applications/{application}/signing-key": {
      "get": {
        "summary": "Get signing key",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View application secrets"
          }
        ]
      }
    },
    "/applications/{application}/ssh-keys": {
      "post": {
        "summary": "Add SSH key",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "publicKey": {
                    "type": "string"
                  },
                  "comment": {
                    "type": "string"
                  }
                },
                "required": [
                  "publicKey",
                  "comment"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update applications"
          }
        ]
      },
      "get": {
        "summary": "Get SSH keys",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ES_SshKey"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View applications"
          }
        ]
      }
    },
    "/applications/{application}/ssh-keys/{fingerprint}": {
      "delete": {
        "summary": "Delete SSH key",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fingerprint",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update applications"
          }
        ]
      }
    },
    "/applications/{application}/ui-extensions": {
      "get": {
        "summary": "Get UI extensions",
        "description": {
          "text": "Get UI extensions supported by the application in specified context. Omit contextIdentifier to get UI extensions in all contexts"
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contextIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppUiExtensionApi"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View applications"
          }
        ]
      }
    },
    "/applications/{application}/ui-extensions/disable-for-everybody": {
      "patch": {
        "summary": "Disable application UI",
        "description": {
          "text": "Disable application UI for everybody in specified context. Requires Superadmin right for global context, AdminProject for project context, AdminChannel for channel context. Users will still be able to enable application UI individually."
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contextIdentifier": {
                    "$ref": "#/components/schemas/PermissionContextIdentifier"
                  }
                },
                "required": [
                  "contextIdentifier"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View applications"
          },
          {
            "title": "Grant permissions to other members"
          },
          {
            "title": "Manage project permission scheme"
          },
          {
            "title": "Manage channels"
          }
        ]
      }
    },
    "/applications/{application}/ui-extensions/disable-for-me": {
      "patch": {
        "summary": "Disable application UI for me",
        "description": {
          "text": "Disable application UI in specified context for the current user"
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contextIdentifier": {
                    "$ref": "#/components/schemas/PermissionContextIdentifier"
                  }
                },
                "required": [
                  "contextIdentifier"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View applications"
          }
        ]
      }
    },
    "/applications/{application}/ui-extensions/enable-for-everybody": {
      "patch": {
        "summary": "Enable application UI",
        "description": {
          "text": "Enable application UI for everybody in specified context. Requires Superadmin right for global context, AdminProject for project context, AdminChannel for channel context. Users will still be able to disable application UI individually."
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contextIdentifier": {
                    "$ref": "#/components/schemas/PermissionContextIdentifier"
                  }
                },
                "required": [
                  "contextIdentifier"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View applications"
          },
          {
            "title": "Grant permissions to other members"
          },
          {
            "title": "Manage project permission scheme"
          },
          {
            "title": "Manage channels"
          }
        ]
      }
    },
    "/applications/{application}/ui-extensions/enable-for-me": {
      "patch": {
        "summary": "Enable application UI for me",
        "description": {
          "text": "Enable application UI in specified context for the current user"
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contextIdentifier": {
                    "$ref": "#/components/schemas/PermissionContextIdentifier"
                  }
                },
                "required": [
                  "contextIdentifier"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View applications"
          }
        ]
      }
    },
    "/applications/{application}/unfurl-domains/authorize": {
      "post": {
        "summary": "Authorize unfurled domains",
        "description": {
          "text": "Authorize domains for unfurling by the application"
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "domains": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "approve": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "domains",
                  "approve"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Authorize domains and patterns for app-powered previews"
          }
        ]
      }
    },
    "/applications/{application}/unfurl-domains": {
      "get": {
        "summary": "Get all unfurl domains",
        "description": {
          "text": "List domains for unfurling by the application"
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationUnfurlDomain"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View applications"
          }
        ]
      }
    },
    "/applications/{application}/unfurl-patterns/authorize": {
      "post": {
        "summary": "Authorize unfurled patterns",
        "description": {
          "text": "Authorize patterns for unfurling by the application"
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "patterns": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "approve": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "patterns",
                  "approve"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Authorize domains and patterns for app-powered previews"
          }
        ]
      }
    },
    "/applications/{application}/unfurl-patterns": {
      "get": {
        "summary": "Get all unfurl patterns",
        "description": {
          "text": "List patterns for unfurling by the application"
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationUnfurlPattern"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View applications"
          }
        ]
      }
    },
    "/applications/{application}/verification-token/regenerate": {
      "post": {
        "summary": "Regenerate verification token",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update applications"
          }
        ]
      }
    },
    "/applications/{application}/verification-token": {
      "get": {
        "summary": "Get verification token",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View application secrets"
          }
        ]
      }
    },
    "/applications/{application}/webhooks": {
      "post": {
        "summary": "Create webhook",
        "description": {
          "text": "Create application webhook"
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  },
                  "endpoint": {
                    "nullable": true,
                    "$ref": "#/components/schemas/EndpointCreateDTO"
                  },
                  "endpointAuth": {
                    "nullable": true,
                    "$ref": "#/components/schemas/EndpointAuthCreateDTO"
                  },
                  "enabled": {
                    "default": true,
                    "type": "boolean"
                  },
                  "acceptedHttpResponseCodes": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "doRetries": {
                    "default": true,
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "acceptedHttpResponseCodes"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update applications"
          }
        ]
      },
      "get": {
        "summary": "Get all webhooks",
        "description": {
          "text": "Get application webhooks"
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withArchived",
            "in": "query",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FullWebhookDTO"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View applications"
          }
        ]
      }
    },
    "/applications/{application}/webhooks/{webhookId}": {
      "post": {
        "summary": "Post webhook",
        "description": {
          "text": "Restore archived application webhook"
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update applications"
          }
        ]
      },
      "patch": {
        "summary": "Update webhook",
        "description": {
          "text": "Update application webhook"
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "endpoint": {
                    "nullable": true,
                    "$ref": "#/components/schemas/ExternalEndpointUpdateDTO"
                  },
                  "endpointAuth": {
                    "nullable": true,
                    "$ref": "#/components/schemas/EndpointAuthUpdateDTO"
                  },
                  "acceptedHttpResponseCodes": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "doRetries": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update applications"
          }
        ]
      },
      "delete": {
        "summary": "Delete webhook",
        "description": {
          "text": "Archive application webhook"
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update applications"
          }
        ]
      }
    },
    "/applications/{application}/webhooks/{webhookId}/bearer-token": {
      "get": {
        "summary": "Bearer Token",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View application secrets"
          }
        ]
      }
    },
    "/applications/{application}/webhooks/{webhookId}/custom-headers": {
      "post": {
        "summary": "Post custom header",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "headers": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomHttpHeaderDTO"
                    }
                  }
                },
                "required": [
                  "headers"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update applications"
          }
        ]
      },
      "get": {
        "summary": "Get custom header",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomHttpHeaderDTO"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View application secrets"
          }
        ]
      }
    },
    "/applications/{application}/webhooks/{webhookId}/signing-key/regenerate": {
      "post": {
        "summary": "Regenerate",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update applications"
          }
        ]
      }
    },
    "/applications/{application}/webhooks/{webhookId}/signing-key": {
      "get": {
        "summary": "Get signing key",
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View application secrets"
          }
        ]
      }
    },
    "/applications/{application}/webhooks/{webhookId}/subscriptions": {
      "post": {
        "summary": "Create subscription",
        "description": {
          "text": "Add webhook subscription"
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "subscription": {
                    "$ref": "#/components/schemas/CustomGenericSubscriptionIn"
                  }
                },
                "required": [
                  "name",
                  "subscription"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionDTO"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update applications"
          }
        ]
      },
      "get": {
        "summary": "Get all subscriptions",
        "description": {
          "text": "Get webhook subscriptions"
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionDTO"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View applications"
          }
        ]
      }
    },
    "/applications/{application}/webhooks/{webhookId}/subscriptions/{subscriptionId}/request-missing-rights": {
      "post": {
        "summary": "Request Missing Rights",
        "description": {
          "text": "Ensures that all permissions required for this subscription are requested in the corresponding permission role"
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/applications/{application}/webhooks/{webhookId}/subscriptions/{subscriptionId}": {
      "patch": {
        "summary": "Update subscription",
        "description": {
          "text": "Update webhook subscription"
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "subscription": {
                    "$ref": "#/components/schemas/CustomGenericSubscriptionIn"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionDTO"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update applications"
          }
        ]
      },
      "delete": {
        "summary": "Delete subscription",
        "description": {
          "text": "Delete webhook subscription"
        },
        "parameters": [
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update applications"
          }
        ]
      }
    },
    "/auth-modules": {
      "post": {
        "summary": "Create auth module",
        "description": {
          "text": "Create a new authentication module. Settings are specific to the type of authentication module being created."
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "iconDataURI": {
                    "nullable": true,
                    "type": "string"
                  },
                  "settings": {
                    "$ref": "#/components/schemas/ES_AuthModuleSettings"
                  }
                },
                "required": [
                  "key",
                  "name",
                  "enabled",
                  "settings"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ES_AuthModule"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage authentication modules"
          }
        ]
      },
      "get": {
        "summary": "Get all auth modules",
        "description": {
          "text": "Get all authentication modules"
        },
        "parameters": [
          {
            "name": "withDisabled",
            "in": "query",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ES_AuthModule"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/auth-modules/reorder": {
      "post": {
        "summary": "Reorder authentication modules",
        "description": {
          "text": "Define the order of authentication modules. This affects the order of the federated authentication module buttons on the sign-in page."
        },
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "order": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "order"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage authentication modules"
          }
        ]
      }
    },
    "/auth-modules/{id}/saml-metadata": {
      "post": {
        "summary": "SAML metadata",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "idpUrl": {
                    "type": "string"
                  },
                  "idpEntityId": {
                    "type": "string"
                  },
                  "idpCertificateSHA256": {
                    "type": "string"
                  },
                  "spEntityId": {
                    "type": "string"
                  },
                  "sslKeystore": {
                    "nullable": true,
                    "$ref": "#/components/schemas/SSLKeystore"
                  },
                  "contactProfileId": {
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "idpUrl",
                  "idpEntityId",
                  "idpCertificateSHA256",
                  "spEntityId"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SamlMetadataResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/auth-modules/discover-oidc": {
      "get": {
        "summary": "Discover OIDC",
        "description": {
          "text": "Automatically discovers the endpoints for the OpenID Connect provider via discovery document"
        },
        "parameters": [
          {
            "name": "discoveryEndpoint",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OIDCDiscovery"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage authentication modules"
          }
        ]
      }
    },
    "/auth-modules/key:{key}": {
      "get": {
        "summary": "Get auth module by key",
        "description": {
          "text": "Get an existing authentication module"
        },
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "$ref": "#/components/schemas/ES_AuthModule"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/auth-modules/{id}": {
      "patch": {
        "summary": "Update auth module",
        "description": {
          "text": "Update an existing authentication module. Optional parameters will be ignored when not specified and updated otherwise."
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "nullable": true,
                    "type": "string"
                  },
                  "name": {
                    "nullable": true,
                    "type": "string"
                  },
                  "enabled": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "iconDataURI": {
                    "nullable": true,
                    "type": "string"
                  },
                  "settings": {
                    "nullable": true,
                    "$ref": "#/components/schemas/ES_AuthModuleSettings"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage authentication modules"
          }
        ]
      },
      "delete": {
        "summary": "Delete auth module",
        "description": {
          "text": "Delete an existing authentication module"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage authentication modules"
          }
        ]
      }
    },
    "/auth-modules/config": {
      "get": {
        "summary": "Get config",
        "description": {
          "text": "Get authentication configuration"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthConfig"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage authentication modules"
          }
        ]
      },
      "put": {
        "summary": "Put config",
        "description": {
          "text": "Set authentication configuration"
        },
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "dontRememberMeTtl": {
                    "nullable": true,
                    "type": "integer",
                    "format": "int32"
                  },
                  "adminRememberMeTtl": {
                    "nullable": true,
                    "type": "integer",
                    "format": "int32"
                  },
                  "userRememberMeTtl": {
                    "nullable": true,
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage authentication modules"
          }
        ]
      },
      "delete": {
        "summary": "Delete config",
        "description": {
          "text": "Reset authentication configuration to default"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthConfig"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage authentication modules"
          }
        ]
      }
    },
    "/auth-modules/test/built-in": {
      "post": {
        "summary": "Test built-in settings",
        "description": {
          "text": "For a username/password combination, test built-in authentication with updated settings"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "settings": {
                    "$ref": "#/components/schemas/ES_BuiltinAuthModuleSettings"
                  },
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                },
                "required": [
                  "settings",
                  "username",
                  "password"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TD_MemberProfile"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/auth-modules/test/ldap": {
      "post": {
        "summary": "Test LDAP settings",
        "description": {
          "text": "For a username/password combination, test LDAP authentication with updated settings"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "settings": {
                    "$ref": "#/components/schemas/ES_LdapAuthModuleSettings"
                  },
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                },
                "required": [
                  "settings",
                  "username",
                  "password"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ES_DefaultProfileLoginDetails"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/auth-modules/throttled-logins": {
      "get": {
        "summary": "Get throttled logins",
        "description": {
          "text": "Returns logins that are currently subjected to rate limits when logging in to Space"
        },
        "parameters": [
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "login",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ThrottledLogin"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "delete": {
        "summary": "Reset throttling status",
        "description": {
          "text": "Resets the counter that tracks failed login attempts for the account with the specified logins. The member who use these accounts are no longer blocked from attempting to log in to Space."
        },
        "parameters": [
          {
            "name": "logins",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/auth-modules/throttled-logins/org-status": {
      "get": {
        "summary": "Get organization throttling status",
        "description": {
          "text": "Returns date and time until which the organization are throttled"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgThrottlingStatus"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "delete": {
        "summary": "Reset organization throttling",
        "description": {
          "text": "Resets date and time until which the organization are throttled"
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/auth-modules/usages": {
      "get": {
        "summary": "Get all usages",
        "description": {
          "text": "Retrieve a list of authentication module usage count"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuthModuleUsage"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage authentication modules"
          }
        ]
      }
    },
    "/auth-modules/{id}/logins/{identifier}/change": {
      "post": {
        "summary": "Change password",
        "description": {
          "text": "Change password for a given authentication module (id) and profile (identifier)"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "oldPassword": {
                    "type": "string"
                  },
                  "newPassword": {
                    "type": "string"
                  }
                },
                "required": [
                  "oldPassword",
                  "newPassword"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/auth-modules/{id}/logins/{identifier}/reset": {
      "post": {
        "summary": "Reset password",
        "description": {
          "text": "Request a password reset for a given authentication module (id) and profile (identifier)"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/auth-modules/{id}/logins/{identifier}": {
      "delete": {
        "summary": "Delete login",
        "description": {
          "text": "Detach a profile login from an authentication module. The id parameter refers to the authentication module, the identifier parameter refers to the login."
        },
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/billing-admin/overdrafts": {
      "get": {
        "summary": "Get overdrafts",
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Overdrafts"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View usage data"
          }
        ]
      },
      "put": {
        "summary": "Set overdrafts",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "storage": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "bandwidth": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "ciCredits": {
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "required": [
                  "storage",
                  "bandwidth",
                  "ciCredits"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update overdrafts"
          }
        ]
      }
    },
    "/billing-admin/reports/{billingPeriod}": {
      "get": {
        "summary": "Get billing report",
        "description": {
          "text": "Returns a billing report for the given billing period"
        },
        "parameters": [
          {
            "name": "billingPeriod",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingReport"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View usage data"
          }
        ]
      }
    },
    "/billing-admin/reports/today": {
      "get": {
        "summary": "Get billing report for today",
        "description": {
          "text": "Returns a billing report for today"
        },
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TodayBillingReport"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View usage data"
          }
        ]
      }
    },
    "/blog": {
      "post": {
        "summary": "Publish blog post",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "content": {
                    "type": "string"
                  },
                  "locations": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "teams": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "event": {
                    "nullable": true,
                    "$ref": "#/components/schemas/BlogCalendarEvent"
                  }
                },
                "required": [
                  "title",
                  "content"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Publish articles"
          }
        ]
      },
      "get": {
        "summary": "Get all blog posts",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "term",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "authorId",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "forProfile",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ArticleRecord"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View articles"
          }
        ]
      }
    },
    "/blog/import": {
      "post": {
        "summary": "Import blog posts",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "$ref": "#/components/schemas/ImportMetadata"
                  },
                  "articles": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ExternalArticle"
                    }
                  }
                },
                "required": [
                  "metadata",
                  "articles"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ArticleImportResult"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Import articles"
          }
        ]
      }
    },
    "/blog/stats": {
      "get": {
        "summary": "Get stats",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "authorId",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BG_Stats"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View articles"
          }
        ]
      }
    },
    "/blog/alias:{alias}": {
      "get": {
        "summary": "Get blog post by alias",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "$ref": "#/components/schemas/ArticleRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View articles"
          }
        ]
      }
    },
    "/blog/external-id:{id}": {
      "get": {
        "summary": "Get blog post by external ID",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "$ref": "#/components/schemas/ArticleRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View articles"
          }
        ]
      }
    },
    "/blog/{id}": {
      "get": {
        "summary": "Get blog post",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View articles"
          }
        ]
      },
      "patch": {
        "summary": "Update blog post",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "nullable": true,
                    "type": "string"
                  },
                  "content": {
                    "nullable": true,
                    "type": "string"
                  },
                  "locations": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "teams": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "event": {
                    "nullable": true,
                    "$ref": "#/components/schemas/BlogCalendarEvent"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Publish articles"
          }
        ]
      },
      "delete": {
        "summary": "Unpublish blog post",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Unpublish articles"
          }
        ]
      }
    },
    "/calendars/absence-events": {
      "get": {
        "summary": "Get all absence events",
        "description": {
          "text": "Get/search absences. Parameters are applied as 'AND' filters."
        },
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "team",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "location",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AbsenceEvent"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/calendars/birthday-events": {
      "get": {
        "summary": "Get all birthday events",
        "description": {
          "text": "Get/search birthdays. Parameters are applied as 'AND' filters."
        },
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "team",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "location",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BirthdayEvent"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/calendars/birthday-events/starred": {
      "get": {
        "summary": "Get all starred birthday events",
        "description": {
          "text": "Get/search birthdays in a specific time period for starred profiles."
        },
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BirthdayEvent"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/calendars/event-participations/{id}": {
      "patch": {
        "summary": "Update event participation",
        "description": {
          "text": "Update RSVP / calendar event participation status for a calendar event attached to an article"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "newStatus": {
                    "$ref": "#/components/schemas/EventParticipationStatus"
                  }
                },
                "required": [
                  "newStatus"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/calendars/events": {
      "get": {
        "summary": "Get all events",
        "description": {
          "text": "Get calendar events attached to an article in a specific time period"
        },
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeetingRecord"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/calendars/events/{id}": {
      "get": {
        "summary": "Get event",
        "description": {
          "text": "Get a calendar event attached to an article"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/calendars/holidays": {
      "get": {
        "summary": "Get all holidays",
        "description": {
          "text": "Get/search holidays. Parameters are applied as 'AND' filters."
        },
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "team",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "location",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "workingDays",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HolidaysEvent"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/calendars/meetings": {
      "post": {
        "summary": "Create meeting",
        "description": {
          "text": "Create a meeting"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "summary": {
                    "type": "string"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  },
                  "occurrenceRule": {
                    "$ref": "#/components/schemas/CalendarEventSpec"
                  },
                  "locations": {
                    "default": [],
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "profiles": {
                    "default": [],
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "externalParticipants": {
                    "default": [],
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "teams": {
                    "default": [],
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "visibility": {
                    "default": "EVERYONE",
                    "$ref": "#/components/schemas/MeetingVisibility"
                  },
                  "modificationPreference": {
                    "default": "PARTICIPANTS",
                    "$ref": "#/components/schemas/MeetingModificationPreference"
                  },
                  "joiningPreference": {
                    "default": "NOBODY",
                    "$ref": "#/components/schemas/MeetingJoiningPreference"
                  },
                  "notifyOnExport": {
                    "default": true,
                    "type": "boolean"
                  },
                  "organizer": {
                    "nullable": true,
                    "type": "string"
                  },
                  "conferenceData": {
                    "nullable": true,
                    "$ref": "#/components/schemas/EventConferenceData"
                  },
                  "attachments": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MeetingAttachment"
                    }
                  },
                  "calendarId": {
                    "nullable": true,
                    "$ref": "#/components/schemas/CalendarIdentifier"
                  }
                },
                "required": [
                  "summary",
                  "occurrenceRule"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Meeting"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update meetings"
          }
        ]
      },
      "get": {
        "summary": "Get all meetings",
        "description": {
          "text": "Search meetings by name, location, time period and other parameters. Parameters are applied as 'AND' filters while values in lists of locations, profiles and teams have 'OR' semantics."
        },
        "parameters": [
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "summaryQuery",
            "in": "query",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "name": "locationsQuery",
            "in": "query",
            "required": false,
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "startingAfter",
            "in": "query",
            "required": false,
            "deprecated": true,
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endingAfter",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endingBefore",
            "in": "query",
            "required": false,
            "deprecated": true,
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "startingBefore",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "required": false,
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "teams",
            "in": "query",
            "required": false,
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "organizer",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "includePrivate",
            "in": "query",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "includeArchived",
            "in": "query",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "includeMeetingInstances",
            "in": "query",
            "required": false,
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DTO_Meeting"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View meetings"
          }
        ]
      }
    },
    "/calendars/meetings/next-occurrence": {
      "get": {
        "summary": "Get next meeting occurrence",
        "description": {
          "text": "Search for the next meeting occurrence that starts after the provided time point or after the current time if it is not specified"
        },
        "parameters": [
          {
            "name": "meetingId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "$ref": "#/components/schemas/MeetingOccurrenceTime"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View meetings"
          }
        ]
      }
    },
    "/calendars/meetings/occurrences": {
      "get": {
        "summary": "Get meeting occurrences for period",
        "description": {
          "text": "Search for occurrences of a meeting that start in the provided time interval. Interval limits are inclusive, response is limited by the first 1_000 results by default."
        },
        "parameters": [
          {
            "name": "meetingId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "since",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "until",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeetingOccurrenceTime"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View meetings"
          }
        ]
      }
    },
    "/calendars/meetings/occurrences-by-meeting": {
      "get": {
        "summary": "Get meeting occurrences for period for multiple meetings",
        "description": {
          "text": "Search for occurrences of a meeting that start in the provided time interval. Interval limits are inclusive, response is limited by the first 1_000 results by default (per meeting)."
        },
        "parameters": [
          {
            "name": "meetingIds",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "since",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "until",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeetingWithOccurrenceTime"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View meetings"
          }
        ]
      }
    },
    "/calendars/meetings/participation-statuses": {
      "get": {
        "summary": "Get meeting participation statuses for profiles",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profileIds",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventParticipationStatus"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View meetings"
          }
        ]
      }
    },
    "/calendars/meetings/participation-statuses-external": {
      "get": {
        "summary": "Get RSVP statuses for external users",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emails",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventParticipationStatus"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View meetings"
          }
        ]
      }
    },
    "/calendars/meetings/profile-participation": {
      "get": {
        "summary": "Get profile participation statuses for meetings",
        "parameters": [
          {
            "name": "profileId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "events",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "first": {
                        "type": "string"
                      },
                      "second": {
                        "$ref": "#/components/schemas/EventParticipationStatus"
                      }
                    },
                    "required": [
                      "first",
                      "second"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true,
        "x-rights": [
          {
            "title": "View meetings"
          }
        ]
      }
    },
    "/calendars/meetings/profile-participation-records": {
      "get": {
        "summary": "Get profile participation status records for meetings",
        "parameters": [
          {
            "name": "profileId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "events",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_MeetingRSVP"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View meetings"
          }
        ]
      }
    },
    "/calendars/meetings/{id}": {
      "get": {
        "summary": "Get meeting",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "$ref": "#/components/schemas/DTO_Meeting"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View meetings"
          }
        ]
      },
      "patch": {
        "summary": "Update meeting",
        "description": {
          "text": "Patch a meeting. Only not-null parameters and not empty diffs will be applied."
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "summary": {
                    "nullable": true,
                    "type": "string"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  },
                  "occurrenceRule": {
                    "nullable": true,
                    "$ref": "#/components/schemas/CalendarEventSpec"
                  },
                  "locationsDiff": {
                    "$ref": "#/components/schemas/Diff"
                  },
                  "profilesDiff": {
                    "$ref": "#/components/schemas/Diff"
                  },
                  "externalParticipantsDiff": {
                    "$ref": "#/components/schemas/Diff"
                  },
                  "teamsDiff": {
                    "$ref": "#/components/schemas/Diff"
                  },
                  "visibility": {
                    "nullable": true,
                    "$ref": "#/components/schemas/MeetingVisibility"
                  },
                  "modificationPreference": {
                    "nullable": true,
                    "$ref": "#/components/schemas/MeetingModificationPreference"
                  },
                  "joiningPreference": {
                    "nullable": true,
                    "$ref": "#/components/schemas/MeetingJoiningPreference"
                  },
                  "notifyOnExport": {
                    "default": true,
                    "type": "boolean"
                  },
                  "organizer": {
                    "nullable": true,
                    "type": "string"
                  },
                  "targetDate": {
                    "nullable": true,
                    "type": "string",
                    "format": "date-time"
                  },
                  "modificationKind": {
                    "default": "All",
                    "$ref": "#/components/schemas/RecurrentModification"
                  },
                  "conferenceData": {
                    "nullable": true,
                    "$ref": "#/components/schemas/EventConferenceData"
                  },
                  "attachments": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MeetingAttachment"
                    }
                  },
                  "calendarId": {
                    "nullable": true,
                    "$ref": "#/components/schemas/CalendarIdentifier"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Meeting"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update meetings"
          }
        ]
      },
      "delete": {
        "summary": "Delete meeting",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetDate",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "modificationKind",
            "in": "query",
            "required": false,
            "schema": {
              "default": "All",
              "$ref": "#/components/schemas/RecurrentModification"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Meeting"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update meetings"
          }
        ]
      }
    },
    "/calendars/meetings/{id}/participation-status": {
      "patch": {
        "summary": "Update profile participation status",
        "description": {
          "text": "Update profile participation status for a meeting"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "profileId": {
                    "type": "string"
                  },
                  "status": {
                    "$ref": "#/components/schemas/EventParticipationStatus"
                  },
                  "targetDate": {
                    "nullable": true,
                    "type": "string",
                    "format": "date-time"
                  },
                  "modificationKind": {
                    "default": "All",
                    "$ref": "#/components/schemas/RecurrentModification"
                  }
                },
                "required": [
                  "profileId",
                  "status"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Meeting"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update meeting RSVP status"
          }
        ]
      }
    },
    "/calendars/membership-events": {
      "get": {
        "summary": "Get all membership events",
        "description": {
          "text": "Get/search membership events. Parameters are applied as 'AND' filters."
        },
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "team",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "location",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MembershipEvent"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View memberships"
          }
        ]
      }
    },
    "/calendars/non-working-days-events": {
      "get": {
        "summary": "Get all non working days events",
        "description": {
          "text": "Get/search non-working day events. Parameters are applied as 'AND' filters."
        },
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "member",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "team",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "location",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NonWorkingDaysEvent"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/calls": {
      "post": {
        "summary": "Create call",
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "participants": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ProfileIdentifier"
                    }
                  },
                  "private": {
                    "type": "boolean"
                  },
                  "channelId": {
                    "nullable": true,
                    "type": "string"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "participants",
                  "private"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Room"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/chats/channels": {
      "post": {
        "summary": "Add new channel",
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "private": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "description",
                  "private"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/M2ChannelRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Add new channels"
          }
        ]
      }
    },
    "/chats/channels/dm": {
      "post": {
        "summary": "Get or create direct messages channel",
        "description": {
          "text": "Create or get a direct messages channel with a profile"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "profile": {
                    "type": "string"
                  }
                },
                "required": [
                  "profile"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/M2ChannelRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      }
    },
    "/chats/channels/is-name-free": {
      "post": {
        "summary": "Is name free?",
        "description": {
          "text": "Check whether a channel name is available. Returns true when the channel name can be used to create a new channel, false otherwise."
        },
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/chats/channels/{channel}/restore-archived": {
      "post": {
        "summary": "Restore archived channel",
        "description": {
          "text": "Restore an archived channel and allow new messages to be added again."
        },
        "parameters": [
          {
            "name": "channel",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage channels"
          }
        ]
      }
    },
    "/chats/channels/all-channels": {
      "get": {
        "summary": "List all channels",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "quickFilter",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "sortColumn",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": "ASC",
              "$ref": "#/components/schemas/ColumnSortOrder"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AllChannelsListEntry"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View channel info"
          }
        ]
      }
    },
    "/chats/channels/{channel}": {
      "get": {
        "summary": "Get channel",
        "parameters": [
          {
            "name": "channel",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/M2ChannelRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View channel info"
          }
        ]
      },
      "delete": {
        "summary": "Delete channel",
        "description": {
          "text": "Delete a channel. No one will be able to view this channel or its threads. This action cannot be undone."
        },
        "parameters": [
          {
            "name": "channel",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage channels"
          }
        ]
      }
    },
    "/chats/channels/{channel}/archive": {
      "delete": {
        "summary": "Archive channel",
        "description": {
          "text": "Archive a channel and reject new messages being added. It is still possible to view messages from an archived channel. It is possible to restore the channel later."
        },
        "parameters": [
          {
            "name": "channel",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage channels"
          }
        ]
      }
    },
    "/chats/channels/conversations": {
      "post": {
        "summary": "Create conversation",
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "profileIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "subject": {
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "profileIds"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/M2ChannelRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Start new conversations"
          }
        ]
      }
    },
    "/chats/channels/conversations/{channel}/convert": {
      "post": {
        "summary": "Convert conversation to private channel",
        "parameters": [
          {
            "name": "channel",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "channelName": {
                    "type": "string"
                  }
                },
                "required": [
                  "channelName"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/M2ChannelRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage channels"
          }
        ]
      }
    },
    "/chats/channels/conversations/{channel}/subject": {
      "patch": {
        "summary": "Change conversation subject",
        "parameters": [
          {
            "name": "channel",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "subject": {
                    "type": "string"
                  }
                },
                "required": [
                  "subject"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update channel info"
          }
        ]
      }
    },
    "/chats/channels/{channel}/administrator": {
      "get": {
        "summary": "Get channel administrator",
        "parameters": [
          {
            "name": "channel",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "$ref": "#/components/schemas/CPrincipal"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View channel participants"
          }
        ]
      },
      "patch": {
        "summary": "Assign channel administrator",
        "parameters": [
          {
            "name": "channel",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "profile": {
                    "$ref": "#/components/schemas/ProfileIdentifier"
                  }
                },
                "required": [
                  "profile"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage channels"
          }
        ]
      }
    },
    "/chats/channels/{channel}/attachments": {
      "get": {
        "summary": "List attachments in channel",
        "parameters": [
          {
            "name": "channel",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ChannelInfoAttachment"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View messages"
          }
        ]
      }
    },
    "/chats/channels/{channel}/attachments/files": {
      "get": {
        "summary": "List file attachments in channel",
        "parameters": [
          {
            "name": "channel",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ChannelInfoAttachment"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View messages"
          }
        ]
      }
    },
    "/chats/channels/{channel}/attachments/images": {
      "get": {
        "summary": "List images in channel",
        "parameters": [
          {
            "name": "channel",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ChannelInfoAttachment"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View messages"
          }
        ]
      }
    },
    "/chats/channels/{channel}/attachments/links": {
      "get": {
        "summary": "List links in channel",
        "parameters": [
          {
            "name": "channel",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ChannelInfoAttachment"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View messages"
          }
        ]
      }
    },
    "/chats/channels/{channel}/attachments/videos": {
      "get": {
        "summary": "List videos in channel",
        "parameters": [
          {
            "name": "channel",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ChannelInfoAttachment"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View messages"
          }
        ]
      }
    },
    "/chats/channels/{channel}/description": {
      "patch": {
        "summary": "Change channel description",
        "parameters": [
          {
            "name": "channel",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  }
                },
                "required": [
                  "description"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update channel info"
          }
        ]
      }
    },
    "/chats/channels/{channel}/icon": {
      "patch": {
        "summary": "Change channel icon",
        "parameters": [
          {
            "name": "channel",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "icon": {
                    "nullable": true,
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update channel info"
          }
        ]
      }
    },
    "/chats/channels/{channel}/name": {
      "patch": {
        "summary": "Rename channel",
        "parameters": [
          {
            "name": "channel",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage channels"
          }
        ]
      }
    },
    "/chats/channels/{channel}/subscribers/teams": {
      "post": {
        "summary": "Add teams to channel",
        "parameters": [
          {
            "name": "channel",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "teams": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TeamIdentifier"
                    }
                  }
                },
                "required": [
                  "teams"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Add members or teams to participant list"
          }
        ]
      },
      "get": {
        "summary": "List teams subscribed to channel",
        "parameters": [
          {
            "name": "channel",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TD_Team"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View channel participants"
          }
        ]
      },
      "delete": {
        "summary": "Remove teams from channel",
        "parameters": [
          {
            "name": "channel",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teams",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Remove members or teams from participant list"
          }
        ]
      }
    },
    "/chats/channels/{channel}/subscribers/users": {
      "post": {
        "summary": "Add users to channel",
        "parameters": [
          {
            "name": "channel",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "profiles": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ProfileIdentifier"
                    }
                  }
                },
                "required": [
                  "profiles"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Add members or teams to participant list"
          }
        ]
      },
      "get": {
        "summary": "List users subscribed to channel",
        "parameters": [
          {
            "name": "channel",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TD_MemberProfile"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View channel participants"
          }
        ]
      },
      "delete": {
        "summary": "Remove users from channel",
        "parameters": [
          {
            "name": "channel",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Remove members or teams from participant list"
          }
        ]
      }
    },
    "/chats/messages/delete-message": {
      "post": {
        "summary": "Delete message",
        "description": {
          "text": "Delete a message from a channel."
        },
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "channel": {
                    "$ref": "#/components/schemas/ChannelIdentifier"
                  },
                  "id": {
                    "$ref": "#/components/schemas/ChatMessageIdentifier"
                  }
                },
                "required": [
                  "channel",
                  "id"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Post messages"
          },
          {
            "title": "Post messages in threads"
          }
        ]
      }
    },
    "/chats/messages/edit-message": {
      "post": {
        "summary": "Edit message",
        "description": {
          "text": "Edit an existing message. Message content can be a string, or a block with one or several sections of information."
        },
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "channel": {
                    "$ref": "#/components/schemas/ChannelIdentifier"
                  },
                  "message": {
                    "$ref": "#/components/schemas/ChatMessageIdentifier"
                  },
                  "content": {
                    "$ref": "#/components/schemas/ChatMessage"
                  },
                  "attachments": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AttachmentIn"
                    }
                  },
                  "unfurlLinks": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "resolveNames": {
                    "nullable": true,
                    "type": "boolean"
                  }
                },
                "required": [
                  "channel",
                  "message",
                  "content"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Post messages"
          },
          {
            "title": "Post messages in threads"
          }
        ]
      }
    },
    "/chats/messages/send-message": {
      "post": {
        "summary": "Send message",
        "description": {
          "text": "Send a message to a channel, thread, member, issue, code review, etc. Message content can be a string, or a block with one or several sections of information."
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "recipient": {
                    "nullable": true,
                    "$ref": "#/components/schemas/MessageRecipient"
                  },
                  "content": {
                    "$ref": "#/components/schemas/ChatMessage"
                  },
                  "attachments": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AttachmentIn"
                    }
                  },
                  "unfurlLinks": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "externalId": {
                    "nullable": true,
                    "type": "string"
                  },
                  "resolveNames": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "pending": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "channel": {
                    "nullable": true,
                    "$ref": "#/components/schemas/ChannelIdentifier"
                  }
                },
                "required": [
                  "content"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelItemRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Post messages"
          },
          {
            "title": "Post messages in threads"
          }
        ]
      }
    },
    "/chats/messages": {
      "get": {
        "summary": "Get channel messages",
        "description": {
          "text": "Retrieve a batch of messages from a channel. Messages are divided into batches by providing `sorting`, `startFromDate` and `batchSize` parameters. If the retrieved number of messages is less than `batchSize`, there are currently no more messages to return. Return data also contains next value for `startFromDate` as well as the `orgLimitReached` flag indicating whether part of messages could not be retrieved because of organization plan limitation."
        },
        "parameters": [
          {
            "name": "channel",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MessagesSorting"
            }
          },
          {
            "name": "startFromDate",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "batchSize",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMessagesResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View messages"
          }
        ]
      }
    },
    "/chats/messages/{message}": {
      "get": {
        "summary": "Get message",
        "parameters": [
          {
            "name": "message",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelItemRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View messages"
          }
        ]
      }
    },
    "/chats/messages/pin": {
      "patch": {
        "summary": "Pin message",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "channel": {
                    "$ref": "#/components/schemas/ChannelIdentifier"
                  },
                  "message": {
                    "$ref": "#/components/schemas/ChatMessageIdentifier"
                  }
                },
                "required": [
                  "channel",
                  "message"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Pin or unpin messages"
          }
        ]
      }
    },
    "/chats/messages/unpin": {
      "patch": {
        "summary": "Unpin message",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "channel": {
                    "$ref": "#/components/schemas/ChannelIdentifier"
                  },
                  "message": {
                    "$ref": "#/components/schemas/ChatMessageIdentifier"
                  }
                },
                "required": [
                  "channel",
                  "message"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Pin or unpin messages"
          }
        ]
      }
    },
    "/chats/messages/pinned-messages": {
      "get": {
        "summary": "List pinned messages in channel",
        "parameters": [
          {
            "name": "channel",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ChannelItemRecord"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View messages"
          }
        ]
      }
    },
    "/custom-fields/extended-types": {
      "get": {
        "summary": "Get all extended types",
        "description": {
          "text": "Get all types that support custom fields"
        },
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "default": "Org",
              "$ref": "#/components/schemas/ExtendedTypeScopeType"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedType"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      }
    },
    "/custom-fields/{typeKey}/all-values": {
      "get": {
        "summary": "Get all values",
        "description": {
          "text": "Get all custom field values for a type. Optionally, extendedEntityIds can be used to get data for one or more entity IDs."
        },
        "parameters": [
          {
            "name": "typeKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "extendedEntityIds",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CustomFieldsRecord"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      }
    },
    "/custom-fields/{typeKey}/enum-values/{customFieldId}": {
      "post": {
        "summary": "Create enum value",
        "description": {
          "text": "Add new option to custom field of `Select from options` type. Options can only be added via this API call if custom field has the `Open-ended` flag set. Returns saved records."
        },
        "parameters": [
          {
            "name": "typeKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customFieldId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "valuesToAdd": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/EnumValueData"
                    }
                  },
                  "scope": {
                    "$ref": "#/components/schemas/ExtendedTypeScope"
                  }
                },
                "required": [
                  "valuesToAdd",
                  "scope"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumValueData"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      },
      "get": {
        "summary": "Get all enum values",
        "description": {
          "text": "Get a page of options for custom field of `Select from options` type with `Open-ended` flag set"
        },
        "parameters": [
          {
            "name": "typeKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customFieldId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "ordering",
            "in": "query",
            "required": false,
            "schema": {
              "default": "NAME_ASC",
              "$ref": "#/components/schemas/EnumValueOrdering"
            }
          },
          {
            "name": "countRecords",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "name": "addedByProfileId",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EnumValueData"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      }
    },
    "/custom-fields/{typeKey}/fields": {
      "post": {
        "summary": "Create field",
        "description": {
          "text": "Create custom field for a type"
        },
        "parameters": [
          {
            "name": "typeKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  },
                  "type": {
                    "$ref": "#/components/schemas/CFType"
                  },
                  "constraint": {
                    "nullable": true,
                    "$ref": "#/components/schemas/CFConstraint"
                  },
                  "required": {
                    "type": "boolean"
                  },
                  "private": {
                    "type": "boolean"
                  },
                  "access": {
                    "nullable": true,
                    "$ref": "#/components/schemas/AccessType"
                  },
                  "defaultValue": {
                    "$ref": "#/components/schemas/CFInputValue"
                  },
                  "openEnumValuesModification": {
                    "nullable": true,
                    "$ref": "#/components/schemas/CFEnumValuesModification"
                  },
                  "cfParameters": {
                    "nullable": true,
                    "$ref": "#/components/schemas/CFCreateParameters"
                  },
                  "scope": {
                    "$ref": "#/components/schemas/ExtendedTypeScope"
                  }
                },
                "required": [
                  "name",
                  "type",
                  "required",
                  "private",
                  "defaultValue",
                  "scope"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomField"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      },
      "get": {
        "summary": "Get all fields",
        "description": {
          "text": "Get custom fields for a type"
        },
        "parameters": [
          {
            "name": "typeKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withArchived",
            "in": "query",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomField"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      }
    },
    "/custom-fields/{typeKey}/fields/reorder": {
      "post": {
        "summary": "Reorder fields",
        "description": {
          "text": "Re-order custom fields. Pass IDs of the custom fields in the order you wish the custom fields to be."
        },
        "parameters": [
          {
            "name": "typeKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "customFieldOrder": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "scope": {
                    "$ref": "#/components/schemas/ExtendedTypeScope"
                  }
                },
                "required": [
                  "customFieldOrder",
                  "scope"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      }
    },
    "/custom-fields/{typeKey}/fields/{id}/archive": {
      "post": {
        "summary": "Archive field",
        "description": {
          "text": "Archive a custom field for a type"
        },
        "parameters": [
          {
            "name": "typeKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "scope": {
                    "$ref": "#/components/schemas/ExtendedTypeScope"
                  }
                },
                "required": [
                  "scope"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      }
    },
    "/custom-fields/{typeKey}/fields/{id}/restore": {
      "post": {
        "summary": "Restore field",
        "description": {
          "text": "Restore custom field for a type"
        },
        "parameters": [
          {
            "name": "typeKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "scope": {
                    "$ref": "#/components/schemas/ExtendedTypeScope"
                  }
                },
                "required": [
                  "scope"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      }
    },
    "/custom-fields/{typeKey}/fields/{id}": {
      "patch": {
        "summary": "Update field",
        "description": {
          "text": "Update custom field for a type. Optional parameters will be ignored when not specified and updated otherwise."
        },
        "parameters": [
          {
            "name": "typeKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "nullable": true,
                    "type": "string"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  },
                  "constraint": {
                    "nullable": true,
                    "$ref": "#/components/schemas/CFConstraint"
                  },
                  "required": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "private": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "access": {
                    "nullable": true,
                    "$ref": "#/components/schemas/AccessType"
                  },
                  "defaultValue": {
                    "nullable": true,
                    "$ref": "#/components/schemas/CFInputValue"
                  },
                  "enumValues": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/EnumValueData"
                    }
                  },
                  "openEnumValuesModification": {
                    "nullable": true,
                    "$ref": "#/components/schemas/CFEnumValuesModification"
                  },
                  "cfParameters": {
                    "nullable": true,
                    "$ref": "#/components/schemas/CFUpdateParameters"
                  },
                  "scope": {
                    "$ref": "#/components/schemas/ExtendedTypeScope"
                  }
                },
                "required": [
                  "scope"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      },
      "delete": {
        "summary": "Delete field",
        "description": {
          "text": "Remove custom field for a type"
        },
        "parameters": [
          {
            "name": "typeKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      }
    },
    "/custom-fields/{typeKey}/fields/{id}/filter-values": {
      "get": {
        "summary": "Get all filter values",
        "parameters": [
          {
            "name": "typeKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "calculateTotal",
            "in": "query",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CFValue"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      }
    },
    "/custom-fields/{typeKey}/{entityId}/values": {
      "get": {
        "summary": "Get value",
        "description": {
          "text": "Get custom field value for a type and entity ID"
        },
        "parameters": [
          {
            "name": "typeKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldsRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      },
      "patch": {
        "summary": "Update value",
        "description": {
          "text": "Update custom field value(s) for a type and entity ID"
        },
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "typeKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "values": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomFieldInputValue"
                    }
                  },
                  "scope": {
                    "$ref": "#/components/schemas/ExtendedTypeScope"
                  }
                },
                "required": [
                  "values",
                  "scope"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      }
    },
    "/custom-fields-v2/values/{entity}": {
      "post": {
        "summary": "Set values for entity",
        "parameters": [
          {
            "name": "entity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "customFieldValues": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomFieldValueUpdate"
                    }
                  }
                },
                "required": [
                  "customFieldValues"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "get": {
        "summary": "Get all values for entity",
        "parameters": [
          {
            "name": "entity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomFieldValueData"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/custom-fields-v2/values/{entity}/{customField}": {
      "post": {
        "summary": "Set single value",
        "parameters": [
          {
            "name": "entity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customField",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "newValue": {
                    "$ref": "#/components/schemas/CFInputValue"
                  }
                },
                "required": [
                  "newValue"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "get": {
        "summary": "Get single value",
        "parameters": [
          {
            "name": "entity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customField",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldValueData"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/custom-fields-v2/{entityType}/fields": {
      "post": {
        "summary": "Create custom field",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "type": {
                    "$ref": "#/components/schemas/CustomFieldType"
                  },
                  "multivalued": {
                    "default": false,
                    "type": "boolean"
                  },
                  "parameters": {
                    "nullable": true,
                    "$ref": "#/components/schemas/CFCreateParameters"
                  },
                  "required": {
                    "default": false,
                    "type": "boolean"
                  },
                  "defaultValue": {
                    "nullable": true,
                    "$ref": "#/components/schemas/CFInputValue"
                  },
                  "constraint": {
                    "nullable": true,
                    "$ref": "#/components/schemas/CFConstraint"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  },
                  "order": {
                    "nullable": true,
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldData"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "get": {
        "summary": "Get custom fields",
        "description": {
          "text": "Get all configured custom fields for an entity type"
        },
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withArchived",
            "in": "query",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomFieldData"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/custom-fields-v2/{entityType}/fields/reorder": {
      "post": {
        "summary": "Reorder custom fields",
        "description": {
          "text": "Re-order custom fields. Pass identifiers of the custom fields in the order you wish the custom fields to be."
        },
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "customFields": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CFIdentifier"
                    }
                  }
                },
                "required": [
                  "customFields"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/custom-fields-v2/{entityType}/fields/{customField}/archive": {
      "post": {
        "summary": "Archive custom field",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customField",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/custom-fields-v2/{entityType}/fields/{customField}/restore": {
      "post": {
        "summary": "Restore custom field",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customField",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/custom-fields-v2/{entityType}/fields/{customField}": {
      "get": {
        "summary": "Get single custom field",
        "description": {
          "text": "Get configured custom field"
        },
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customField",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldData"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "patch": {
        "summary": "Update custom field",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customField",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "nullable": true,
                    "type": "string"
                  },
                  "parameters": {
                    "nullable": true,
                    "$ref": "#/components/schemas/CFUpdateParameters"
                  },
                  "required": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "defaultValue": {
                    "nullable": true,
                    "$ref": "#/components/schemas/CFInputValue"
                  },
                  "constraint": {
                    "nullable": true,
                    "$ref": "#/components/schemas/CFConstraint"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "delete": {
        "summary": "Delete custom field",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customField",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/custom-fields-v2/{entityType}/fields/{customField}/enum-values": {
      "post": {
        "summary": "Create enum value",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customField",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "enumValueToAdd": {
                    "type": "string"
                  }
                },
                "required": [
                  "enumValueToAdd"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CFEnumValue"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "get": {
        "summary": "Get enum values",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customField",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "ordering",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": "NAME_ASC",
              "$ref": "#/components/schemas/EnumValueOrdering"
            }
          },
          {
            "name": "addedByProfileId",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CFEnumValue"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "patch": {
        "summary": "Update enum value",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customField",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "enumValueToUpdate": {
                    "$ref": "#/components/schemas/CFEnumValueIdentifier"
                  },
                  "newName": {
                    "type": "string"
                  }
                },
                "required": [
                  "enumValueToUpdate",
                  "newName"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/custom-fields-v2/{entityType}/fields/{customField}/enum-values/bulk-update": {
      "post": {
        "summary": "Bulk update enum values",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customField",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "enumValueModifications": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CFEnumValueModification"
                    }
                  }
                },
                "required": [
                  "enumValueModifications"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/custom-fields-v2/{entityType}/fields/{customField}/enum-values/{enumValueToRemove}": {
      "delete": {
        "summary": "Delete enum value",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customField",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enumValueToRemove",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/emojis/add": {
      "post": {
        "summary": "Add emoji",
        "description": {
          "text": "Add custom emoji"
        },
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "emoji": {
                    "type": "string"
                  },
                  "attachmentId": {
                    "type": "string"
                  }
                },
                "required": [
                  "emoji",
                  "attachmentId"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/emojis/delete": {
      "post": {
        "summary": "Delete emoji",
        "description": {
          "text": "Delete an emoji by name"
        },
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "emoji": {
                    "type": "string"
                  }
                },
                "required": [
                  "emoji"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/emojis/record-usage": {
      "post": {
        "summary": "Record emojis usage",
        "description": {
          "text": "Record emojis usage and update frequently used list"
        },
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "emojis": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "emojis"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/emojis/exists": {
      "get": {
        "summary": "Check if emoji exists",
        "description": {
          "text": "Check whether a given emoji name exists"
        },
        "parameters": [
          {
            "name": "emoji",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/emojis/frequently-used": {
      "get": {
        "summary": "Get frequently used emojis",
        "description": {
          "text": "List frequently used emojis"
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/emojis/search": {
      "get": {
        "summary": "Search emoji",
        "description": {
          "text": "Search for emoji"
        },
        "parameters": [
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EmojiSearchMatchData"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/external-link-patterns": {
      "post": {
        "summary": "Create external link pattern",
        "description": {
          "text": "Add a prefix to be expanded to external links",
          "helpTopic": "external-links.html"
        },
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pattern": {
                    "type": "string"
                  },
                  "linkReplacement": {
                    "type": "string"
                  }
                },
                "required": [
                  "pattern",
                  "linkReplacement"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage external entity link patterns"
          }
        ]
      },
      "get": {
        "summary": "Get all external link patterns",
        "description": {
          "text": "List all prefixes to be automatically expanded to external links",
          "helpTopic": "external-links.html"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalLinkPattern"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View external entity link patterns"
          }
        ]
      },
      "delete": {
        "summary": "Delete external link pattern",
        "description": {
          "text": "Delete prefix for expanding to external links",
          "helpTopic": "external-links.html"
        },
        "parameters": [
          {
            "name": "pattern",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage external entity link patterns"
          }
        ]
      }
    },
    "/http-api-model": {
      "get": {
        "summary": "Get HTTP API model",
        "description": {
          "text": "Get the HTTP API model that describes the available HTTP APIs"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HA_Model"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": []
      }
    },
    "/notifications": {
      "get": {
        "summary": "Get all notifications",
        "description": {
          "text": "List all subscription subjects"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventSubjectInfoDTO"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/notifications/channel-subscriptions": {
      "post": {
        "summary": "Create channel subscription",
        "description": {
          "text": "Add subscription for a channel"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "channel": {
                    "$ref": "#/components/schemas/ChatChannel"
                  },
                  "name": {
                    "type": "string"
                  },
                  "subscription": {
                    "$ref": "#/components/schemas/CustomGenericSubscriptionIn"
                  }
                },
                "required": [
                  "channel",
                  "name",
                  "subscription"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionDTO"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update channel subscriptions"
          }
        ]
      },
      "get": {
        "summary": "Get all channel subscriptions",
        "description": {
          "text": "List subscriptions for a channel"
        },
        "parameters": [
          {
            "name": "channel",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionDTO"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View channel info"
          }
        ]
      }
    },
    "/notifications/channel-subscriptions/{id}/request-missing-rights": {
      "post": {
        "summary": "Request Missing Rights",
        "description": {
          "text": "Ensures that all permissions required for this subscription are requested in the corresponding permission role"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update channel subscriptions"
          }
        ]
      }
    },
    "/notifications/channel-subscriptions/{id}": {
      "patch": {
        "summary": "Update channel subscription",
        "description": {
          "text": "Update subscription for a channel"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "nullable": true,
                    "type": "string"
                  },
                  "enabled": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "subscription": {
                    "nullable": true,
                    "$ref": "#/components/schemas/CustomGenericSubscriptionIn"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionDTO"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update channel subscriptions"
          }
        ]
      },
      "delete": {
        "summary": "Delete channel subscription",
        "description": {
          "text": "Delete channel subscription"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update channel subscriptions"
          }
        ]
      }
    },
    "/notifications/personal-custom-subscriptions": {
      "post": {
        "summary": "Create personal custom subscription",
        "description": {
          "text": "Create personal custom subscription"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "profile": {
                    "$ref": "#/components/schemas/ProfileIdentifier"
                  },
                  "name": {
                    "type": "string"
                  },
                  "feed": {
                    "type": "string"
                  },
                  "subscription": {
                    "$ref": "#/components/schemas/CustomGenericSubscriptionIn"
                  }
                },
                "required": [
                  "profile",
                  "name",
                  "feed",
                  "subscription"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionDTO"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update notification settings"
          }
        ]
      },
      "get": {
        "summary": "Get all personal custom subscriptions",
        "description": {
          "text": "List personal custom subscriptions"
        },
        "parameters": [
          {
            "name": "profile",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionDTO"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View notification settings"
          }
        ]
      }
    },
    "/notifications/personal-custom-subscriptions/{id}": {
      "patch": {
        "summary": "Update personal custom subscription",
        "description": {
          "text": "Create personal custom subscription"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "nullable": true,
                    "type": "string"
                  },
                  "enabled": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "feed": {
                    "nullable": true,
                    "type": "string"
                  },
                  "subscription": {
                    "nullable": true,
                    "$ref": "#/components/schemas/CustomGenericSubscriptionIn"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionDTO"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update notification settings"
          }
        ]
      },
      "delete": {
        "summary": "Delete personal custom subscription",
        "description": {
          "text": "Delete personal custom subscription"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update notification settings"
          }
        ]
      }
    },
    "/notifications/personal-subscriptions/update-personal-subscription-subject": {
      "post": {
        "summary": "Update personal subscription subject",
        "description": {
          "text": "Update personal subscription settings for a member"
        },
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "profile": {
                    "$ref": "#/components/schemas/ProfileIdentifier"
                  },
                  "subjectCode": {
                    "type": "string"
                  },
                  "feed": {
                    "type": "string"
                  },
                  "enabled": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "profile",
                  "subjectCode",
                  "feed",
                  "enabled"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View notification settings"
          }
        ]
      }
    },
    "/notifications/personal-subscriptions/update-personal-subscription-target": {
      "post": {
        "summary": "Update personal subscription target",
        "description": {
          "text": "Update personal subscription settings for a member"
        },
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "profile": {
                    "$ref": "#/components/schemas/ProfileIdentifier"
                  },
                  "targetCode": {
                    "type": "string"
                  },
                  "feed": {
                    "type": "string"
                  },
                  "eventCodes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "profile",
                  "targetCode",
                  "feed",
                  "eventCodes"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View notification settings"
          }
        ]
      }
    },
    "/notifications/personal-subscriptions/all-personal-subscription-targets": {
      "get": {
        "summary": "All personal subscription targets",
        "description": {
          "text": "List all personal subscription targets"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PersonalSubscriptionTarget"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/notifications/personal-subscriptions/personal-subscription-settings": {
      "get": {
        "summary": "Get personal subscription settings",
        "description": {
          "text": "Get personal subscription settings for a member"
        },
        "parameters": [
          {
            "name": "profile",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "feed",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalSubscriptionSettings"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View notification settings"
          }
        ]
      }
    },
    "/notifications/private-feeds": {
      "post": {
        "summary": "Create private feed",
        "description": {
          "text": "Create personal feed for member"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "profile": {
                    "$ref": "#/components/schemas/ProfileIdentifier"
                  },
                  "name": {
                    "type": "string"
                  },
                  "icon": {
                    "type": "string"
                  },
                  "color": {
                    "$ref": "#/components/schemas/PrivateFeedColor"
                  }
                },
                "required": [
                  "profile",
                  "name",
                  "icon",
                  "color"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateFeed"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update notification settings"
          }
        ]
      },
      "get": {
        "summary": "Get all private feeds",
        "description": {
          "text": "List personal feeds for a member"
        },
        "parameters": [
          {
            "name": "profile",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrivateFeed"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View notification settings"
          }
        ]
      }
    },
    "/notifications/private-feeds/{id}": {
      "patch": {
        "summary": "Update private feed",
        "description": {
          "text": "Update personal feed for a member"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "nullable": true,
                    "type": "string"
                  },
                  "icon": {
                    "nullable": true,
                    "type": "string"
                  },
                  "color": {
                    "nullable": true,
                    "$ref": "#/components/schemas/PrivateFeedColor"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateFeed"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update notification settings"
          }
        ]
      },
      "delete": {
        "summary": "Delete private feed",
        "description": {
          "text": "Delete personal feed for member"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update notification settings"
          }
        ]
      }
    },
    "/organization": {
      "get": {
        "summary": "Get organization",
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "patch": {
        "summary": "Update organization",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "orgData": {
                    "$ref": "#/components/schemas/OrganizationForUpdateDTO"
                  }
                },
                "required": [
                  "orgData"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/organization/domains": {
      "get": {
        "summary": "Get all domains",
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrgDomainDTO"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "patch": {
        "summary": "Update organization domain",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "domain": {
                    "type": "string"
                  }
                },
                "required": [
                  "domain"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/organization/domains/check": {
      "get": {
        "summary": "Check domain availability",
        "parameters": [
          {
            "name": "domain",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CDomainStatus"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/organization/jet-sales/url": {
      "get": {
        "summary": "Check domain availability",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/permission-roles/create": {
      "post": {
        "summary": "Create role",
        "description": {
          "text": "Create new custom permission role in specified permission context"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contextIdentifier": {
                    "$ref": "#/components/schemas/PermissionContextIdentifier"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "contextIdentifier",
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDTO"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Grant permissions to other members"
          },
          {
            "title": "Manage project permission scheme"
          },
          {
            "title": "Manage channels"
          }
        ]
      }
    },
    "/permission-roles/get": {
      "post": {
        "summary": "Get roles",
        "description": {
          "text": "List all permission roles in permission context"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contextIdentifier": {
                    "$ref": "#/components/schemas/PermissionContextIdentifier"
                  }
                },
                "required": [
                  "contextIdentifier"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleDTO"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Grant permissions to other members"
          },
          {
            "title": "View project details"
          },
          {
            "title": "View channel info"
          }
        ]
      }
    },
    "/permission-roles/{roleId}/reset-role-permissions-to-default": {
      "post": {
        "summary": "Reset role permissions to default",
        "description": {
          "text": "Reset permissions for the role to the standard ones. Only applicable to roles with PermissionRoleType = PREDEFINED, not applicable to custom roles."
        },
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Grant permissions to other members"
          },
          {
            "title": "Manage project permission scheme"
          },
          {
            "title": "Manage channels"
          }
        ]
      }
    },
    "/permission-roles/{roleId}": {
      "patch": {
        "summary": "Update role",
        "description": {
          "text": "Update custom permission role name"
        },
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Grant permissions to other members"
          },
          {
            "title": "Manage project permission scheme"
          },
          {
            "title": "Manage channels"
          }
        ]
      },
      "delete": {
        "summary": "Delete role",
        "description": {
          "text": "Delete custom permission role"
        },
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Grant permissions to other members"
          },
          {
            "title": "Manage project permission scheme"
          },
          {
            "title": "Manage channels"
          }
        ]
      }
    },
    "/permission-roles/{roleId}/permissions": {
      "post": {
        "summary": "Grant role permissions",
        "description": {
          "text": "Grant permissions to the specified role. You can get the list of all permissions applicable to the role using \"Get all\" method."
        },
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "rightCodes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "rightCodes"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Grant permissions to other members"
          },
          {
            "title": "Manage project permission scheme"
          },
          {
            "title": "Manage channels"
          }
        ]
      },
      "get": {
        "summary": "Get role permissions",
        "description": {
          "text": "Get role permissions"
        },
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RightDTO"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Grant permissions to other members"
          },
          {
            "title": "View project details"
          },
          {
            "title": "View channel info"
          }
        ]
      },
      "delete": {
        "summary": "Revoke role permissions",
        "description": {
          "text": "Revoke permissions from the specified role."
        },
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rightCodes",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Grant permissions to other members"
          },
          {
            "title": "Manage project permission scheme"
          },
          {
            "title": "Manage channels"
          }
        ]
      }
    },
    "/permission-roles/{roleId}/profiles/{profile}": {
      "post": {
        "summary": "Add role member",
        "description": {
          "text": "Assign permission role to the profile"
        },
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Grant permissions to other members"
          },
          {
            "title": "Manage project permission scheme"
          },
          {
            "title": "Manage channels"
          }
        ]
      },
      "delete": {
        "summary": "Remove role member",
        "description": {
          "text": "Remove permission role from the profile"
        },
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Grant permissions to other members"
          },
          {
            "title": "Manage project permission scheme"
          },
          {
            "title": "Manage channels"
          }
        ]
      }
    },
    "/permission-roles/{roleId}/profiles": {
      "get": {
        "summary": "Get role members",
        "description": {
          "text": "Get list of profiles with the specified role"
        },
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TD_MemberProfile"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Grant permissions to other members"
          },
          {
            "title": "View project details"
          },
          {
            "title": "View channel info"
          }
        ]
      }
    },
    "/permission-roles/{roleId}/teams/{team}": {
      "post": {
        "summary": "Add role team",
        "description": {
          "text": "Assign permission role to the team"
        },
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Grant permissions to other members"
          },
          {
            "title": "Manage project permission scheme"
          },
          {
            "title": "Manage channels"
          }
        ]
      },
      "delete": {
        "summary": "Remove role team",
        "description": {
          "text": "Remove permission role from the team"
        },
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Grant permissions to other members"
          },
          {
            "title": "Manage project permission scheme"
          },
          {
            "title": "Manage channels"
          }
        ]
      }
    },
    "/permission-roles/{roleId}/teams": {
      "get": {
        "summary": "Get role teams",
        "description": {
          "text": "Get list of teams with the specified role"
        },
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TD_Team"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Grant permissions to other members"
          },
          {
            "title": "View project details"
          },
          {
            "title": "View channel info"
          }
        ]
      }
    },
    "/permissions/check-permission": {
      "post": {
        "summary": "Check permission",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "principal": {
                    "$ref": "#/components/schemas/PrincipalIn"
                  },
                  "uniqueRightCode": {
                    "type": "string"
                  },
                  "target": {
                    "$ref": "#/components/schemas/PermissionTarget"
                  }
                },
                "required": [
                  "principal",
                  "uniqueRightCode",
                  "target"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/permissions": {
      "get": {
        "summary": "Get all permissions",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_RightsWithHierarchy"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects": {
      "post": {
        "summary": "Create project",
        "description": {
          "text": "Create a new project"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "$ref": "#/components/schemas/ProjectKey"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  },
                  "private": {
                    "default": false,
                    "type": "boolean"
                  },
                  "tags": {
                    "default": [],
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "key",
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PR_Project"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Create projects"
          }
        ]
      },
      "get": {
        "summary": "Get all projects",
        "description": {
          "text": "Get/search all projects. Parameters are applied as 'AND' filters."
        },
        "parameters": [
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "term",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "starred",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PR_Project"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/collaborator:{profile}": {
      "get": {
        "summary": "Get all projects by collaborator",
        "description": {
          "text": "Get all projects in which given user is a collaborator"
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PR_Project"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/member:{member}": {
      "get": {
        "summary": "Get all projects by member",
        "description": {
          "text": "Get all projects for a member"
        },
        "parameters": [
          {
            "name": "member",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PR_Project"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/right-code:{rightCode}": {
      "get": {
        "summary": "Get all projects with right",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "rightCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "term",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "path",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "starred",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PR_Project"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/right-unique-code:{right}": {
      "get": {
        "summary": "Get all projects with right code",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "right",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "term",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "path",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "starred",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PR_Project"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/team:{team}": {
      "get": {
        "summary": "Get all projects by team",
        "description": {
          "text": "Get all projects for a team"
        },
        "parameters": [
          {
            "name": "team",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PR_Project"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}": {
      "get": {
        "summary": "Get project",
        "description": {
          "text": "Get project by ID or project key"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PR_Project"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "patch": {
        "summary": "Update project",
        "description": {
          "text": "Update an existing project. Optional parameters will be ignored when not specified and updated otherwise."
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "nullable": true,
                    "$ref": "#/components/schemas/ProjectKey"
                  },
                  "name": {
                    "nullable": true,
                    "type": "string"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  },
                  "private": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "tags": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "icon": {
                    "nullable": true,
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PR_Project"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "delete": {
        "summary": "Delete project",
        "description": {
          "text": "Delete a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage project permission scheme"
          }
        ]
      }
    },
    "/projects/automation/dsl-evaluations/config": {
      "get": {
        "summary": "Get DSL evaluation configuration",
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DslEvaluationConfig"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/automation/graph-executions/{id}/stop": {
      "post": {
        "summary": "Stop execution",
        "description": {
          "text": "Stop execution by ExecutionId"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Stop automation jobs"
          }
        ]
      }
    },
    "/projects/automation/graph-executions/{id}": {
      "get": {
        "summary": "Get graph execution",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "$ref": "#/components/schemas/JobExecutionDTO"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View automation jobs"
          }
        ]
      }
    },
    "/projects/automation/job-executions/current": {
      "get": {
        "summary": "Get current",
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobExecutionDTO"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View automation jobs"
          }
        ]
      }
    },
    "/projects/automation/jobs/{jobId}": {
      "get": {
        "summary": "Get job",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "$ref": "#/components/schemas/JobDTO"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View automation jobs"
          }
        ]
      }
    },
    "/projects/automation/step-executions/used-parameters/param/{parameterId}": {
      "get": {
        "summary": "Get param",
        "parameters": [
          {
            "name": "parameterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParameterLastUsageDTO"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/automation/step-executions/used-parameters/secret/{secretId}": {
      "get": {
        "summary": "Get secret",
        "parameters": [
          {
            "name": "secretId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParameterLastUsageDTO"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/automation/step-executions/{stepExecId}/parameters/{key}": {
      "get": {
        "summary": "Get parameter",
        "parameters": [
          {
            "name": "stepExecId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "patch": {
        "summary": "Update parameter",
        "parameters": [
          {
            "name": "stepExecId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string"
                  }
                },
                "required": [
                  "value"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "delete": {
        "summary": "Delete parameter",
        "parameters": [
          {
            "name": "stepExecId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/params/{id}": {
      "patch": {
        "summary": "Update param",
        "description": {
          "text": "Update an existing project parameter"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "value"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Modify project parameters"
          }
        ]
      },
      "delete": {
        "summary": "Delete param",
        "description": {
          "text": "Delete an existing project parameter"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Delete project parameters"
          }
        ]
      }
    },
    "/projects/params/default-bundle": {
      "post": {
        "summary": "Create default bundle",
        "description": {
          "text": "Create a new project parameter in the default parameter bundle"
        },
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "project": {
                    "$ref": "#/components/schemas/ProjectIdentifier"
                  },
                  "key": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "project",
                  "key",
                  "value"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Modify project parameters"
          }
        ]
      },
      "get": {
        "summary": "Get all default bundle",
        "description": {
          "text": "List project parameters in a parameter bundle"
        },
        "parameters": [
          {
            "name": "project",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PlainParameterRecord"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View project parameters"
          }
        ]
      }
    },
    "/projects/params/in-default-bundle": {
      "post": {
        "summary": "Create in default bundle",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "projectId": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "required": [
                  "projectId",
                  "key",
                  "value"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true,
        "x-rights": [
          {
            "title": "Modify project parameters"
          }
        ]
      },
      "get": {
        "summary": "Get all in default bundle",
        "description": {
          "text": "List project parameters in a parameter bundle"
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PlainParameterRecord"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true,
        "x-rights": [
          {
            "title": "View project parameters"
          }
        ]
      }
    },
    "/projects/planning/boards/{board}": {
      "get": {
        "summary": "Get board",
        "description": {
          "text": "Get a board by identifier"
        },
        "parameters": [
          {
            "name": "board",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View boards",
            "description": "View issue boards"
          }
        ]
      },
      "patch": {
        "summary": "Update board",
        "description": {
          "text": "Update an existing board. This operation can be performed by board owners or other members who are granted permission to manage boards in a project."
        },
        "parameters": [
          {
            "name": "board",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "nullable": true,
                    "type": "string"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  },
                  "swimlaneKey": {
                    "nullable": true,
                    "type": "string"
                  },
                  "columns": {
                    "nullable": true,
                    "$ref": "#/components/schemas/BoardColumns"
                  },
                  "issueFields": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/BoardIssueInputField"
                    }
                  },
                  "memberOwners": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "teamOwners": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage boards",
            "description": "Update issue board settings and delete issue boards"
          }
        ]
      },
      "delete": {
        "summary": "Delete board",
        "description": {
          "text": "Delete an existing board. This operation can be performed by board owners or other members who are granted permission to manage boards in a project."
        },
        "parameters": [
          {
            "name": "board",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage boards",
            "description": "Update issue board settings and delete issue boards"
          }
        ]
      }
    },
    "/projects/planning/boards/sprints": {
      "post": {
        "summary": "Create sprint",
        "description": {
          "text": "Create a new sprint in a board. This operation can be performed by board owners or other members who are granted permission to manage boards in a project."
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "board": {
                    "$ref": "#/components/schemas/BoardIdentifier"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  },
                  "from": {
                    "type": "string",
                    "format": "full-date"
                  },
                  "to": {
                    "type": "string",
                    "format": "full-date"
                  },
                  "launch": {
                    "$ref": "#/components/schemas/SprintLaunch"
                  }
                },
                "required": [
                  "board",
                  "name",
                  "from",
                  "to"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SprintRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage boards",
            "description": "Update issue board settings and delete issue boards"
          }
        ]
      }
    },
    "/projects/planning/boards/sprints/{sprint}/launch": {
      "post": {
        "summary": "Launch planned sprint",
        "description": {
          "text": "Launch a planned sprint. This operation can be performed by board owners or other members who are granted permission to manage boards in a project."
        },
        "parameters": [
          {
            "name": "sprint",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "moveUnresolvedIssuesFromCurrentSprint": {
                    "type": "boolean"
                  },
                  "notifySubscribers": {
                    "default": true,
                    "type": "boolean"
                  }
                },
                "required": [
                  "moveUnresolvedIssuesFromCurrentSprint"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage boards",
            "description": "Update issue board settings and delete issue boards"
          }
        ]
      }
    },
    "/projects/planning/boards/sprints/{sprint}": {
      "patch": {
        "summary": "Update sprint",
        "description": {
          "text": "Update an existing sprint in a board. This operation can be performed by board owners or other members who are granted permission to manage boards in a project."
        },
        "parameters": [
          {
            "name": "sprint",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "nullable": true,
                    "type": "string"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  },
                  "from": {
                    "nullable": true,
                    "type": "string",
                    "format": "full-date"
                  },
                  "to": {
                    "nullable": true,
                    "type": "string",
                    "format": "full-date"
                  },
                  "launch": {
                    "nullable": true,
                    "$ref": "#/components/schemas/SprintLaunch"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage boards",
            "description": "Update issue board settings and delete issue boards"
          }
        ]
      }
    },
    "/projects/planning/boards/sprints/{sprint}/archive": {
      "delete": {
        "summary": "Archive sprint",
        "description": {
          "text": "Archive closed or planned sprint. This operation can be performed by board owners or other members who are granted permission to manage boards in a project."
        },
        "parameters": [
          {
            "name": "sprint",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage boards",
            "description": "Update issue board settings and delete issue boards"
          }
        ]
      }
    },
    "/projects/planning/boards/sprints/{sprint}/issues/{issue}": {
      "post": {
        "summary": "Add issue to sprint",
        "description": {
          "text": "Add an existing issue in a project to a sprint"
        },
        "parameters": [
          {
            "name": "issue",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sprint",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage issue assignment",
            "description": "Add issues to and remove issues from issue boards"
          }
        ]
      },
      "delete": {
        "summary": "Remove issue from sprint",
        "description": {
          "text": "Remove an existing issue in a project from a sprint."
        },
        "parameters": [
          {
            "name": "issue",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sprint",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage issue assignment",
            "description": "Add issues to and remove issues from issue boards"
          }
        ]
      }
    },
    "/projects/planning/boards/sprints/{sprint}/issues": {
      "get": {
        "summary": "Get all issues in sprint",
        "description": {
          "text": "Fetch issues from an existing non-archived sprint"
        },
        "parameters": [
          {
            "name": "sprint",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "unresolvedOnly",
            "in": "query",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Issue"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View boards",
            "description": "View issue boards"
          }
        ]
      }
    },
    "/projects/planning/boards/{board}/issues/{issue}": {
      "post": {
        "summary": "Add issue to board",
        "description": {
          "text": "Add an existing issue in a project to a board or its current sprint"
        },
        "parameters": [
          {
            "name": "issue",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "board",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage issue assignment",
            "description": "Add issues to and remove issues from issue boards"
          }
        ]
      },
      "delete": {
        "summary": "Remove issue from board",
        "description": {
          "text": "Remove an existing issue in a project from a board or all of its sprints"
        },
        "parameters": [
          {
            "name": "issue",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "board",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage issue assignment",
            "description": "Add issues to and remove issues from issue boards"
          }
        ]
      }
    },
    "/projects/planning/boards/{board}/issues": {
      "get": {
        "summary": "Get all issues on board",
        "description": {
          "text": "Fetch issues from the board across all its non-archived sprints"
        },
        "parameters": [
          {
            "name": "board",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Issue"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View boards",
            "description": "View issue boards"
          }
        ]
      }
    },
    "/projects/private-projects/{project}/request-access": {
      "post": {
        "summary": "Request access to project",
        "description": {
          "text": "Request access to a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/private-projects": {
      "get": {
        "summary": "Get all private projects",
        "description": {
          "text": "List private projects in the current organisation"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PR_PrivateProject"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/repositories/find": {
      "get": {
        "summary": "Get all find",
        "parameters": [
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "term",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RepositoryDetails"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/responsibilities": {
      "post": {
        "summary": "Add responsibility",
        "description": {
          "text": "Add a responsibility for a given subject ID"
        },
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "subjectId": {
                    "type": "string"
                  },
                  "summary": {
                    "type": "string"
                  },
                  "notes": {
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "subjectId",
                  "summary"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/responsibilities/{responsibilityId}": {
      "patch": {
        "summary": "Update responsibility",
        "description": {
          "text": "Edit an existing responsibility"
        },
        "parameters": [
          {
            "name": "responsibilityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "summary": {
                    "type": "string"
                  },
                  "notes": {
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "summary"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "delete": {
        "summary": "Delete responsibility",
        "description": {
          "text": "Delete an existing responsibility"
        },
        "parameters": [
          {
            "name": "responsibilityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/responsibilities/subjects/{subjectId}": {
      "delete": {
        "summary": "Delete responsibility subject",
        "description": {
          "text": "Delete an existing responsibility subject for a given project ID"
        },
        "parameters": [
          {
            "name": "subjectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/secrets/{id}": {
      "patch": {
        "summary": "Update secret",
        "description": {
          "text": "Update an existing project secret"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "valueBase64": {
                    "type": "string"
                  },
                  "publicKeyId": {
                    "nullable": true,
                    "type": "string"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "valueBase64"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update project secrets"
          }
        ]
      },
      "delete": {
        "summary": "Delete secret",
        "description": {
          "text": "Delete an existing project secret"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Delete project secrets"
          }
        ]
      }
    },
    "/projects/secrets/default-bundle": {
      "post": {
        "summary": "Create default bundle",
        "description": {
          "text": "Create a new secret in the default parameter bundle. Value is base64 encoded bytes of the secret value, possibly after client side encryption. If the secret value bytes are encrypted then the id of the Space public key must be provided"
        },
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "project": {
                    "$ref": "#/components/schemas/ProjectIdentifier"
                  },
                  "key": {
                    "type": "string"
                  },
                  "valueBase64": {
                    "type": "string"
                  },
                  "publicKeyId": {
                    "nullable": true,
                    "type": "string"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "project",
                  "key",
                  "valueBase64"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Create project secrets"
          }
        ]
      },
      "get": {
        "summary": "Get all default bundle",
        "description": {
          "text": "List project secrets in a parameter bundle"
        },
        "parameters": [
          {
            "name": "project",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SecretParameterRecord"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View keys of project secrets"
          }
        ]
      }
    },
    "/projects/secrets/in-default-bundle": {
      "post": {
        "summary": "Create in default bundle",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "projectId": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "valueBase64": {
                    "type": "string"
                  },
                  "publicKeyId": {
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "projectId",
                  "key",
                  "valueBase64"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true,
        "x-rights": [
          {
            "title": "Create project secrets"
          }
        ]
      },
      "get": {
        "summary": "Get all in default bundle",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SecretParameterRecord"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true,
        "x-rights": [
          {
            "title": "View keys of project secrets"
          }
        ]
      }
    },
    "/projects/tags/track-access": {
      "post": {
        "summary": "Track tag access",
        "description": {
          "text": "Track a tag has been accessed"
        },
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tag": {
                    "type": "string"
                  }
                },
                "required": [
                  "tag"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/tags": {
      "get": {
        "summary": "Get all tags",
        "description": {
          "text": "List all tags, mapped to the number of projects they are used in"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PR_Tag"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/vault": {
      "post": {
        "summary": "Create vault",
        "description": {
          "text": "Create a new Vault connection for the project. Vault's AppRole Secret Id must be provided as base64 encoded string"
        },
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "project": {
                    "$ref": "#/components/schemas/ProjectIdentifier"
                  },
                  "url": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "namespace": {
                    "nullable": true,
                    "type": "string"
                  },
                  "vaultNamespace": {
                    "nullable": true,
                    "type": "string"
                  },
                  "appRoleEndpointPath": {
                    "type": "string"
                  },
                  "appRoleId": {
                    "type": "string"
                  },
                  "appRoleSecretIdBase64": {
                    "type": "string"
                  }
                },
                "required": [
                  "project",
                  "url",
                  "name",
                  "appRoleEndpointPath",
                  "appRoleId",
                  "appRoleSecretIdBase64"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Modify Vault connections",
            "description": "Create or edit Vault connections"
          }
        ]
      },
      "get": {
        "summary": "Get vault",
        "description": {
          "text": "Get an existing Vault connections for project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VaultConnectionRecord"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View Vault connections",
            "description": "View Vault connections"
          }
        ]
      }
    },
    "/projects/vault/{id}": {
      "patch": {
        "summary": "Update vault",
        "description": {
          "text": "Update an existing Vault connection"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "namespace": {
                    "nullable": true,
                    "type": "string"
                  },
                  "vaultNamespace": {
                    "nullable": true,
                    "type": "string"
                  },
                  "appRoleEndpointPath": {
                    "type": "string"
                  },
                  "appRoleId": {
                    "type": "string"
                  },
                  "appRoleSecretIdBase64": {
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "url",
                  "name",
                  "appRoleEndpointPath",
                  "appRoleId"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Modify Vault connections",
            "description": "Create or edit Vault connections"
          }
        ]
      },
      "delete": {
        "summary": "Delete vault",
        "description": {
          "text": "Delete an existing Vault connection"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Delete Vault connections",
            "description": "Delete Vault connections"
          }
        ]
      }
    },
    "/projects/{project}/access/admins": {
      "get": {
        "summary": "Get all admins",
        "description": {
          "text": "Returns the list of all project administrators"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TD_MemberProfile"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/access/admins/profiles": {
      "post": {
        "summary": "Add administrator",
        "description": {
          "text": "Add a member as administrator to a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "profile": {
                    "$ref": "#/components/schemas/ProfileIdentifier"
                  }
                },
                "required": [
                  "profile"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/access/admins/profiles/{profile}": {
      "delete": {
        "summary": "Remove administrator",
        "description": {
          "text": "Remove a member as administrator from a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/access/admins/teams": {
      "post": {
        "summary": "Add Administrators team",
        "description": {
          "text": "Add a team as administrators to a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "teamId": {
                    "type": "string"
                  }
                },
                "required": [
                  "teamId"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/access/admins/teams/{teamId}": {
      "delete": {
        "summary": "Remove Administrators team",
        "description": {
          "text": "Remove a team as administrators from a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/access/collaborators": {
      "get": {
        "summary": "Get all collaborators' profiles",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TD_MemberProfile"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/access/collaborators/profiles": {
      "post": {
        "summary": "Add a collaborator",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "profile": {
                    "$ref": "#/components/schemas/ProfileIdentifier"
                  }
                },
                "required": [
                  "profile"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "get": {
        "summary": "Get all individual collaborators",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TD_MemberProfile"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "delete": {
        "summary": "Remove a collaborator",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profile",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/access/collaborators/teams": {
      "post": {
        "summary": "Add a collaborators' team",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "teamId": {
                    "type": "string"
                  }
                },
                "required": [
                  "teamId"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "get": {
        "summary": "Get all collaborators' teams",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TD_Team"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "delete": {
        "summary": "Remove a collaborators' team",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/access/member-profiles": {
      "get": {
        "summary": "Get all member profiles",
        "description": {
          "text": "Get project members for a given project key"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "name": "includingAdmins",
            "in": "query",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TD_MemberProfile"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View project details"
          }
        ]
      }
    },
    "/projects/{project}/access/members/profiles": {
      "post": {
        "summary": "Add member",
        "description": {
          "text": "Add a member to a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "profile": {
                    "$ref": "#/components/schemas/ProfileIdentifier"
                  }
                },
                "required": [
                  "profile"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/access/members/profiles/{profile}": {
      "delete": {
        "summary": "Remove member",
        "description": {
          "text": "Remove a member from a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/access/members/teams": {
      "post": {
        "summary": "Add team",
        "description": {
          "text": "Add a team to a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "teamId": {
                    "type": "string"
                  }
                },
                "required": [
                  "teamId"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/access/members/teams/{teamId}": {
      "delete": {
        "summary": "Remove team",
        "description": {
          "text": "Remove a team from a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/access/viewers": {
      "get": {
        "summary": "Organization profiles that can view the project",
        "description": {
          "text": "Get organization members who can view a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "term",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "meOnTop",
            "in": "query",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TD_MemberProfile"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/automation/deployment-targets": {
      "post": {
        "summary": "Create",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "repositories": {
                    "default": [],
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/DeployTargetRepositoryDTO"
                    }
                  }
                },
                "required": [
                  "key",
                  "name",
                  "description"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Modify deployment targets",
            "description": "Modify deployment targets in a project"
          }
        ]
      },
      "get": {
        "summary": "List",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/ColumnSortOrder"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DeployTargetDTO"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View deployments",
            "description": "View deployments in a project"
          }
        ]
      }
    },
    "/projects/{project}/automation/deployment-targets/favorites": {
      "get": {
        "summary": "List Favorites",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/ColumnSortOrder"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeployTargetRecord"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View deployments",
            "description": "View deployments in a project"
          }
        ]
      }
    },
    "/projects/{project}/automation/deployment-targets/{identifier}": {
      "get": {
        "summary": "Get",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeployTargetRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View deployments",
            "description": "View deployments in a project"
          }
        ]
      },
      "put": {
        "summary": "Update",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "repositories": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/DeployTargetRepositoryDTO"
                    }
                  },
                  "manualControl": {
                    "default": true,
                    "type": "boolean"
                  },
                  "hangTimeoutMinutes": {
                    "nullable": true,
                    "type": "integer",
                    "format": "int32"
                  },
                  "failTimeoutMinutes": {
                    "nullable": true,
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "required": [
                  "name",
                  "description",
                  "repositories"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "delete": {
        "summary": "Delete",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Modify deployment targets",
            "description": "Modify deployment targets in a project"
          }
        ]
      }
    },
    "/projects/{project}/automation/deployments/fail": {
      "post": {
        "summary": "Fail",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetIdentifier": {
                    "$ref": "#/components/schemas/TargetIdentifier"
                  }
                },
                "required": [
                  "targetIdentifier"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Modify deployments",
            "description": "Modify deployments in a project"
          }
        ]
      }
    },
    "/projects/{project}/automation/deployments/finish": {
      "post": {
        "summary": "Finish",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetIdentifier": {
                    "$ref": "#/components/schemas/TargetIdentifier"
                  },
                  "deploymentIdentifier": {
                    "nullable": true,
                    "$ref": "#/components/schemas/DeploymentIdentifier"
                  },
                  "version": {
                    "nullable": true,
                    "type": "string"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  },
                  "commitRefs": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/DeploymentCommitReference"
                    }
                  },
                  "externalLink": {
                    "nullable": true,
                    "$ref": "#/components/schemas/ExternalLink"
                  }
                },
                "required": [
                  "targetIdentifier"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Modify deployments",
            "description": "Modify deployments in a project"
          }
        ]
      }
    },
    "/projects/{project}/automation/deployments/schedule": {
      "post": {
        "summary": "Schedule",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetIdentifier": {
                    "$ref": "#/components/schemas/TargetIdentifier"
                  },
                  "version": {
                    "nullable": true,
                    "type": "string"
                  },
                  "scheduledStart": {
                    "nullable": true,
                    "type": "string",
                    "format": "date-time"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  },
                  "commitRefs": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/DeploymentCommitReference"
                    }
                  },
                  "externalLink": {
                    "nullable": true,
                    "$ref": "#/components/schemas/ExternalLink"
                  }
                },
                "required": [
                  "targetIdentifier"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Modify deployments",
            "description": "Modify deployments in a project"
          }
        ]
      }
    },
    "/projects/{project}/automation/deployments/start": {
      "post": {
        "summary": "Start",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetIdentifier": {
                    "$ref": "#/components/schemas/TargetIdentifier"
                  },
                  "deploymentIdentifier": {
                    "nullable": true,
                    "$ref": "#/components/schemas/DeploymentIdentifier"
                  },
                  "version": {
                    "nullable": true,
                    "type": "string"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  },
                  "commitRefs": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/DeploymentCommitReference"
                    }
                  },
                  "externalLink": {
                    "nullable": true,
                    "$ref": "#/components/schemas/ExternalLink"
                  },
                  "syncWithAutomationJob": {
                    "default": false,
                    "type": "boolean"
                  }
                },
                "required": [
                  "targetIdentifier"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Modify deployments",
            "description": "Modify deployments in a project"
          }
        ]
      }
    },
    "/projects/{project}/automation/deployments": {
      "get": {
        "summary": "List",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetIdentifier",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "jobExecutionId",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DeploymentRecord"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View deployments",
            "description": "View deployments in a project"
          }
        ]
      },
      "put": {
        "summary": "Update",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetIdentifier": {
                    "$ref": "#/components/schemas/TargetIdentifier"
                  },
                  "deploymentIdentifier": {
                    "$ref": "#/components/schemas/DeploymentIdentifier"
                  },
                  "version": {
                    "nullable": true,
                    "type": "string"
                  },
                  "scheduledStart": {
                    "nullable": true,
                    "type": "string",
                    "format": "date-time"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  },
                  "commitRefs": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/DeploymentCommitReference"
                    }
                  },
                  "externalLink": {
                    "nullable": true,
                    "$ref": "#/components/schemas/ExternalLink"
                  }
                },
                "required": [
                  "targetIdentifier",
                  "deploymentIdentifier"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Modify deployments",
            "description": "Modify deployments in a project"
          }
        ]
      }
    },
    "/projects/{project}/automation/deployments/{targetIdentifier}/{deploymentIdentifier}": {
      "get": {
        "summary": "Get",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deploymentIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View deployments",
            "description": "View deployments in a project"
          }
        ]
      },
      "delete": {
        "summary": "Delete",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deploymentIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Modify deployments",
            "description": "Modify deployments in a project"
          }
        ]
      }
    },
    "/projects/{project}/automation/graph-executions": {
      "get": {
        "summary": "Get all graph executions",
        "description": {
          "text": "Search executions. Parameters are applied as 'AND' filters."
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branchFilter",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "statusFilter",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/ExecutionStatus"
            }
          },
          {
            "name": "jobTriggerFilter",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/JobTriggerType"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/JobExecutionDTO"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View automation jobs"
          }
        ]
      }
    },
    "/projects/{project}/automation/jobs/{jobId}/start": {
      "post": {
        "summary": "Start job",
        "description": {
          "text": "Start job. Returns ExecutionId, see projects/automation/graph-executions/{id}."
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "branch": {
                    "$ref": "#/components/schemas/Branch"
                  },
                  "parameters": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/JobParameter"
                    }
                  }
                },
                "required": [
                  "branch"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LaunchResult"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Start automation jobs"
          }
        ]
      }
    },
    "/projects/{project}/automation/jobs": {
      "get": {
        "summary": "Get all jobs",
        "description": {
          "text": "List jobs. Parameters are applied as 'AND' filters."
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoFilter",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branchFilter",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "trigger",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/JobTriggerType"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/JobDTO"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View automation jobs"
          }
        ]
      }
    },
    "/projects/{project}/code-reviews/code-discussions": {
      "post": {
        "summary": "Create code discussion",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string"
                  },
                  "diffContext": {
                    "nullable": true,
                    "$ref": "#/components/schemas/DiffContext"
                  },
                  "repository": {
                    "type": "string"
                  },
                  "revision": {
                    "type": "string"
                  },
                  "filename": {
                    "nullable": true,
                    "type": "string"
                  },
                  "line": {
                    "nullable": true,
                    "type": "integer",
                    "format": "int32"
                  },
                  "oldLine": {
                    "nullable": true,
                    "type": "integer",
                    "format": "int32"
                  },
                  "pending": {
                    "default": false,
                    "type": "boolean"
                  },
                  "reviewId": {
                    "nullable": true,
                    "$ref": "#/components/schemas/ReviewIdentifier"
                  }
                },
                "required": [
                  "text",
                  "repository",
                  "revision"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CodeDiscussionRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Create suggested edit"
          }
        ]
      }
    },
    "/projects/{project}/code-reviews/commit-set-review": {
      "post": {
        "summary": "Create review based on commit set",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "repository": {
                    "type": "string"
                  },
                  "revisions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "title": {
                    "nullable": true,
                    "type": "string"
                  },
                  "authorProfileIds": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "repository",
                  "revisions"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommitSetReviewRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Create code reviews"
          }
        ]
      }
    },
    "/projects/{project}/code-reviews/merge-requests": {
      "post": {
        "summary": "Create merge request",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "repository": {
                    "type": "string"
                  },
                  "sourceBranch": {
                    "type": "string"
                  },
                  "targetBranch": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "reviewers": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ReviewerParam"
                    }
                  }
                },
                "required": [
                  "repository",
                  "sourceBranch",
                  "targetBranch",
                  "title"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequestRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Create code reviews"
          }
        ]
      }
    },
    "/projects/{project}/code-reviews": {
      "get": {
        "summary": "Get all code reviews",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": "Opened",
              "$ref": "#/components/schemas/CodeReviewStateFilter"
            }
          },
          {
            "name": "text",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "author",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "to",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "default": "CreatedAtAsc",
              "$ref": "#/components/schemas/ReviewSorting"
            }
          },
          {
            "name": "reviewer",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/ReviewType"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CodeReviewWithCount"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View code reviews"
          }
        ]
      }
    },
    "/projects/{project}/code-reviews/{reviewId}": {
      "get": {
        "summary": "Get code review",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reviewId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "$ref": "#/components/schemas/CodeReviewRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View code reviews"
          }
        ]
      }
    },
    "/projects/{project}/code-reviews/{reviewId}/details": {
      "get": {
        "summary": "Get review details",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reviewId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CodeReviewDetailedInfo"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View code reviews"
          }
        ]
      }
    },
    "/projects/{project}/code-reviews/{reviewId}/files": {
      "get": {
        "summary": "Get the modified files in code review",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reviewId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ChangeInReview"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View code reviews"
          }
        ]
      }
    },
    "/projects/{project}/code-reviews/{reviewId}/merge-files": {
      "get": {
        "summary": "Get the Merge Request files",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reviewId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/GitMergedFile"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View code reviews"
          }
        ]
      }
    },
    "/projects/{project}/code-reviews/{reviewId}/suggested-reviewers": {
      "get": {
        "summary": "Get suggested reviewers",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reviewId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TD_MemberProfile"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View code reviews"
          }
        ]
      }
    },
    "/projects/{project}/code-reviews/{reviewId}/unread-revisions": {
      "get": {
        "summary": "Get unread revisions",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reviewId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReviewCommitIn"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View code reviews"
          }
        ]
      }
    },
    "/projects/{project}/code-reviews/{reviewId}/state": {
      "patch": {
        "summary": "Edit review state",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reviewId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "state": {
                    "$ref": "#/components/schemas/CodeReviewState"
                  }
                },
                "required": [
                  "state"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Edit code reviews"
          }
        ]
      }
    },
    "/projects/{project}/code-reviews/{reviewId}/title": {
      "patch": {
        "summary": "Edit review title",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reviewId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  }
                },
                "required": [
                  "title"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Edit code reviews"
          }
        ]
      }
    },
    "/projects/{project}/code-reviews/{reviewId}/merge": {
      "put": {
        "summary": "Merge a merge request",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reviewId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "deleteSourceBranch": {
                    "type": "boolean"
                  },
                  "mergeMode": {
                    "$ref": "#/components/schemas/GitMergeMode"
                  }
                },
                "required": [
                  "deleteSourceBranch",
                  "mergeMode"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitMergeResultHttp"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View code reviews"
          },
          {
            "title": "Write Git repositories"
          }
        ]
      }
    },
    "/projects/{project}/code-reviews/{reviewId}/rebase": {
      "put": {
        "summary": "Rebase a merge request",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reviewId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "deleteSourceBranch": {
                    "type": "boolean"
                  },
                  "rebaseMode": {
                    "$ref": "#/components/schemas/GitRebaseMode"
                  },
                  "squash": {
                    "type": "boolean"
                  },
                  "squashedCommitMessage": {
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "deleteSourceBranch",
                  "rebaseMode",
                  "squash"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitRebaseResultHttp"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View code reviews"
          },
          {
            "title": "Write Git repositories"
          }
        ]
      }
    },
    "/projects/{project}/code-reviews/{reviewId}/participants/{user}": {
      "post": {
        "summary": "Add review participant",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reviewId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role": {
                    "$ref": "#/components/schemas/CodeReviewParticipantRole"
                  }
                },
                "required": [
                  "role"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Edit code reviews"
          }
        ]
      },
      "delete": {
        "summary": "Remove review participant",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reviewId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CodeReviewParticipantRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Edit code reviews"
          }
        ]
      }
    },
    "/projects/{project}/code-reviews/{reviewId}/revisions": {
      "post": {
        "summary": "Add revisions to review",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reviewId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "revisions": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ReviewCommitIn"
                    }
                  }
                },
                "required": [
                  "revisions"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Edit code reviews"
          }
        ]
      },
      "delete": {
        "summary": "Remove revisions from review",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reviewId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "revisions",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Edit code reviews"
          }
        ]
      }
    },
    "/projects/{project}/documents": {
      "post": {
        "summary": "Create document",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "folder": {
                    "$ref": "#/components/schemas/FolderIdentifier"
                  },
                  "bodyIn": {
                    "$ref": "#/components/schemas/DocumentBodyCreateIn"
                  },
                  "publicationDetailsIn": {
                    "nullable": true,
                    "$ref": "#/components/schemas/PublicationDetailsIn"
                  }
                },
                "required": [
                  "name",
                  "folder",
                  "bodyIn"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/documents/{documentId}": {
      "get": {
        "summary": "Get document",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "patch": {
        "summary": "Update document",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "nullable": true,
                    "type": "string"
                  },
                  "updateIn": {
                    "nullable": true,
                    "$ref": "#/components/schemas/DocumentBodyUpdateIn"
                  },
                  "publicationDetailsIn": {
                    "nullable": true,
                    "$ref": "#/components/schemas/PublicationDetailsIn"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "delete": {
        "summary": "Archive document",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/documents/folders": {
      "post": {
        "summary": "Create folder",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "parentFolder": {
                    "$ref": "#/components/schemas/FolderIdentifier"
                  }
                },
                "required": [
                  "name",
                  "parentFolder"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentFolder"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/documents/folders/{folder}": {
      "get": {
        "summary": "Get folder",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folder",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentFolder"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "patch": {
        "summary": "Rename folder",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folder",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "delete": {
        "summary": "Archive folder",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folder",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/documents/folders/{folder}/documents": {
      "get": {
        "summary": "List documents in folder",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folder",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withArchived",
            "in": "query",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/ColumnSortOrder"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Document"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/documents/folders/{folder}/introduction/{documentId}": {
      "patch": {
        "summary": "Add folder introduction",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folder",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/documents/folders/{folder}/introduction": {
      "delete": {
        "summary": "Remove folder introduction",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folder",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/documents/folders/{folder}/move": {
      "patch": {
        "summary": "Move folder",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folder",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parentFolder": {
                    "$ref": "#/components/schemas/FolderIdentifier"
                  }
                },
                "required": [
                  "parentFolder"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentFolder"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/documents/folders/{folder}/subfolders": {
      "get": {
        "summary": "List subfolders",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folder",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withArchived",
            "in": "query",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/ColumnSortOrder"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DocumentFolder"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/documents/{documentId}/copy": {
      "post": {
        "summary": "Copy document",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "folder": {
                    "$ref": "#/components/schemas/FolderIdentifier"
                  }
                },
                "required": [
                  "name",
                  "folder"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/documents/{documentId}/move": {
      "patch": {
        "summary": "Move document",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "folder": {
                    "$ref": "#/components/schemas/FolderIdentifier"
                  }
                },
                "required": [
                  "folder"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/documents/{documentId}/unarchive": {
      "patch": {
        "summary": "Unarchive document",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/packages/repositories": {
      "post": {
        "summary": "Create new repository",
        "description": {
          "text": "Creates a new package repository for a given project ID"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  },
                  "public": {
                    "default": false,
                    "type": "boolean"
                  },
                  "settings": {
                    "nullable": true,
                    "$ref": "#/components/schemas/ES_PackageRepositorySettings"
                  },
                  "mode": {
                    "default": "HOSTING",
                    "$ref": "#/components/schemas/PackageRepositoryMode"
                  },
                  "connection": {
                    "nullable": true,
                    "$ref": "#/components/schemas/PackageRepositoryConnection"
                  }
                },
                "required": [
                  "type",
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectPackageRepository"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Create package repositories"
          }
        ]
      },
      "get": {
        "summary": "Get repositories",
        "description": {
          "text": "Gets a list of package repositories for a given project ID"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectPackageRepository"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Read package repositories"
          }
        ]
      }
    },
    "/projects/{project}/packages/repositories/{repository}": {
      "get": {
        "summary": "Get repository",
        "description": {
          "text": "Gets a package repository for a given project ID by type and name"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "$ref": "#/components/schemas/ProjectPackageRepository"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Read package repositories"
          }
        ]
      },
      "patch": {
        "summary": "Update repository",
        "description": {
          "text": "Updates package repository settings for a given project ID"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "nullable": true,
                    "type": "string"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  },
                  "public": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "cleanupEnabled": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "settings": {
                    "nullable": true,
                    "$ref": "#/components/schemas/ES_PackageRepositorySettings"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Admin package repositories"
          }
        ]
      },
      "delete": {
        "summary": "Delete repository",
        "description": {
          "text": "Removes package repository for a given project ID"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Admin package repositories"
          }
        ]
      }
    },
    "/projects/{project}/packages/repositories/{repository}/cleanup": {
      "post": {
        "summary": "Cleanup repository",
        "description": {
          "text": "Cleanup specified package repository"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "retentionPolicyParams": {
                    "nullable": true,
                    "$ref": "#/components/schemas/RetentionPolicyParams"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackagesExecutionResult"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Admin package repositories"
          }
        ]
      }
    },
    "/projects/{project}/packages/repositories/{repository}/cleanup/dry": {
      "post": {
        "summary": "Dry run repository cleanup",
        "description": {
          "text": "Dry run of cleanup for specified package repository"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "retentionParams": {
                    "$ref": "#/components/schemas/RetentionPolicyParams"
                  }
                },
                "required": [
                  "retentionParams"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DryCleanupResults"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Admin package repositories"
          }
        ]
      }
    },
    "/projects/{project}/packages/repositories/{repository}/connections": {
      "get": {
        "summary": "Get all remote repositories",
        "description": {
          "text": "Gets a list of remote package repositories for given project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PackageRepositoryConnection"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Read package repositories"
          }
        ]
      }
    },
    "/projects/{project}/packages/repositories/{repository}/connections/{connectionId}/publish": {
      "post": {
        "summary": "Publish packages to remote repository",
        "description": {
          "text": "Publishes packages to remote repository"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "source": {
                    "$ref": "#/components/schemas/PublishingSource"
                  }
                },
                "required": [
                  "source"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Write package repositories"
          }
        ]
      },
      "get": {
        "summary": "Get list of publishing to remote repository",
        "description": {
          "text": "Get list of publishing to remote repository"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PackagesPublishing"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Read package repositories"
          }
        ]
      }
    },
    "/projects/{project}/packages/repositories/{repository}/files": {
      "get": {
        "summary": "Get list of files",
        "description": {
          "text": "Gets a list of repository files for a given project ID in parent folder"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentPath",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileData"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Read package repositories"
          }
        ]
      }
    },
    "/projects/{project}/packages/repositories/{repository}/files/name:{filePath}": {
      "get": {
        "summary": "Get file details",
        "description": {
          "text": "Gets a details for repository file for a given project ID"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filePath",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "$ref": "#/components/schemas/FileDetails"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Read package repositories"
          }
        ]
      },
      "delete": {
        "summary": "Delete file",
        "description": {
          "text": "Removes a file in repository for a given project ID"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filePath",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Write package repositories"
          }
        ]
      }
    },
    "/projects/{project}/packages/repositories/{repository}/packages": {
      "get": {
        "summary": "Get all packages",
        "description": {
          "text": "Gets a list of repository packages for a given project ID"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectionId",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PackageData"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Read package repositories"
          }
        ]
      }
    },
    "/projects/{project}/packages/repositories/{repository}/packages/name:{packageName}": {
      "delete": {
        "summary": "Delete package",
        "description": {
          "text": "Removes all package versions in repository for a given project ID"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Write package repositories"
          }
        ]
      }
    },
    "/projects/{project}/packages/repositories/{repository}/packages/name:{packageName}/metadata": {
      "get": {
        "summary": "Get package metadata",
        "description": {
          "text": "Get package metadata in repository for a given project ID"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "$ref": "#/components/schemas/PackageMetadata"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "put": {
        "summary": "Report package  metadata",
        "description": {
          "text": "Update a package metadata in repository for a given project ID"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "connectionId": {
                    "nullable": true,
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/packages/repositories/{repository}/packages/name:{packageName}/metadata/version:{packageVersion}": {
      "put": {
        "summary": "Report package version metadata",
        "description": {
          "text": "Report a package version metadata in repository for a given project ID"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageVersion",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pin": {
                    "type": "boolean"
                  },
                  "comment": {
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "pin"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/packages/repositories/{repository}/packages/name:{packageName}/versions": {
      "get": {
        "summary": "Get all package versions",
        "description": {
          "text": "Gets a list of repository package versions for a given project ID"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectionId",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "pinned",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortColumn",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PackagesSortColumn"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ColumnSortOrder"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PackageVersionData"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Read package repositories"
          }
        ]
      }
    },
    "/projects/{project}/packages/repositories/{repository}/packages/name:{packageName}/versions/version:{packageVersion}": {
      "get": {
        "summary": "Get package version details",
        "description": {
          "text": "Gets a details for repository package version for a given project ID"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageVersion",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "$ref": "#/components/schemas/PackageVersionDetails"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Read package repositories"
          }
        ]
      },
      "delete": {
        "summary": "Delete package version",
        "description": {
          "text": "Removes a package version in repository for a given project ID"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageVersion",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Write package repositories"
          }
        ]
      }
    },
    "/projects/{project}/packages/repositories/{repository}/url": {
      "get": {
        "summary": "Get repository URL",
        "description": {
          "text": "Gets a package repository URL for a given project ID"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Read package repositories"
          }
        ]
      }
    },
    "/projects/{project}/packages/repositories/type:{type}/repository:{repositoryName}/packages": {
      "get": {
        "summary": "Get all packages",
        "description": {
          "text": "Gets a list of repository packages for a given project ID"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositoryName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PackageData"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true,
        "x-rights": [
          {
            "title": "Read package repositories"
          }
        ]
      }
    },
    "/projects/{project}/packages/repositories/type:{type}/repository:{repositoryName}/packages/name:{packageName}/versions": {
      "get": {
        "summary": "Get all package versions",
        "description": {
          "text": "Gets a list of repository package versions for a given project ID"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositoryName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortColumn",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PackagesSortColumn"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ColumnSortOrder"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PackageVersionData"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true,
        "x-rights": [
          {
            "title": "Read package repositories"
          }
        ]
      }
    },
    "/projects/{project}/packages/repositories/type:{type}/repository:{repositoryName}/packages/name:{packageName}/versions/version:{packageVersion}": {
      "get": {
        "summary": "Get package version details",
        "description": {
          "text": "Gets a details for repository package version for a given project ID"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositoryName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageVersion",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "$ref": "#/components/schemas/PackageVersionDetails"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true,
        "x-rights": [
          {
            "title": "Read package repositories"
          }
        ]
      },
      "delete": {
        "summary": "Delete package version",
        "description": {
          "text": "Removes a package version in repository for a given project ID"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositoryName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageVersion",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true,
        "x-rights": [
          {
            "title": "Write package repositories"
          }
        ]
      }
    },
    "/projects/{project}/packages/search": {
      "get": {
        "summary": "Find packages in repository",
        "description": {
          "text": "Executes a package search for a given project ID"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectionId",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PackageVersionData"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Read package repositories"
          }
        ]
      }
    },
    "/projects/{project}/packages/types": {
      "get": {
        "summary": "Get all types",
        "description": {
          "text": "Creates a new package repository for a given project ID"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PackageType"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/planning/boards": {
      "post": {
        "summary": "Create board",
        "description": {
          "text": "Create a new issue board in a project. The user will become the owner of the board."
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Create boards",
            "description": "Create issue boards"
          }
        ]
      },
      "get": {
        "summary": "Get all boards",
        "description": {
          "text": "Search existing boards in a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BoardRecord"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View boards",
            "description": "View issue boards"
          }
        ]
      }
    },
    "/projects/{project}/planning/boards/sprints": {
      "get": {
        "summary": "Get all sprints",
        "description": {
          "text": "Search existing sprints in a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "board",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SprintRecord"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View boards",
            "description": "View issue boards"
          }
        ]
      }
    },
    "/projects/{project}/planning/boards/starred": {
      "get": {
        "summary": "Get all starred boards",
        "description": {
          "text": "Get all starred boards in a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BoardRecord"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View boards",
            "description": "View issue boards"
          }
        ]
      }
    },
    "/projects/{project}/planning/boards/{board}/archive": {
      "delete": {
        "summary": "Archive board",
        "description": {
          "text": "Archive an existing board. This operation can be performed by board owners or other members who are granted permission to manage boards in a project."
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "board",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true,
        "x-rights": [
          {
            "title": "Manage boards",
            "description": "Update issue board settings and delete issue boards"
          }
        ]
      }
    },
    "/projects/{project}/planning/checklists": {
      "post": {
        "summary": "Create checklist",
        "description": {
          "text": "Create a new checklist in a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checklist"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      },
      "get": {
        "summary": "Get all checklists",
        "description": {
          "text": "Search existing checklists in a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "default": "UPDATED",
              "$ref": "#/components/schemas/ChecklistSorting"
            }
          },
          {
            "name": "descending",
            "in": "query",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Checklist"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      }
    },
    "/projects/{project}/planning/checklists/import": {
      "post": {
        "summary": "Import checklist",
        "description": {
          "text": "Create a new checklist in a project using tab indented lines as checkable items.\nThe items with the same indent level will be placed one under the other.\nAn issue URL will be converted into the corresponding issue."
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "tabIndentedLines": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "tabIndentedLines"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checklist"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      }
    },
    "/projects/{project}/planning/checklists/{checklistId}/import": {
      "post": {
        "summary": "Import checklist lines",
        "description": {
          "text": "Tab indented lines are converted into checkable items following the same rules as in Import Checklist.\nThe result is placed inside of the specified project checklist."
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "checklistId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetParentId": {
                    "type": "string"
                  },
                  "afterItemId": {
                    "nullable": true,
                    "type": "string"
                  },
                  "tabIndentedLines": {
                    "type": "string"
                  }
                },
                "required": [
                  "targetParentId",
                  "tabIndentedLines"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/planning/checklists/{checklistId}": {
      "patch": {
        "summary": "Update checklist",
        "description": {
          "text": "Update an existing checklist in a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "checklistId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  },
                  "owner": {
                    "nullable": true,
                    "type": "string"
                  },
                  "tag": {
                    "nullable": true,
                    "type": "string"
                  },
                  "topics": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      },
      "delete": {
        "summary": "Delete checklist",
        "description": {
          "text": "Delete an existing checklist in a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "checklistId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      }
    },
    "/projects/{project}/planning/checklists/starred": {
      "get": {
        "summary": "Get all starred checklists",
        "description": {
          "text": "Get all starred checklists in a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Checklist"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      }
    },
    "/projects/{project}/planning/checklists/{checklistId}/full-checklist-tree": {
      "get": {
        "summary": "Get full checklist tree",
        "description": {
          "text": "Get the content of a checklist in a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "checklistId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanItemChildren"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/planning/issues": {
      "post": {
        "summary": "Create issue",
        "description": {
          "text": "Create a new issue in a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  },
                  "assignee": {
                    "nullable": true,
                    "$ref": "#/components/schemas/ProfileIdentifier"
                  },
                  "status": {
                    "type": "string"
                  },
                  "dueDate": {
                    "nullable": true,
                    "type": "string",
                    "format": "full-date"
                  },
                  "tags": {
                    "default": [],
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "checklists": {
                    "default": [],
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "sprints": {
                    "default": [],
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SprintIdentifier"
                    }
                  },
                  "attachments": {
                    "nullable": true,
                    "default": [],
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AttachmentIn"
                    }
                  },
                  "fromMessage": {
                    "nullable": true,
                    "$ref": "#/components/schemas/MessageLink"
                  },
                  "customFields": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomFieldInputValue"
                    }
                  },
                  "topics": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "parents": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/IssueIdentifier"
                    }
                  }
                },
                "required": [
                  "title",
                  "status"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Create issues",
            "description": "Create issues in a project"
          }
        ]
      },
      "get": {
        "summary": "Get all issues",
        "description": {
          "text": "Search existing issues in a project. Parameters are applied as 'AND' filters."
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "assigneeId",
            "in": "query",
            "required": false,
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "nullable": true,
                "type": "string"
              }
            }
          },
          {
            "name": "createdByProfileId",
            "in": "query",
            "required": false,
            "deprecated": true,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "createdBy",
            "in": "query",
            "required": false,
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "statuses",
            "in": "query",
            "required": false,
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tagId",
            "in": "query",
            "required": false,
            "deprecated": true,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/IssuesSorting"
            }
          },
          {
            "name": "descending",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "nullable": true,
                "type": "string"
              }
            }
          },
          {
            "name": "sprints",
            "in": "query",
            "required": false,
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "nullable": true,
                "type": "string"
              }
            }
          },
          {
            "name": "boards",
            "in": "query",
            "required": false,
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "nullable": true,
                "type": "string"
              }
            }
          },
          {
            "name": "customFields",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "importTransaction",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "creationTimeFrom",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "creationTimeTo",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dueDateFrom",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "dueDateTo",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "topics",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "grouping",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/IssueListGrouping"
            }
          },
          {
            "name": "deployment",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Issue"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View issues",
            "description": "View issues in a project"
          }
        ]
      }
    },
    "/projects/{project}/planning/issues/import": {
      "post": {
        "summary": "Import issues",
        "description": {
          "text": "Import issues in a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "$ref": "#/components/schemas/ImportMetadata"
                  },
                  "issues": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ExternalIssue"
                    }
                  },
                  "assigneeMissingPolicy": {
                    "$ref": "#/components/schemas/ImportMissingPolicy"
                  },
                  "statusMissingPolicy": {
                    "$ref": "#/components/schemas/ImportMissingPolicy"
                  },
                  "onExistsPolicy": {
                    "$ref": "#/components/schemas/ImportExistsPolicy"
                  },
                  "dryRun": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "metadata",
                  "issues",
                  "dryRun"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueImportResult"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Import issues",
            "description": "Import issues"
          }
        ]
      }
    },
    "/projects/{project}/planning/issues/{issueId}/restore": {
      "post": {
        "summary": "Restore issue",
        "description": {
          "text": "Restore an issue in a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "issueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Restore issues",
            "description": "Restore issues that were created by other users"
          }
        ]
      }
    },
    "/projects/{project}/planning/issues/{issueId}/toggle-resolved": {
      "post": {
        "summary": "Toggle issue resolved status",
        "description": {
          "text": "Toggle status of an existing issue between resolved and unresolved"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "issueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "resolved": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "resolved"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update issues",
            "description": "Update issues that were created by other users"
          }
        ]
      }
    },
    "/projects/{project}/planning/issues/number:{number}": {
      "get": {
        "summary": "Get issue by number",
        "description": {
          "text": "Find an existing issue by a given number in a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "resolveAlias",
            "in": "query",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "withDeleted",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View issues",
            "description": "View issues in a project"
          }
        ]
      }
    },
    "/projects/{project}/planning/issues/{issueId}": {
      "get": {
        "summary": "Get issue",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "issueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withDeleted",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View issues",
            "description": "View issues in a project"
          }
        ]
      },
      "patch": {
        "summary": "Update issue",
        "description": {
          "text": "Update an existing issue in a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "issueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  },
                  "assignee": {
                    "nullable": true,
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "dueDate": {
                    "nullable": true,
                    "type": "string",
                    "format": "full-date"
                  },
                  "customFields": {
                    "default": [],
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomFieldInputValue"
                    }
                  },
                  "notifySubscribers": {
                    "default": true,
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update issues",
            "description": "Update issues that were created by other users"
          }
        ]
      },
      "delete": {
        "summary": "Delete issue",
        "description": {
          "text": "Delete an issue from a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "issueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update issues",
            "description": "Update issues that were created by other users"
          }
        ]
      }
    },
    "/projects/{project}/planning/issues/statuses": {
      "get": {
        "summary": "Get all issue statuses",
        "description": {
          "text": "Get all existing issue statuses in a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IssueStatus"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View issues",
            "description": "View issues in a project"
          }
        ]
      },
      "patch": {
        "summary": "Update issue statuses list",
        "description": {
          "text": "Configure issue statuses in a project. The list must contain at least one resolved and one unresolved status."
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "statuses": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/IssueStatusData"
                    }
                  }
                },
                "required": [
                  "statuses"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage issue settings",
            "description": "Manage settings of the issue tracker"
          }
        ]
      }
    },
    "/projects/{project}/planning/issues/statuses/auto-update-on-merge-request-merge": {
      "get": {
        "summary": "Get auto update target issue status for merge request merge",
        "description": {
          "text": "Get target issue status for auto updating issues on linked merge request merge"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "$ref": "#/components/schemas/IssueStatus"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View issues",
            "description": "View issues in a project"
          }
        ]
      },
      "patch": {
        "summary": "Set auto update target issue status for merge request merge",
        "description": {
          "text": "Set target issue status for auto updating issues on linked merge request merge"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "statusId": {
                    "nullable": true,
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage issue settings",
            "description": "Manage settings of the issue tracker"
          }
        ]
      }
    },
    "/projects/{project}/planning/issues/statuses/distribution": {
      "get": {
        "summary": "Get issue status distribution",
        "description": {
          "text": "Get all existing issue statuses with their usage, number of existing issues, in a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IssueStatusWithUsages"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View issues",
            "description": "View issues in a project"
          }
        ]
      }
    },
    "/projects/{project}/planning/issues/{issueId}/attachments": {
      "post": {
        "summary": "Add attachments",
        "description": {
          "text": "Add attachments to an existing issue in a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "issueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "attachments": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AttachmentIn"
                    }
                  }
                },
                "required": [
                  "attachments"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update issues",
            "description": "Update issues that were created by other users"
          }
        ]
      },
      "delete": {
        "summary": "Remove attachments",
        "description": {
          "text": "Remove attachments from an existing issue in a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "issueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identities",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update issues",
            "description": "Update issues that were created by other users"
          }
        ]
      }
    },
    "/projects/{project}/planning/issues/{issueId}/checklists/{checklistId}": {
      "post": {
        "summary": "Add issue checklist",
        "description": {
          "text": "Add the checklist to an existing issue in a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "issueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "checklistId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update issues",
            "description": "Update issues that were created by other users"
          },
          {
            "title": "Edit documents"
          }
        ]
      },
      "delete": {
        "summary": "Remove issue checklist",
        "description": {
          "text": "Remove the checklist from an existing issue in a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "issueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "checklistId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update issues",
            "description": "Update issues that were created by other users"
          },
          {
            "title": "Edit documents"
          }
        ]
      }
    },
    "/projects/{project}/planning/issues/{issueId}/code-reviews": {
      "post": {
        "summary": "Add code review links",
        "description": {
          "text": "Add code review links to an existing issue in a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "issueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "codeReviewIds": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ReviewIdentifier"
                    }
                  }
                },
                "required": [
                  "codeReviewIds"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update issues",
            "description": "Update issues that were created by other users"
          }
        ]
      },
      "delete": {
        "summary": "Remove code review links",
        "description": {
          "text": "Remove code review links from an existing issue in a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "issueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "codeReviewIds",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update issues",
            "description": "Update issues that were created by other users"
          }
        ]
      }
    },
    "/projects/{project}/planning/issues/{issueId}/comments/import": {
      "post": {
        "summary": "Import issue comment history",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "issueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comments": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MessageForImport"
                    }
                  }
                },
                "required": [
                  "comments"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Import issues",
            "description": "Import issues"
          }
        ]
      }
    },
    "/projects/{project}/planning/issues/{issueId}/commits": {
      "post": {
        "summary": "Add commit links",
        "description": {
          "text": "Add commit links to an existing issue in a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "issueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "repository": {
                    "type": "string"
                  },
                  "commitIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "repository",
                  "commitIds"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update issues",
            "description": "Update issues that were created by other users"
          }
        ]
      },
      "delete": {
        "summary": "Remove commit links",
        "description": {
          "text": "Remove commit links from an existing issue in a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "issueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repository",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitIds",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update issues",
            "description": "Update issues that were created by other users"
          }
        ]
      }
    },
    "/projects/{project}/planning/issues/{issueId}/tags/{tagId}": {
      "post": {
        "summary": "Add issue tag",
        "description": {
          "text": "Add an existing tag to an issue in a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "issueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update issues",
            "description": "Update issues that were created by other users"
          }
        ]
      },
      "delete": {
        "summary": "Remove issue tag",
        "description": {
          "text": "Remove an existing tag from an issue in a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "issueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update issues",
            "description": "Update issues that were created by other users"
          }
        ]
      }
    },
    "/projects/{project}/planning/tags": {
      "post": {
        "summary": "Create hierarchical tag",
        "description": {
          "text": "Create a new hierarchical tag in a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parentTagId": {
                    "nullable": true,
                    "type": "string"
                  },
                  "path": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "path"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanningTag"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage tags",
            "description": "Add, edit or remove planning tags"
          }
        ]
      },
      "get": {
        "summary": "Get all hierarchical tags",
        "description": {
          "text": "Search existing tags in a project"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PlanningTag"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View project details"
          }
        ]
      }
    },
    "/projects/{project}/repositories/{repository}": {
      "post": {
        "summary": "Create new repository",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "default": "",
                    "type": "string"
                  },
                  "defaultBranch": {
                    "nullable": true,
                    "type": "string"
                  },
                  "initialize": {
                    "default": true,
                    "type": "boolean"
                  },
                  "defaultSetup": {
                    "default": false,
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PR_RepositoryInfo"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "delete": {
        "summary": "Delete repository",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/repositories/{repository}/commit": {
      "post": {
        "summary": "Commit changes to repository",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "baseCommit": {
                    "type": "string"
                  },
                  "targetBranch": {
                    "type": "string"
                  },
                  "commitMessage": {
                    "type": "string"
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/GitCommitFileRequest"
                    }
                  }
                },
                "required": [
                  "baseCommit",
                  "targetBranch",
                  "commitMessage",
                  "files"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitCommitResult"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/repositories/{repository}/gc": {
      "post": {
        "summary": "Invoke garbage collection on repository [Not available in multi-org mode]",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/repositories/{repository}/commits": {
      "get": {
        "summary": "List commits matching query",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/GitCommitInfo"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/repositories/{repository}/url": {
      "get": {
        "summary": "Get repository git remote URL",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryUrls"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/repositories/{repository}/revisions/{revision}/external-checks": {
      "post": {
        "summary": "Report external check status",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "revision",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "branch": {
                    "nullable": true,
                    "type": "string"
                  },
                  "changes": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "executionStatus": {
                    "$ref": "#/components/schemas/CommitExecutionStatus"
                  },
                  "url": {
                    "type": "string"
                  },
                  "externalServiceName": {
                    "type": "string"
                  },
                  "taskName": {
                    "type": "string"
                  },
                  "taskId": {
                    "type": "string"
                  },
                  "timestamp": {
                    "nullable": true,
                    "type": "integer",
                    "format": "int64"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "executionStatus",
                  "url",
                  "externalServiceName",
                  "taskName",
                  "taskId"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "get": {
        "summary": "Get external checks for a commit",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "revision",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalCheckDTO"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/responsibilities/scheme": {
      "get": {
        "summary": "Get project responsibility scheme",
        "description": {
          "text": "Get the responsibilities schema for a given project ID"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubjectResponsibilitiesTable"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/responsibilities/subjects": {
      "post": {
        "summary": "Add responsibility subject",
        "description": {
          "text": "Add a responsibility subject for a given project ID"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "nullable": true,
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/responsibilities/subjects/{subjectId}": {
      "patch": {
        "summary": "Edit responsibility subject",
        "description": {
          "text": "Update an existing responsibility subject for a given project ID"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subjectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "nullable": true,
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/responsibilities/{responsibilityId}/assignees/{profileId}": {
      "post": {
        "summary": "Assign responsible",
        "description": {
          "text": "Assign a responsible person for a given project ID and responsibility ID"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responsibilityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profileId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role": {
                    "nullable": true,
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "delete": {
        "summary": "Remove responsible",
        "description": {
          "text": "Remove a responsible person for a given project ID and responsibility ID"
        },
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responsibilityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profileId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/topics": {
      "post": {
        "summary": "Create topic",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "parentTopicId": {
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Topic"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "get": {
        "summary": "Get topic",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Topic"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/topics/remove-topics": {
      "post": {
        "summary": "Remove Topics",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "ids"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/topics/set-responsible": {
      "post": {
        "summary": "Set Responsible",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "topicId": {
                    "type": "string"
                  },
                  "responsible": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ProfileIdentifier"
                    }
                  }
                },
                "required": [
                  "topicId",
                  "responsible"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/projects/{project}/topics/{id}": {
      "patch": {
        "summary": "Update topic",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "parentTopicId": {
                    "nullable": true,
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Topic"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/public-holidays/calendars": {
      "post": {
        "summary": "Create calendar",
        "description": {
          "text": "Create a public holiday calendar for a location"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "location": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "location"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicHolidayCalendarRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "get": {
        "summary": "Get all calendars",
        "description": {
          "text": "Get all public holiday calendars"
        },
        "parameters": [
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PublicHolidayCalendarRecord"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/public-holidays/calendars/import": {
      "post": {
        "summary": "Import calendar",
        "description": {
          "text": "Import holidays in a public holiday calendar, using an attachment (.ics format) as the source"
        },
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "calendar": {
                    "type": "string"
                  },
                  "attachmentId": {
                    "type": "string"
                  }
                },
                "required": [
                  "calendar",
                  "attachmentId"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/public-holidays/calendars/{id}": {
      "patch": {
        "summary": "Update calendar",
        "description": {
          "text": "Update an existing public holiday calendar"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "location": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "location"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicHolidayCalendarRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "delete": {
        "summary": "Delete calendar",
        "description": {
          "text": "Delete a public holiday calendar"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/public-holidays/holidays": {
      "post": {
        "summary": "Create holiday",
        "description": {
          "text": "Add a holiday to a public holiday calendar and specify if it is a working day or not"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "calendar": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "date": {
                    "type": "string",
                    "format": "full-date"
                  },
                  "workingDay": {
                    "type": "boolean"
                  },
                  "halfDay": {
                    "nullable": true,
                    "default": false,
                    "type": "boolean"
                  }
                },
                "required": [
                  "calendar",
                  "name",
                  "date",
                  "workingDay"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicHoliday"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "get": {
        "summary": "Get all holidays",
        "description": {
          "text": "Get/search all holidays in a public holiday calendar. Parameters are applied as 'AND' filters."
        },
        "parameters": [
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "calendar",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "location",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PublicHoliday"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/public-holidays/holidays/{id}": {
      "patch": {
        "summary": "Update holiday",
        "description": {
          "text": "Update a holiday in a public holiday calendar. Optional parameters will be ignored when not specified and updated otherwise."
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "calendar": {
                    "nullable": true,
                    "type": "string"
                  },
                  "name": {
                    "nullable": true,
                    "type": "string"
                  },
                  "date": {
                    "nullable": true,
                    "type": "string",
                    "format": "full-date"
                  },
                  "workingDay": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "halfDay": {
                    "nullable": true,
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicHoliday"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "delete": {
        "summary": "Delete holiday",
        "description": {
          "text": "Delete a holiday from a public holiday calendar"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/public-holidays/holidays/profile-holidays": {
      "get": {
        "summary": "Get all profile holidays",
        "description": {
          "text": "Get holidays observed in the location(s) of the current profile during the selected period"
        },
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "profile",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workingDays",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PublicHoliday"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/public-holidays/holidays/related-holidays": {
      "get": {
        "summary": "Get all related holidays",
        "description": {
          "text": "Search related holidays in all public holiday calendars, during the selected period"
        },
        "parameters": [
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PublicHoliday"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/rd/workspaces/reload-config": {
      "post": {
        "summary": "Reload Config",
        "description": {
          "text": "Restarts the given workspace while keeping local changes to update the configuration"
        },
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "workspace": {
                    "$ref": "#/components/schemas/WorkspaceIdentifier"
                  }
                },
                "required": [
                  "workspace"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage dev environments of all project members",
            "description": "Allows to manage the lifecycle of dev environments that the user doesn't own (users can always manage their own environments)"
          }
        ]
      }
    },
    "/reactions/{item}/{emoji}": {
      "post": {
        "summary": "Add reaction",
        "parameters": [
          {
            "name": "item",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emoji",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Add message reactions"
          },
          {
            "title": "Add reactions to direct messages"
          },
          {
            "title": "Add reactions to article comments"
          },
          {
            "title": "Add reactions to comments in code reviews"
          }
        ]
      },
      "get": {
        "summary": "List reacted users and applications",
        "parameters": [
          {
            "name": "item",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emoji",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CPrincipal"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View message reactions"
          },
          {
            "title": "View reactions to direct messages"
          },
          {
            "title": "View reactions to comments in code reviews"
          },
          {
            "title": "View reactions to article comments"
          }
        ]
      },
      "delete": {
        "summary": "Remove reaction",
        "parameters": [
          {
            "name": "item",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emoji",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Add message reactions"
          },
          {
            "title": "Add reactions to direct messages"
          },
          {
            "title": "Add reactions to article comments"
          },
          {
            "title": "Add reactions to comments in code reviews"
          }
        ]
      }
    },
    "/reactions/{item}": {
      "get": {
        "summary": "List reactions",
        "parameters": [
          {
            "name": "item",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmojiReaction"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View message reactions"
          },
          {
            "title": "View reactions to direct messages"
          },
          {
            "title": "View reactions to comments in code reviews"
          },
          {
            "title": "View reactions to article comments"
          }
        ]
      }
    },
    "/rich-text/parse-markdown": {
      "post": {
        "summary": "Parse Markdown",
        "description": {
          "text": "Parses [Space markdown syntax](https://www.jetbrains.com/help/space/markdown-syntax.html) into a tree presentation"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string"
                  }
                },
                "required": [
                  "text"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RtDocument"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/calendar-events": {
      "get": {
        "summary": "Get all calendar events",
        "description": {
          "text": "Get calendar events attached to an article in a specific time period"
        },
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeetingRecord"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      }
    },
    "/team-directory/calendar-events/{id}": {
      "get": {
        "summary": "Get calendar event",
        "description": {
          "text": "Get a calendar event attached to an article"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      }
    },
    "/team-directory/calendar-events/absence-events": {
      "get": {
        "summary": "Get all absence events",
        "description": {
          "text": "Get/search absences. Parameters are applied as 'AND' filters."
        },
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "team",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "location",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AbsenceEvent"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      }
    },
    "/team-directory/calendar-events/birthday-events": {
      "get": {
        "summary": "Get all birthday events",
        "description": {
          "text": "Get/search birthdays. Parameters are applied as 'AND' filters."
        },
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "team",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "location",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BirthdayEvent"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      }
    },
    "/team-directory/calendar-events/birthday-events/starred": {
      "get": {
        "summary": "Get all starred birthday events",
        "description": {
          "text": "Get/search birthdays in a specific time period for starred profiles."
        },
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BirthdayEvent"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      }
    },
    "/team-directory/calendar-events/holidays": {
      "get": {
        "summary": "Get all holidays",
        "description": {
          "text": "Get/search holidays. Parameters are applied as 'AND' filters."
        },
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "team",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "location",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "workingDays",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HolidaysEvent"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      }
    },
    "/team-directory/calendar-events/meeting-participations/{id}": {
      "patch": {
        "summary": "Update meeting participation",
        "description": {
          "text": "Update RSVP / calendar event participation status for a calendar event attached to an article"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "newStatus": {
                    "$ref": "#/components/schemas/EventParticipationStatus"
                  }
                },
                "required": [
                  "newStatus"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      }
    },
    "/team-directory/calendar-events/membership-events": {
      "get": {
        "summary": "Get all membership events",
        "description": {
          "text": "Get/search membership events. Parameters are applied as 'AND' filters."
        },
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "team",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "location",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MembershipEvent"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true,
        "x-rights": [
          {
            "title": "View memberships"
          }
        ]
      }
    },
    "/team-directory/calendar-events/non-working-days-events": {
      "get": {
        "summary": "Get all non working days events",
        "description": {
          "text": "Get/search non-working day events. Parameters are applied as 'AND' filters."
        },
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "member",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "team",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "location",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NonWorkingDaysEvent"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      }
    },
    "/team-directory/invitation-links": {
      "post": {
        "summary": "Create invitation link",
        "description": {
          "text": "Create an organization-wide invitation link"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "expiresAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "inviteeLimit": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "team": {
                    "nullable": true,
                    "type": "string"
                  },
                  "role": {
                    "nullable": true,
                    "type": "string"
                  },
                  "project": {
                    "nullable": true,
                    "$ref": "#/components/schemas/ProjectIdentifier"
                  },
                  "projectRole": {
                    "nullable": true,
                    "$ref": "#/components/schemas/ProjectTeamRole"
                  }
                },
                "required": [
                  "name",
                  "expiresAt",
                  "inviteeLimit"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "first": {
                      "type": "string"
                    },
                    "second": {
                      "$ref": "#/components/schemas/InvitationLink"
                    }
                  },
                  "required": [
                    "first",
                    "second"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "get": {
        "summary": "Get all invitation links",
        "description": {
          "text": "Get organization-wide invitation links"
        },
        "parameters": [
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "withDeleted",
            "in": "query",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/InvitationLink"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/invitation-links/{invitationLinkId}": {
      "patch": {
        "summary": "Update invitation link",
        "description": {
          "text": "Update an organization-wide invitation link"
        },
        "parameters": [
          {
            "name": "invitationLinkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "nullable": true,
                    "type": "string"
                  },
                  "expiresAt": {
                    "nullable": true,
                    "type": "string",
                    "format": "date-time"
                  },
                  "inviteeLimit": {
                    "nullable": true,
                    "type": "integer",
                    "format": "int32"
                  },
                  "team": {
                    "nullable": true,
                    "type": "string"
                  },
                  "position": {
                    "nullable": true,
                    "type": "string"
                  },
                  "project": {
                    "nullable": true,
                    "$ref": "#/components/schemas/ProjectIdentifier"
                  },
                  "projectRole": {
                    "nullable": true,
                    "$ref": "#/components/schemas/ProjectTeamRole"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "delete": {
        "summary": "Delete invitation link",
        "description": {
          "text": "Delete currently active organization-wide invitation link"
        },
        "parameters": [
          {
            "name": "invitationLinkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/invitations": {
      "post": {
        "summary": "Create invitation",
        "description": {
          "text": "Create an invitation to join the current organisation. Optionally, the team and/or role to join when accepting the invitation can be specified."
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "inviteeEmail": {
                    "type": "string"
                  },
                  "inviteeFirstName": {
                    "nullable": true,
                    "type": "string"
                  },
                  "inviteeLastName": {
                    "nullable": true,
                    "type": "string"
                  },
                  "team": {
                    "nullable": true,
                    "type": "string"
                  },
                  "role": {
                    "nullable": true,
                    "type": "string"
                  },
                  "project": {
                    "nullable": true,
                    "$ref": "#/components/schemas/ProjectIdentifier"
                  },
                  "projectRole": {
                    "nullable": true,
                    "$ref": "#/components/schemas/ProjectTeamRole"
                  }
                },
                "required": [
                  "inviteeEmail"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invitation"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "get": {
        "summary": "Get all invitations",
        "description": {
          "text": "Get a list of invitations"
        },
        "parameters": [
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "withDeleted",
            "in": "query",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Invitation"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/invitations/{id}": {
      "patch": {
        "summary": "Update invitation",
        "description": {
          "text": "Update an invitation. Optional parameters will be ignored when not specified and updated otherwise."
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "inviteeEmail": {
                    "nullable": true,
                    "type": "string"
                  },
                  "inviteeFirstName": {
                    "nullable": true,
                    "type": "string"
                  },
                  "inviteeLastName": {
                    "nullable": true,
                    "type": "string"
                  },
                  "team": {
                    "nullable": true,
                    "type": "string"
                  },
                  "role": {
                    "nullable": true,
                    "type": "string"
                  },
                  "project": {
                    "nullable": true,
                    "$ref": "#/components/schemas/ProjectIdentifier"
                  },
                  "projectRole": {
                    "nullable": true,
                    "$ref": "#/components/schemas/ProjectTeamRole"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "delete": {
        "summary": "Delete invitation",
        "description": {
          "text": "Delete an invitation. Deleted invitations can no longer be used to join the organisation."
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/languages": {
      "get": {
        "summary": "Get all languages",
        "description": {
          "text": "Get all languages"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TD_Language"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/location-equipment-types": {
      "get": {
        "summary": "Get all location equipment types",
        "description": {
          "text": "Get all equipment types"
        },
        "parameters": [
          {
            "name": "withArchived",
            "in": "query",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TD_LocationEquipmentType"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/location-equipment-types/name:{name}": {
      "delete": {
        "summary": "Delete location equipment type by name",
        "description": {
          "text": "Archive/restore location equipment type. Setting delete to true will archive the equipment type, false will restore it."
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/location-map-member-points": {
      "post": {
        "summary": "Create location map member point",
        "description": {
          "text": "Mark member location on a map"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "memberLocationId": {
                    "type": "string"
                  },
                  "x": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "y": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "mapId": {
                    "type": "string"
                  }
                },
                "required": [
                  "memberLocationId",
                  "x",
                  "y",
                  "mapId"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TD_LocationMapPoint"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update member profiles"
          }
        ]
      },
      "get": {
        "summary": "Get all location map member points",
        "description": {
          "text": "Get members on a map for a location ID"
        },
        "parameters": [
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeUnmarked",
            "in": "query",
            "required": false,
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TD_MemberInLocationMap"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View location map points"
          }
        ]
      }
    },
    "/team-directory/location-map-member-points/{locationPointId}": {
      "patch": {
        "summary": "Update location map member point",
        "description": {
          "text": "Update member location on a map"
        },
        "parameters": [
          {
            "name": "locationPointId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "x": {
                    "nullable": true,
                    "type": "integer",
                    "format": "int32"
                  },
                  "y": {
                    "nullable": true,
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TD_LocationMapPoint"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update member profiles"
          }
        ]
      },
      "delete": {
        "summary": "Delete location map member point",
        "description": {
          "text": "Delete member location from a map"
        },
        "parameters": [
          {
            "name": "locationPointId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update member profiles"
          }
        ]
      }
    },
    "/team-directory/locations": {
      "post": {
        "summary": "Create location",
        "description": {
          "text": "Create a location"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "timezone": {
                    "nullable": true,
                    "type": "string"
                  },
                  "workdays": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "phones": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "emails": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "equipment": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  },
                  "address": {
                    "nullable": true,
                    "type": "string"
                  },
                  "type": {
                    "nullable": true,
                    "type": "string"
                  },
                  "parentId": {
                    "nullable": true,
                    "type": "string"
                  },
                  "capacity": {
                    "nullable": true,
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TD_Location"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update locations"
          }
        ]
      },
      "get": {
        "summary": "Get all locations",
        "description": {
          "text": "Get/search all locations. Parameters are applied as 'AND' filters."
        },
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "withArchived",
            "in": "query",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TD_Location"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View locations"
          }
        ]
      }
    },
    "/team-directory/locations/restore": {
      "post": {
        "summary": "Restore multiple locations",
        "description": {
          "text": "Restore one or more archived locations"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "ids"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TD_Location"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update locations"
          }
        ]
      }
    },
    "/team-directory/locations/{id}/restore": {
      "post": {
        "summary": "Restore location",
        "description": {
          "text": "Restore an archived location"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TD_Location"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update locations"
          }
        ]
      }
    },
    "/team-directory/locations/{id}": {
      "get": {
        "summary": "Get location",
        "description": {
          "text": "Get a location by ID"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "$ref": "#/components/schemas/TD_Location"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View locations"
          }
        ]
      },
      "patch": {
        "summary": "Update location",
        "description": {
          "text": "Update a location. Optional parameters will be ignored when null and updated otherwise."
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "nullable": true,
                    "type": "string"
                  },
                  "timezone": {
                    "nullable": true,
                    "type": "string"
                  },
                  "customWorkdays": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "workdays": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "phones": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "emails": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "equipment": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  },
                  "address": {
                    "nullable": true,
                    "type": "string"
                  },
                  "type": {
                    "nullable": true,
                    "type": "string"
                  },
                  "parentId": {
                    "nullable": true,
                    "type": "string"
                  },
                  "mapId": {
                    "nullable": true,
                    "type": "string"
                  },
                  "capacity": {
                    "nullable": true,
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TD_Location"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update locations"
          }
        ]
      },
      "delete": {
        "summary": "Archive location",
        "description": {
          "text": "Archive a location"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TD_Location"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update locations"
          }
        ]
      }
    },
    "/team-directory/locations/{id}/map": {
      "get": {
        "summary": "Get map",
        "description": {
          "text": "Get map for a location ID"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "$ref": "#/components/schemas/TD_LocationMap"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View locations"
          }
        ]
      },
      "patch": {
        "summary": "Update map",
        "description": {
          "text": "Update the map for a location"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "mapPictureId": {
                    "type": "string"
                  }
                },
                "required": [
                  "mapPictureId"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TD_LocationMap"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update locations"
          }
        ]
      }
    },
    "/team-directory/locations-with-timezone": {
      "get": {
        "summary": "Get all locations with timezone",
        "description": {
          "text": "Get all locations with their time zone"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TD_LocationWithTimeZone"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View locations"
          }
        ]
      }
    },
    "/team-directory/member-locations": {
      "post": {
        "summary": "Create member location",
        "description": {
          "text": "Add a member location, optionally from/until a given date"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "member": {
                    "$ref": "#/components/schemas/ProfileIdentifier"
                  },
                  "location": {
                    "type": "string"
                  },
                  "since": {
                    "nullable": true,
                    "type": "string",
                    "format": "full-date"
                  },
                  "till": {
                    "nullable": true,
                    "type": "string",
                    "format": "full-date"
                  },
                  "previousLocation": {
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "member",
                  "location"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TD_MemberLocation"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Edit locations"
          }
        ]
      },
      "get": {
        "summary": "Get all member locations",
        "description": {
          "text": "Get/search member locations. Parameters are applied as 'AND' filters."
        },
        "parameters": [
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "locations",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "till",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "withArchived",
            "in": "query",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TD_MemberLocation"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View member locations"
          }
        ]
      }
    },
    "/team-directory/member-locations/{memberLocationId}": {
      "get": {
        "summary": "Get member location",
        "description": {
          "text": "Get a member location by its ID"
        },
        "parameters": [
          {
            "name": "memberLocationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TD_MemberLocation"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View member locations"
          }
        ]
      },
      "patch": {
        "summary": "Update member location",
        "description": {
          "text": "Update member location. Optional parameters will be ignored when null and updated otherwise."
        },
        "parameters": [
          {
            "name": "memberLocationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "location": {
                    "nullable": true,
                    "type": "string"
                  },
                  "since": {
                    "nullable": true,
                    "type": "string",
                    "format": "full-date"
                  },
                  "till": {
                    "nullable": true,
                    "type": "string",
                    "format": "full-date"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TD_MemberLocation"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Edit locations"
          }
        ]
      },
      "delete": {
        "summary": "Delete member location",
        "description": {
          "text": "Archive/unarchive a member location. Setting delete to true will archive the member location, false will restore it."
        },
        "parameters": [
          {
            "name": "memberLocationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "required": false,
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Edit locations"
          }
        ]
      }
    },
    "/team-directory/membership-events": {
      "get": {
        "summary": "Get all membership events",
        "description": {
          "text": "Get/search membership events. Parameters are applied as 'AND' filters."
        },
        "parameters": [
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "teamId",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TD_MergedEvent"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/memberships": {
      "post": {
        "summary": "Create membership",
        "description": {
          "text": "Create a team membership"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "member": {
                    "$ref": "#/components/schemas/ProfileIdentifier"
                  },
                  "teamId": {
                    "type": "string"
                  },
                  "roleId": {
                    "type": "string"
                  },
                  "lead": {
                    "default": false,
                    "type": "boolean"
                  },
                  "manager": {
                    "nullable": true,
                    "$ref": "#/components/schemas/ProfileIdentifier"
                  },
                  "activeSince": {
                    "nullable": true,
                    "type": "string",
                    "format": "date-time"
                  },
                  "activeTill": {
                    "nullable": true,
                    "type": "string",
                    "format": "date-time"
                  },
                  "previousMembershipId": {
                    "nullable": true,
                    "type": "string"
                  },
                  "requiresApproval": {
                    "default": false,
                    "type": "boolean"
                  },
                  "customFieldValues": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomFieldInputValue"
                    }
                  }
                },
                "required": [
                  "member",
                  "teamId",
                  "roleId"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TD_Membership"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update teams"
          }
        ]
      },
      "get": {
        "summary": "Get all memberships",
        "description": {
          "text": "Get/search team memberships. Parameters are applied as 'AND' filters."
        },
        "parameters": [
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "identifiers",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "teams",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "directTeams",
            "in": "query",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "roles",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "directRoles",
            "in": "query",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "till",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "requiresApproval",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "name": "withArchived",
            "in": "query",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TD_Membership"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View memberships"
          }
        ]
      }
    },
    "/team-directory/memberships/{membershipId}": {
      "get": {
        "summary": "Get membership",
        "description": {
          "text": "Get a single membership by its identifier"
        },
        "parameters": [
          {
            "name": "membershipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TD_Membership"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View memberships"
          }
        ]
      },
      "patch": {
        "summary": "Update membership",
        "description": {
          "text": "Update a team membership. Optional parameters will be ignored when null and updated otherwise."
        },
        "parameters": [
          {
            "name": "membershipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "teamId": {
                    "nullable": true,
                    "type": "string"
                  },
                  "roleId": {
                    "nullable": true,
                    "type": "string"
                  },
                  "lead": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "manager": {
                    "nullable": true,
                    "$ref": "#/components/schemas/ProfileIdentifier"
                  },
                  "activeSince": {
                    "nullable": true,
                    "type": "string",
                    "format": "date-time"
                  },
                  "activeTill": {
                    "nullable": true,
                    "type": "string",
                    "format": "date-time"
                  },
                  "requiresApproval": {
                    "default": false,
                    "type": "boolean"
                  },
                  "customFieldValues": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomFieldInputValue"
                    }
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TD_Membership"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update teams"
          }
        ]
      },
      "delete": {
        "summary": "Delete membership",
        "description": {
          "text": "Archive/unarchive a team membership. Setting delete to true will archive the membership, false will restore it."
        },
        "parameters": [
          {
            "name": "membershipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "required": false,
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update teams"
          }
        ]
      }
    },
    "/team-directory/memberships/{membershipId}/revoke": {
      "delete": {
        "summary": "Revoke membership",
        "description": {
          "text": "Revoke a team membership to end at a given date/time"
        },
        "parameters": [
          {
            "name": "membershipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "till",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update teams"
          }
        ]
      }
    },
    "/team-directory/memberships/manager-candidates": {
      "get": {
        "summary": "Get manager candidate",
        "description": {
          "text": "Query profiles that can be a manager"
        },
        "parameters": [
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "term",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "excludedMemberId",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TD_MemberProfile"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/memberships/requests": {
      "get": {
        "summary": "Get all requests",
        "description": {
          "text": "Get/search all membership requests. Parameters are applied as 'AND' filters."
        },
        "parameters": [
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "teamId",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "direct",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": true,
              "type": "boolean"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "first": {
                            "$ref": "#/components/schemas/TD_MemberProfile"
                          },
                          "second": {
                            "$ref": "#/components/schemas/TD_Membership"
                          }
                        },
                        "required": [
                          "first",
                          "second"
                        ]
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update teams"
          }
        ]
      }
    },
    "/team-directory/memberships/requests/{membershipRequestId}": {
      "patch": {
        "summary": "Update request",
        "description": {
          "text": "Approve/reject a team membership request. Setting approved to true will approve the membership request, false will reject it."
        },
        "parameters": [
          {
            "name": "membershipRequestId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "approved": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "approved"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update teams"
          }
        ]
      },
      "delete": {
        "summary": "Delete request",
        "description": {
          "text": "Delete a team membership request"
        },
        "parameters": [
          {
            "name": "membershipRequestId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TD_Membership"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update member profiles"
          }
        ]
      }
    },
    "/team-directory/memberships/{membershipId}/request-revoke": {
      "patch": {
        "summary": "Request membership revocation",
        "description": {
          "text": "Request a team membership to end at a given date/time. Will need approval."
        },
        "parameters": [
          {
            "name": "membershipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "till": {
                    "type": "string",
                    "format": "date-time"
                  }
                },
                "required": [
                  "till"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update teams"
          }
        ]
      }
    },
    "/team-directory/profiles": {
      "post": {
        "summary": "Create profile",
        "description": {
          "text": "Create a profile"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "firstName": {
                    "type": "string"
                  },
                  "lastName": {
                    "type": "string"
                  },
                  "emails": {
                    "default": [],
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "phones": {
                    "default": [],
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "birthday": {
                    "nullable": true,
                    "type": "string",
                    "format": "full-date"
                  },
                  "about": {
                    "nullable": true,
                    "type": "string"
                  },
                  "messengers": {
                    "default": [],
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "links": {
                    "default": [],
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "notAMember": {
                    "default": false,
                    "type": "boolean"
                  },
                  "joined": {
                    "nullable": true,
                    "type": "string",
                    "format": "full-date"
                  },
                  "left": {
                    "nullable": true,
                    "type": "string",
                    "format": "full-date"
                  },
                  "leftAt": {
                    "nullable": true,
                    "type": "string",
                    "format": "date-time"
                  },
                  "speaksEnglish": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "pictureAttachmentId": {
                    "nullable": true,
                    "type": "string"
                  },
                  "avatarCropSquare": {
                    "nullable": true,
                    "$ref": "#/components/schemas/AvatarCropSquare"
                  },
                  "customFieldValues": {
                    "default": [],
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomFieldInputValue"
                    }
                  },
                  "externalId": {
                    "nullable": true,
                    "type": "string"
                  },
                  "location": {
                    "nullable": true,
                    "type": "string"
                  },
                  "external": {
                    "nullable": true,
                    "type": "boolean"
                  }
                },
                "required": [
                  "username",
                  "firstName",
                  "lastName"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TD_MemberProfile"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Add members"
          },
          {
            "title": "Add new guest"
          }
        ]
      },
      "get": {
        "summary": "Get all profiles",
        "description": {
          "text": "Get/search all profiles. Parameters are applied as 'AND' filters."
        },
        "parameters": [
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "name": "reportPastMembers",
            "in": "query",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "reportFutureMembers",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "teamId",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "meOnTop",
            "in": "query",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/ProfileOrder"
            }
          },
          {
            "name": "orgRelation",
            "in": "query",
            "required": false,
            "schema": {
              "default": "MEMBER",
              "$ref": "#/components/schemas/ProfileOrgRelation"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TD_MemberProfile"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View member profiles"
          }
        ]
      }
    },
    "/team-directory/profiles/email:{email}": {
      "get": {
        "summary": "Get profile by email",
        "description": {
          "text": "Get profile information by email address"
        },
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "verified",
            "in": "query",
            "required": false,
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TD_MemberProfile"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View member profiles"
          }
        ]
      }
    },
    "/team-directory/profiles/{profile}": {
      "get": {
        "summary": "Get profile",
        "description": {
          "text": "Get profile information"
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TD_MemberProfile"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View member profiles"
          }
        ]
      },
      "patch": {
        "summary": "Update profile",
        "description": {
          "text": "Update a profile. Optional parameters will be ignored when null and updated otherwise."
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "nullable": true,
                    "type": "string"
                  },
                  "firstName": {
                    "nullable": true,
                    "type": "string"
                  },
                  "lastName": {
                    "nullable": true,
                    "type": "string"
                  },
                  "emails": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "phones": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "birthday": {
                    "nullable": true,
                    "type": "string",
                    "format": "full-date"
                  },
                  "about": {
                    "nullable": true,
                    "type": "string"
                  },
                  "messengers": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "links": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "notAMember": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "joined": {
                    "nullable": true,
                    "type": "string",
                    "format": "full-date"
                  },
                  "left": {
                    "nullable": true,
                    "type": "string",
                    "format": "full-date"
                  },
                  "leftAt": {
                    "nullable": true,
                    "type": "string",
                    "format": "date-time"
                  },
                  "speaksEnglish": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "pictureAttachmentId": {
                    "nullable": true,
                    "type": "string"
                  },
                  "avatarCropSquare": {
                    "nullable": true,
                    "$ref": "#/components/schemas/AvatarCropSquare"
                  },
                  "customFieldValues": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomFieldInputValue"
                    }
                  },
                  "externalId": {
                    "nullable": true,
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TD_MemberProfile"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update member profiles"
          }
        ]
      },
      "delete": {
        "summary": "Delete profile",
        "description": {
          "text": "Delete a profile"
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TD_MemberProfile"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Delete member profile"
          }
        ]
      }
    },
    "/team-directory/profiles/{profile}/is-team-member": {
      "get": {
        "summary": "Check if profile is team member",
        "description": {
          "text": "Check if a user profile is a member of one or more teams"
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamIds",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/profiles/{profile}/reactivate": {
      "patch": {
        "summary": "Reactivate user profile",
        "description": {
          "text": "Reactivate a user profile"
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "joined": {
                    "nullable": true,
                    "type": "string",
                    "format": "full-date"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TD_MemberProfile"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update member profiles"
          }
        ]
      }
    },
    "/team-directory/profiles/{profile}/deactivate": {
      "delete": {
        "summary": "Deactivate user profile",
        "description": {
          "text": "Deactivate a user profile"
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "at",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TD_MemberProfile"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update member profiles"
          }
        ]
      }
    },
    "/team-directory/profiles/authentication-sessions/{owner}": {
      "get": {
        "summary": "Get all authentication sessions",
        "description": {
          "text": "Get the current authentication sessions for a given profile ID"
        },
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ES_AuthenticationSession"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage authentication sessions"
          }
        ]
      }
    },
    "/team-directory/profiles/authentication-sessions/{owner}/{sessionId}": {
      "delete": {
        "summary": "Terminate own authentication session",
        "description": {
          "text": "Terminate an existing authentication session. Doing so will close the session and log out."
        },
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sessionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage authentication sessions"
          }
        ]
      }
    },
    "/team-directory/profiles/dashboards/{dashboard}": {
      "get": {
        "summary": "Get dashboard",
        "parameters": [
          {
            "name": "dashboard",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "$ref": "#/components/schemas/DashboardPreferencesRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "patch": {
        "summary": "Update dashboard",
        "parameters": [
          {
            "name": "dashboard",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DashboardItemData"
                      }
                    }
                  }
                },
                "required": [
                  "data"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/profiles/oauth-consents/{owner}": {
      "get": {
        "summary": "Get OAuth consents",
        "description": {
          "text": "Get all OAuth consents for a given profile ID"
        },
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ES_OAuthConsent"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/profiles/oauth-consents/{owner}/applications/{application}": {
      "delete": {
        "summary": "Delete application",
        "description": {
          "text": "Remove a previously approved application"
        },
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "application",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/profiles/oauth-consents/{owner}/approved-scopes/{id}": {
      "delete": {
        "summary": "Delete approved scope",
        "description": {
          "text": "Remove a previously approved scope"
        },
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/profiles/oauth-consents/{owner}/internal-applications/{clientId}": {
      "delete": {
        "summary": "Delete internal application",
        "description": {
          "text": "Remove a previously approved internal application"
        },
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/profiles/oauth-consents/{owner}/refresh-tokens/{id}": {
      "delete": {
        "summary": "Delete refresh token",
        "description": {
          "text": "Remove a refresh token. This will require the client to re-authenticate."
        },
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/profiles/working-days": {
      "get": {
        "summary": "Query all working days",
        "description": {
          "text": "Returns pairs of profiles and their working days. If several working days settings are defined for the same profile then several pairs are returned."
        },
        "parameters": [
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "required": false,
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "till",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TD_ProfileWorkingDays"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View working hours"
          }
        ]
      }
    },
    "/team-directory/profiles/{profile}/2-fa/status": {
      "get": {
        "summary": "Two-factor authentication status",
        "description": {
          "text": "Get two-factor authentication status for a given profile ID. The response indicates whether two-factor authentication is active, not active, or not set up yet."
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorAuthenticationStatus"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/profiles/{profile}/2-fa/totp": {
      "post": {
        "summary": "Set up TOTP two-factor authentication",
        "description": {
          "text": "Set up two-factor authentication using TOTP (Time-based One-time Password) for a given profile ID. The response will return a QR code (base64 encoded) that can be scanned with an app to setup two-factor authentication. The code that the app generates has to be confirmed in Space to enable TOTP."
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorAuthenticationSecret"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "patch": {
        "summary": "Update TOTP two-factor authentication settings",
        "description": {
          "text": "Enable/disable two-factor authentication settings for a given profile ID"
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "enabled"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "delete": {
        "summary": "Delete current TOTP two-factor authentication settings",
        "description": {
          "text": "Remove two-factor authentication settings for a given profile ID. Previously generated TOTP (Time-based One-time Password) are rendered invalid."
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/profiles/{profile}/2-fa/totp/confirm": {
      "post": {
        "summary": "Confirm TOTP two-factor authentication settings",
        "description": {
          "text": "Confirm two-factor authentication for a given profile ID using a TOTP (Time-based One-time Password) code from an app."
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "required": [
                  "code"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/profiles/{profile}/application-passwords": {
      "post": {
        "summary": "Create application password",
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "scope": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "scope"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "first": {
                      "$ref": "#/components/schemas/ES_ApplicationPassword"
                    },
                    "second": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "first",
                    "second"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "get": {
        "summary": "Get all application passwords",
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ES_ApplicationPassword"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/profiles/{profile}/application-passwords/{passwordId}": {
      "patch": {
        "summary": "Update application password",
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "passwordId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "nullable": true,
                    "type": "string"
                  },
                  "scope": {
                    "nullable": true,
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "delete": {
        "summary": "Delete application password",
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "passwordId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/profiles/{profile}/checklists": {
      "post": {
        "summary": "Create checklist",
        "description": {
          "text": "Create a new checklist associated with the profile"
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checklist"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      },
      "get": {
        "summary": "Get all checklists",
        "description": {
          "text": "Get all existing checklists associated with the profile"
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Checklist"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      }
    },
    "/team-directory/profiles/{profile}/checklists/import": {
      "post": {
        "summary": "Import checklist",
        "description": {
          "text": "Create a new checklist associated with the profile using tab indented lines as checkable items.\nThe items with the same indent level will be placed one under the other.\nAn issue URL will be converted into the corresponding issue."
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "tabIndentedLines": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "tabIndentedLines"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checklist"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      }
    },
    "/team-directory/profiles/{profile}/checklists/{checklistId}/import": {
      "post": {
        "summary": "Import checklist lines",
        "description": {
          "text": "Tab indented lines are converted into checkable items following the same rules as in Import Checklist.\nThe result is placed inside of the specified personal checklist."
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "checklistId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetParentId": {
                    "type": "string"
                  },
                  "afterItemId": {
                    "nullable": true,
                    "type": "string"
                  },
                  "tabIndentedLines": {
                    "type": "string"
                  }
                },
                "required": [
                  "targetParentId",
                  "tabIndentedLines"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/profiles/{profile}/checklists/{checklistId}": {
      "patch": {
        "summary": "Update checklist",
        "description": {
          "text": "Update an existing checklist associated with the profile"
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "checklistId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      },
      "delete": {
        "summary": "Delete checklist",
        "description": {
          "text": "Delete an existing checklist associated with the profile"
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "checklistId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      }
    },
    "/team-directory/profiles/{profile}/checklists/starred": {
      "get": {
        "summary": "Get all starred checklists",
        "description": {
          "text": "Get all starred checklists associated with the profile"
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Checklist"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      }
    },
    "/team-directory/profiles/{profile}/checklists/{checklistId}/full-checklist-tree": {
      "get": {
        "summary": "Get full checklist tree",
        "description": {
          "text": "Get the content of a checklist associated with the profile"
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "checklistId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanItemChildren"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/profiles/{profile}/documents": {
      "post": {
        "summary": "Create document",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "folder": {
                    "$ref": "#/components/schemas/FolderIdentifier"
                  },
                  "bodyIn": {
                    "$ref": "#/components/schemas/DocumentBodyCreateIn"
                  },
                  "publicationDetailsIn": {
                    "nullable": true,
                    "$ref": "#/components/schemas/PublicationDetailsIn"
                  }
                },
                "required": [
                  "name",
                  "folder",
                  "bodyIn"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/profiles/{profile}/documents/{documentId}": {
      "get": {
        "summary": "Get document",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "patch": {
        "summary": "Update document",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "nullable": true,
                    "type": "string"
                  },
                  "updateIn": {
                    "nullable": true,
                    "$ref": "#/components/schemas/DocumentBodyUpdateIn"
                  },
                  "publicationDetailsIn": {
                    "nullable": true,
                    "$ref": "#/components/schemas/PublicationDetailsIn"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "delete": {
        "summary": "Archive document",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/profiles/{profile}/documents/folders": {
      "post": {
        "summary": "Create folder",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "parentFolder": {
                    "$ref": "#/components/schemas/FolderIdentifier"
                  }
                },
                "required": [
                  "name",
                  "parentFolder"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentFolder"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/profiles/{profile}/documents/folders/{folder}": {
      "get": {
        "summary": "Get folder",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folder",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentFolder"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "patch": {
        "summary": "Rename folder",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folder",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "delete": {
        "summary": "Archive folder",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folder",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/profiles/{profile}/documents/folders/{folder}/documents": {
      "get": {
        "summary": "List documents in folder",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folder",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withArchived",
            "in": "query",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/ColumnSortOrder"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Document"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/profiles/{profile}/documents/folders/{folder}/introduction/{documentId}": {
      "patch": {
        "summary": "Add folder introduction",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folder",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/profiles/{profile}/documents/folders/{folder}/introduction": {
      "delete": {
        "summary": "Remove folder introduction",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folder",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/profiles/{profile}/documents/folders/{folder}/move": {
      "patch": {
        "summary": "Move folder",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folder",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "parentFolder": {
                    "$ref": "#/components/schemas/FolderIdentifier"
                  }
                },
                "required": [
                  "parentFolder"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentFolder"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/profiles/{profile}/documents/folders/{folder}/subfolders": {
      "get": {
        "summary": "List subfolders",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folder",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withArchived",
            "in": "query",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/ColumnSortOrder"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DocumentFolder"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/profiles/{profile}/documents/{documentId}/copy": {
      "post": {
        "summary": "Copy document",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "folder": {
                    "$ref": "#/components/schemas/FolderIdentifier"
                  }
                },
                "required": [
                  "name",
                  "folder"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/profiles/{profile}/documents/{documentId}/move": {
      "patch": {
        "summary": "Move document",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "folder": {
                    "$ref": "#/components/schemas/FolderIdentifier"
                  }
                },
                "required": [
                  "folder"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/profiles/{profile}/documents/{documentId}/unarchive": {
      "patch": {
        "summary": "Unarchive document",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/profiles/{profile}/gpg-keys": {
      "post": {
        "summary": "Add public GPG key",
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string"
                  },
                  "comment": {
                    "default": "",
                    "type": "string"
                  }
                },
                "required": [
                  "key"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GpgKeyData"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update member profiles"
          }
        ]
      },
      "get": {
        "summary": "List public GPG keys",
        "description": {
          "text": "List GPG public keys associated with a profile"
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GpgKeyData"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": []
      }
    },
    "/team-directory/profiles/{profile}/gpg-keys/{fingerprint}": {
      "patch": {
        "summary": "Revoke public GPG key",
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fingerprint",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "default": "",
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update member profiles"
          }
        ]
      },
      "delete": {
        "summary": "Delete public GPG key",
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fingerprint",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update member profiles"
          }
        ]
      }
    },
    "/team-directory/profiles/{profile}/leads": {
      "get": {
        "summary": "Get all leads",
        "description": {
          "text": "Get team leads for a given profile ID"
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TD_MemberProfile"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "deprecated": true
      }
    },
    "/team-directory/profiles/{profile}/nav-bar-menu-items": {
      "get": {
        "summary": "Get all nav bar menu items",
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NavBarMenuItem"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "patch": {
        "summary": "Update nav bar menu item",
        "description": {
          "text": "Toggle visibility for a given navigation bar item"
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "item": {
                    "type": "string"
                  },
                  "enabled": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "item",
                  "enabled"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/profiles/{profile}/nav-bar-projects": {
      "post": {
        "summary": "Create nav bar project",
        "description": {
          "text": "Add a project to the navigation bar"
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "project": {
                    "$ref": "#/components/schemas/ProjectIdentifier"
                  }
                },
                "required": [
                  "project"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "get": {
        "summary": "Get all nav bar projects",
        "description": {
          "text": "Add a project to the navigation bar"
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PR_Project"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/profiles/{profile}/nav-bar-projects/{project}": {
      "delete": {
        "summary": "Delete nav bar project",
        "description": {
          "text": "Remove a project from the navigation bar"
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/profiles/{profile}/notification-settings": {
      "get": {
        "summary": "Get Space global notification settings for a profile",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalNotificationSettings"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "patch": {
        "summary": "Set Space global notification settings for a profile",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "emailNotificationsEnabled": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "notificationEmail": {
                    "nullable": true,
                    "type": "string"
                  },
                  "pushNotificationEnabled": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "desktopInactivityTimeout": {
                    "nullable": true,
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/profiles/{profile}/permanent-tokens": {
      "post": {
        "summary": "Create permanent token",
        "description": {
          "text": "Create a personal token for the given profile that can be used to access the current organisation"
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "scope": {
                    "type": "string"
                  },
                  "expires": {
                    "nullable": true,
                    "type": "string",
                    "format": "date-time"
                  }
                },
                "required": [
                  "name",
                  "scope"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "first": {
                      "$ref": "#/components/schemas/ES_PersonalToken"
                    },
                    "second": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "first",
                    "second"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Create permanent tokens for yourself"
          }
        ]
      },
      "get": {
        "summary": "Get all permanent tokens",
        "description": {
          "text": "Get personal tokens used to access the current organisation for the given profile"
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ES_PersonalToken"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage permanent tokens"
          }
        ]
      }
    },
    "/team-directory/profiles/{profile}/permanent-tokens/{tokenId}": {
      "patch": {
        "summary": "Update permanent token",
        "description": {
          "text": "Update an existing personal token used to access the current organisation. The name and/or scope of the personal token can be updated."
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "nullable": true,
                    "type": "string"
                  },
                  "scope": {
                    "nullable": true,
                    "type": "string"
                  },
                  "expires": {
                    "nullable": true,
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage permanent tokens"
          }
        ]
      },
      "delete": {
        "summary": "Delete permanent token",
        "description": {
          "text": "Delete a specific personal token used to access the current organisation"
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Manage permanent tokens"
          }
        ]
      }
    },
    "/team-directory/profiles/{profile}/permanent-tokens/current": {
      "delete": {
        "summary": "Delete current permanent token",
        "description": {
          "text": "Delete personal token of the given profile"
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": []
      }
    },
    "/team-directory/profiles/{profile}/settings": {
      "get": {
        "summary": "Get Space personalization data for a profile",
        "description": {
          "text": "This endpoint will return profile information and Space personalisation data such as projects in the navigation bar, etc."
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsValue"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "patch": {
        "summary": "Set Space personalization data for a profile",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "darkTheme": {
                    "nullable": true,
                    "$ref": "#/components/schemas/DarkTheme"
                  },
                  "themeName": {
                    "nullable": true,
                    "type": "string"
                  },
                  "firstDayOfWeek": {
                    "nullable": true,
                    "$ref": "#/components/schemas/Weekday"
                  },
                  "draftType": {
                    "nullable": true,
                    "$ref": "#/components/schemas/DraftDocumentType"
                  },
                  "typographySettings": {
                    "nullable": true,
                    "$ref": "#/components/schemas/TypographySettings"
                  },
                  "todoFilters": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "calendarView": {
                    "nullable": true,
                    "type": "string"
                  },
                  "emailNotificationsEnabled": {
                    "nullable": true,
                    "type": "boolean"
                  },
                  "notificationEmail": {
                    "nullable": true,
                    "type": "string"
                  },
                  "preferredLanguage": {
                    "nullable": true,
                    "type": "string"
                  },
                  "defaultProject": {
                    "nullable": true,
                    "$ref": "#/components/schemas/ProjectIdentifier"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/team-directory/profiles/{profile}/spoken-languages": {
      "post": {
        "summary": "Create spoken language",
        "description": {
          "text": "Update spoken language for a profile. Optionally, firstName and lastName can be specified to add a localized name to the profile."
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "language": {
                    "type": "string"
                  },
                  "firstName": {
                    "nullable": true,
                    "type": "string"
                  },
                  "lastName": {
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "language"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TD_ProfileLanguage"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update languages"
          }
        ]
      },
      "get": {
        "summary": "Get all spoken languages",
        "description": {
          "text": "Get spoken language of a profile"
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TD_ProfileLanguage"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View member locations"
          }
        ]
      }
    },
    "/team-directory/profiles/{profile}/spoken-languages/{language}": {
      "delete": {
        "summary": "Delete spoken language",
        "description": {
          "text": "Delete spoken language for a profile"
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update languages"
          }
        ]
      }
    },
    "/team-directory/profiles/{profile}/ssh-keys": {
      "post": {
        "summary": "Associate SSH key with profile",
        "description": {
          "text": "Associate an SSH public key with the profile"
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string"
                  },
                  "comment": {
                    "default": "",
                    "type": "string"
                  }
                },
                "required": [
                  "key"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update member profiles"
          }
        ]
      },
      "get": {
        "summary": "Get all SSH keys",
        "description": {
          "text": "List SSH public keys associated with the profile"
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SshKeyData"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": []
      }
    },
    "/team-directory/profiles/{profile}/ssh-keys/{fingerprint}": {
      "delete": {
        "summary": "Remove association between SSH key and profile",
        "description": {
          "text": "Remove association between the profile and the SSH public key"
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fingerprint",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update member profiles"
          }
        ]
      }
    },
    "/team-directory/profiles/{profile}/timezone": {
      "get": {
        "summary": "Get timezone",
        "description": {
          "text": "Get profile timezone. Returns profile's working hours timezone, location timezone or device timezone, whichever is present first in this list."
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ATimeZone"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View member profiles"
          }
        ]
      }
    },
    "/team-directory/profiles/{profile}/working-days": {
      "post": {
        "summary": "Add working days",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "dateStart": {
                    "nullable": true,
                    "type": "string",
                    "format": "full-date"
                  },
                  "dateEnd": {
                    "nullable": true,
                    "type": "string",
                    "format": "full-date"
                  },
                  "workingDaysSpec": {
                    "$ref": "#/components/schemas/WorkingDaysSpec"
                  }
                },
                "required": [
                  "workingDaysSpec"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TD_WorkingDays"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update working hours"
          }
        ]
      },
      "get": {
        "summary": "Query working days for a profile",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TD_WorkingDays"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View working hours"
          }
        ]
      }
    },
    "/team-directory/profiles/{profile}/working-days/{workingDaysId}": {
      "patch": {
        "summary": "Update working days",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workingDaysId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "dateStart": {
                    "nullable": true,
                    "type": "string",
                    "format": "full-date"
                  },
                  "dateEnd": {
                    "nullable": true,
                    "type": "string",
                    "format": "full-date"
                  },
                  "workingDaysSpec": {
                    "$ref": "#/components/schemas/WorkingDaysSpec"
                  }
                },
                "required": [
                  "workingDaysSpec"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TD_WorkingDays"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update working hours"
          }
        ]
      },
      "delete": {
        "summary": "Delete working days",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workingDaysId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update working hours"
          }
        ]
      }
    },
    "/team-directory/roles": {
      "post": {
        "summary": "Create role",
        "description": {
          "text": "Create a role"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "parentId": {
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TD_Role"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update positions"
          }
        ]
      },
      "get": {
        "summary": "Get all roles",
        "description": {
          "text": "Get/search all roles. Parameters are applied as 'AND' filters."
        },
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "name": "withArchived",
            "in": "query",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TD_Role"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View positions"
          }
        ]
      }
    },
    "/team-directory/roles/{id}/restore": {
      "post": {
        "summary": "Restore role",
        "description": {
          "text": "Restore an archived role"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TD_Role"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update positions"
          }
        ]
      }
    },
    "/team-directory/roles/{id}": {
      "get": {
        "summary": "Get role",
        "description": {
          "text": "Get a role by ID"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "$ref": "#/components/schemas/TD_Role"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View positions"
          }
        ]
      },
      "patch": {
        "summary": "Update role",
        "description": {
          "text": "Update a role. Optional parameters will be ignored when null and updated otherwise."
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "nullable": true,
                    "type": "string"
                  },
                  "parentId": {
                    "nullable": true,
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TD_Role"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update positions"
          }
        ]
      },
      "delete": {
        "summary": "Archive role",
        "description": {
          "text": "Archive a role"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update positions"
          }
        ]
      }
    },
    "/team-directory/stats": {
      "get": {
        "summary": "Get all stats",
        "description": {
          "text": "Get statistics of total members, as well as members per location, role, and team. Parameters are applied as 'AND' filters."
        },
        "parameters": [
          {
            "name": "teamId",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TD_Stats"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View teams"
          },
          {
            "title": "View locations"
          },
          {
            "title": "View positions"
          }
        ]
      }
    },
    "/team-directory/teams": {
      "post": {
        "summary": "Create team",
        "description": {
          "text": "Create a new team"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  },
                  "emails": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "parentId": {
                    "nullable": true,
                    "type": "string"
                  },
                  "defaultManager": {
                    "nullable": true,
                    "type": "string"
                  },
                  "customFieldValues": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomFieldInputValue"
                    }
                  },
                  "externalId": {
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TD_Team"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update teams"
          }
        ]
      },
      "get": {
        "summary": "Get all teams",
        "description": {
          "text": "Get or search all teams. Parameters are applied as 'AND' filters."
        },
        "parameters": [
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "name": "withArchived",
            "in": "query",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TD_Team"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View teams"
          }
        ]
      }
    },
    "/team-directory/teams/{id}/cancel-disbanding": {
      "post": {
        "summary": "Cancel team disbanding",
        "description": {
          "text": "Cancel disbanding a team and restore its members"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update teams"
          }
        ]
      }
    },
    "/team-directory/teams/{id}/restore": {
      "post": {
        "summary": "Restore team",
        "description": {
          "text": "Restore an archived team"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TD_Team"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update teams"
          }
        ]
      }
    },
    "/team-directory/teams/{id}": {
      "get": {
        "summary": "Get team",
        "description": {
          "text": "Get a team by ID"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "$ref": "#/components/schemas/TD_Team"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View teams"
          }
        ]
      },
      "patch": {
        "summary": "Update team",
        "description": {
          "text": "Update a team"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "nullable": true,
                    "type": "string"
                  },
                  "emails": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "parentId": {
                    "nullable": true,
                    "type": "string"
                  },
                  "defaultManager": {
                    "nullable": true,
                    "type": "string"
                  },
                  "customFieldValues": {
                    "nullable": true,
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomFieldInputValue"
                    }
                  },
                  "externalId": {
                    "nullable": true,
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TD_Team"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update teams"
          }
        ]
      },
      "delete": {
        "summary": "Archive team",
        "description": {
          "text": "Archive a team"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TD_Team"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update teams"
          }
        ]
      }
    },
    "/team-directory/teams/{id}/disband": {
      "delete": {
        "summary": "Disband team",
        "description": {
          "text": "Disband a team"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TD_Team"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update teams"
          }
        ]
      }
    },
    "/team-directory/teams/{id}/direct-members": {
      "get": {
        "summary": "Get all direct members",
        "description": {
          "text": "Get or search direct members of a given team"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TD_MemberProfile"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/todo": {
      "post": {
        "summary": "Create to-do item",
        "description": {
          "text": "Create a new To-Do item, with an optional due date"
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string"
                  },
                  "dueDate": {
                    "nullable": true,
                    "type": "string",
                    "format": "full-date"
                  }
                },
                "required": [
                  "text"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TodoItemRecord"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update to-dos"
          }
        ]
      },
      "get": {
        "summary": "Get all to-do items",
        "description": {
          "text": "Get all To-Do items that match given parameters. Parameters are applied as 'AND' filters."
        },
        "parameters": [
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "open",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "till",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string",
              "format": "full-date"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TodoItemRecord"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "View to-dos"
          }
        ]
      }
    },
    "/todo/{id}": {
      "patch": {
        "summary": "Update to-do item",
        "description": {
          "text": "Update an existing To-Do item. Optional parameters will be ignored when not specified and updated otherwise."
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "text": {
                    "nullable": true,
                    "type": "string"
                  },
                  "dueDate": {
                    "nullable": true,
                    "type": "string",
                    "format": "full-date"
                  },
                  "open": {
                    "nullable": true,
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update to-dos"
          }
        ]
      },
      "delete": {
        "summary": "Delete to-do item",
        "description": {
          "text": "Delete an existing To-Do item"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "x-rights": [
          {
            "title": "Update to-dos"
          }
        ]
      }
    },
    "/trusted-certificates": {
      "post": {
        "summary": "Create trusted certificate",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "alias": {
                    "type": "string"
                  },
                  "data": {
                    "type": "string"
                  },
                  "archived": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "alias",
                  "data",
                  "archived"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrustedCertificate"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "get": {
        "summary": "Get all trusted certificates",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TrustedCertificate"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/trusted-certificates/info": {
      "get": {
        "summary": "Get certificate info",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "data",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateInfo"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/trusted-certificates/{id}": {
      "patch": {
        "summary": "Update trusted certificate",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "alias": {
                    "nullable": true,
                    "type": "string"
                  },
                  "data": {
                    "nullable": true,
                    "type": "string"
                  },
                  "archived": {
                    "nullable": true,
                    "default": false,
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      },
      "delete": {
        "summary": "Delete trusted certificate",
        "description": {
          "text": ""
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/unfurls/block-unfurl": {
      "post": {
        "summary": "Block link unfurling",
        "description": {
          "text": "Block link unfurling"
        },
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "link": {
                    "type": "string"
                  },
                  "wholeHost": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "link",
                  "wholeHost"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/unfurls/block-unfurl-global": {
      "post": {
        "summary": "Block link unfurling for organization",
        "description": {
          "text": "Block link unfurling for organization"
        },
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "link": {
                    "type": "string"
                  },
                  "wholeHost": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "link",
                  "wholeHost"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/unfurls/check-blocked": {
      "post": {
        "summary": "Check if unfurl is blocked",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "link": {
                    "type": "string"
                  }
                },
                "required": [
                  "link"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/unfurls/unblock-unfurl": {
      "post": {
        "summary": "Unblock link unfurling",
        "description": {
          "text": "Unblock link unfurling"
        },
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "link": {
                    "type": "string"
                  },
                  "wholeHost": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "link",
                  "wholeHost"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/unfurls/unblock-unfurl-global": {
      "post": {
        "summary": "Unblock link unfurling for organization",
        "description": {
          "text": "Unblock link unfurling for organization"
        },
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "link": {
                    "type": "string"
                  },
                  "wholeHost": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "link",
                  "wholeHost"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/unfurls/list-blocked": {
      "get": {
        "summary": "List blocked unfurls",
        "parameters": [
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "schema": {
              "nullable": true,
              "default": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "next": {
                      "type": "string"
                    },
                    "totalCount": {
                      "nullable": true,
                      "type": "integer",
                      "format": "int32"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UnfurlsBlockListEntry"
                      }
                    }
                  },
                  "required": [
                    "next",
                    "data"
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/uploads": {
      "post": {
        "summary": "Create upload",
        "description": {
          "text": "Request a URL that can be used to upload an attachment.\nAn attachment can be uploaded to the URL that is returned, by making a PUT request that has a proper content-type header and the attachment data as the request body. The PUT request returns a string that is an id of the uploaded attachment. The attachment id can be passed to other API methods where this attachment needs to be used.\nThe 'storagePrefix' parameter can be one of file, maps, emoji or attachments.\nThe 'mediaType' parameter can be omitted for all uploads. For image uploads that need to be resized automatically for specific use, such as chat stickers or emoji, use one of `chat-image-attachment`, `chat-sticker`, `emoji`."
        },
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "storagePrefix": {
                    "type": "string"
                  },
                  "mediaType": {
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "storagePrefix"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    },
    "/uploads/image/{id}": {
      "get": {
        "summary": "Get image attachment metadata",
        "description": {
          "text": "Get meta information for a previously uploaded image"
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$fields",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "$ref": "#/components/schemas/ImageAttachmentMeta"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ATimeZone": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "ATimeZoneWithOffset": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "id",
          "offset"
        ]
      },
      "AbsenceApproval": {
        "type": "object",
        "properties": {
          "approved": {
            "type": "boolean"
          },
          "approvedBy": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "approvedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "approved",
          "approvedBy",
          "approvedAt"
        ]
      },
      "AbsenceApprovalWebhookEvent": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/KMetaMod"
          },
          "absence": {
            "$ref": "#/components/schemas/AbsenceRecord"
          },
          "member": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "approved": {
            "type": "object",
            "properties": {
              "old": {
                "type": "boolean"
              },
              "new": {
                "type": "boolean"
              }
            },
            "required": [
              "old",
              "new"
            ]
          }
        },
        "required": [
          "meta",
          "absence",
          "member",
          "approved"
        ]
      },
      "AbsenceCommonSubscriptionFilter": {
        "type": "object",
        "properties": {
          "reasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AbsenceReasonRecord"
            }
          }
        },
        "required": [
          "reasons"
        ]
      },
      "AbsenceCommonSubscriptionFilterIn": {
        "type": "object",
        "properties": {
          "reasons": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "reasons"
        ]
      },
      "AbsenceEvent": {
        "type": "object",
        "properties": {
          "profile": {
            "$ref": "#/components/schemas/TD_MemberWithTeam"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AbsenceRecord"
            }
          }
        },
        "required": [
          "profile",
          "events"
        ]
      },
      "AbsenceReasonRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "defaultAvailability": {
            "type": "boolean"
          },
          "approvalRequired": {
            "type": "boolean"
          },
          "icon": {
            "type": "string"
          },
          "etag": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "id",
          "archived",
          "name",
          "description",
          "defaultAvailability",
          "approvalRequired",
          "icon"
        ]
      },
      "AbsenceRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "member": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "icon": {
            "type": "string"
          },
          "reason": {
            "nullable": true,
            "$ref": "#/components/schemas/AbsenceReasonRecord"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "since": {
            "type": "string",
            "format": "full-date"
          },
          "till": {
            "type": "string",
            "format": "full-date"
          },
          "location": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_Location"
          },
          "available": {
            "type": "boolean"
          },
          "approval": {
            "nullable": true,
            "$ref": "#/components/schemas/AbsenceApproval"
          },
          "customFields": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CFValue"
            }
          }
        },
        "required": [
          "id",
          "archived",
          "member",
          "icon",
          "since",
          "till",
          "available",
          "customFields"
        ]
      },
      "AbsenceWebhookEvent": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/KMetaMod"
          },
          "absence": {
            "$ref": "#/components/schemas/AbsenceRecord"
          },
          "member": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "icon": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "string"
              },
              "new": {
                "type": "string"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "reason": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "$ref": "#/components/schemas/AbsenceReasonRecord"
              },
              "new": {
                "$ref": "#/components/schemas/AbsenceReasonRecord"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "description": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "string"
              },
              "new": {
                "type": "string"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "since": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "string",
                "format": "full-date"
              },
              "new": {
                "type": "string",
                "format": "full-date"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "till": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "string",
                "format": "full-date"
              },
              "new": {
                "type": "string",
                "format": "full-date"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "location": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "$ref": "#/components/schemas/TD_Location"
              },
              "new": {
                "$ref": "#/components/schemas/TD_Location"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "available": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "boolean"
              },
              "new": {
                "type": "boolean"
              }
            },
            "required": [
              "old",
              "new"
            ]
          }
        },
        "required": [
          "meta",
          "absence",
          "member"
        ]
      },
      "AccessRecord": {
        "type": "object",
        "properties": {
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "address": {
            "type": "string"
          },
          "userAgent": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "time",
          "address"
        ]
      },
      "AdHocConnectedAppMetadata": {
        "type": "object",
        "properties": {
          "lastSentServerUrl": {
            "nullable": true,
            "type": "string"
          },
          "connectionStatus": {
            "nullable": true,
            "$ref": "#/components/schemas/AppConnectionStatus"
          }
        }
      },
      "AllChannelsListEntry": {
        "type": "object",
        "properties": {
          "channelId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "access": {
            "$ref": "#/components/schemas/M2.Access"
          },
          "icon": {
            "nullable": true,
            "type": "string"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "subscribers": {
            "type": "integer",
            "format": "int32"
          },
          "subscribed": {
            "type": "boolean"
          }
        },
        "required": [
          "channelId",
          "name",
          "description",
          "access",
          "created",
          "subscribers",
          "subscribed"
        ]
      },
      "AllReactionsToItemRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "emojiReactions": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmojiReactionRecord"
            }
          }
        },
        "required": [
          "id"
        ]
      },
      "ApiIcon": {
        "type": "object",
        "properties": {
          "icon": {
            "type": "string"
          }
        },
        "required": [
          "icon"
        ]
      },
      "AppMessageDeliveryClientErrorDTO": {
        "type": "object",
        "properties": {
          "className": {
            "type": "string"
          },
          "message": {
            "nullable": true,
            "type": "string"
          },
          "causeClassName": {
            "nullable": true,
            "type": "string"
          },
          "causeMessage": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "className"
        ]
      },
      "AppParameter": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ]
      },
      "AppPublicationCheckPayload": {
        "type": "object",
        "properties": {}
      },
      "AppUiEnabledState": {
        "type": "object",
        "properties": {
          "enabledByDefault": {
            "type": "boolean"
          },
          "enabledForMe": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "enabledByDefault"
        ]
      },
      "AppUiExtContextData": {
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/PermissionContextApi"
          },
          "extensions": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppUiExtensionApi"
            }
          },
          "appUiEnabledState": {
            "$ref": "#/components/schemas/AppUiEnabledState"
          }
        },
        "required": [
          "context",
          "appUiEnabledState"
        ]
      },
      "AppUiExtensionApi": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ApplicationHomepageUiExtensionApi"
          },
          {
            "$ref": "#/components/schemas/ChatMessageMenuItemUiExtensionApi"
          },
          {
            "$ref": "#/components/schemas/IssueMenuItemUiExtensionApi"
          },
          {
            "$ref": "#/components/schemas/MeetingMenuItemUiExtensionApi"
          },
          {
            "$ref": "#/components/schemas/DocumentMenuItemUiExtensionApi"
          },
          {
            "$ref": "#/components/schemas/DocumentFolderMenuItemUiExtensionApi"
          },
          {
            "$ref": "#/components/schemas/ChatBotUiExtensionApi"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "AppUiExtensionIn": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ApplicationHomepageUiExtensionIn"
          },
          {
            "$ref": "#/components/schemas/ChatBotUiExtensionIn"
          },
          {
            "$ref": "#/components/schemas/DocumentMenuItemUiExtensionIn"
          },
          {
            "$ref": "#/components/schemas/ChatMessageMenuItemUiExtensionIn"
          },
          {
            "$ref": "#/components/schemas/DocumentFolderMenuItemUiExtensionIn"
          },
          {
            "$ref": "#/components/schemas/MeetingMenuItemUiExtensionIn"
          },
          {
            "$ref": "#/components/schemas/IssueMenuItemUiExtensionIn"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "AppUserActionExecutionResult": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/AppUserActionExecutionResult.AuthCodeFlowRequired"
          },
          {
            "$ref": "#/components/schemas/AppUserActionExecutionResult.Failure"
          },
          {
            "$ref": "#/components/schemas/AppUserActionExecutionResult.Success"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "AppUserActionExecutionResult.AuthCodeFlowRequired": {
        "type": "object",
        "properties": {
          "permissionsToRequest": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthCodeFlowPermissionsRequest"
            }
          }
        },
        "required": [
          "permissionsToRequest"
        ]
      },
      "AppUserActionExecutionResult.Failure": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "AppUserActionExecutionResult.Success": {
        "type": "object",
        "properties": {
          "message": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "ApplicationAuthorizationRequestedEvent": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/KMetaMod"
          },
          "application": {
            "$ref": "#/components/schemas/ES_App"
          },
          "scope": {
            "$ref": "#/components/schemas/AuthScope"
          }
        },
        "required": [
          "meta",
          "application",
          "scope"
        ]
      },
      "ApplicationAuthorizedWebhookEvent": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/KMetaMod"
          },
          "application": {
            "$ref": "#/components/schemas/ES_App"
          },
          "scope": {
            "$ref": "#/components/schemas/AuthScope"
          }
        },
        "required": [
          "meta",
          "application",
          "scope"
        ]
      },
      "ApplicationHomepageUiExtensionApi": {
        "type": "object",
        "properties": {
          "iframeUrl": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "ApplicationHomepageUiExtensionIn": {
        "type": "object",
        "properties": {
          "iframeUrl": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "ApplicationMetadata": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/AutomationServiceMetadata"
          },
          {
            "$ref": "#/components/schemas/SubscriptionMetadata"
          },
          {
            "$ref": "#/components/schemas/AdHocConnectedAppMetadata"
          },
          {
            "$ref": "#/components/schemas/MarketplaceAppMetadata"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ApplicationPayload": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/RefreshTokenPayload"
          },
          {
            "$ref": "#/components/schemas/MessageActionPayload"
          },
          {
            "$ref": "#/components/schemas/MessagePayload"
          },
          {
            "$ref": "#/components/schemas/UnfurlActionPayload"
          },
          {
            "$ref": "#/components/schemas/InitPayload"
          },
          {
            "$ref": "#/components/schemas/MenuActionPayload"
          },
          {
            "$ref": "#/components/schemas/ListCommandsPayload"
          },
          {
            "$ref": "#/components/schemas/NewUnfurlQueueItemsPayload"
          },
          {
            "$ref": "#/components/schemas/AppPublicationCheckPayload"
          },
          {
            "$ref": "#/components/schemas/ChangeServerUrlPayload"
          },
          {
            "$ref": "#/components/schemas/ChangeClientSecretPayload"
          },
          {
            "$ref": "#/components/schemas/WebhookRequestPayload"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ApplicationSshKeyWebhookEvent": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/KMetaMod"
          },
          "application": {
            "$ref": "#/components/schemas/ES_App"
          },
          "fingerprint": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "string"
              },
              "new": {
                "type": "string"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "comment": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "string"
              },
              "new": {
                "type": "string"
              }
            },
            "required": [
              "old",
              "new"
            ]
          }
        },
        "required": [
          "meta",
          "application"
        ]
      },
      "ApplicationUnfurl": {
        "type": "object",
        "properties": {
          "queueItemId": {
            "type": "string"
          },
          "content": {
            "$ref": "#/components/schemas/ApplicationUnfurlContent"
          }
        },
        "required": [
          "queueItemId",
          "content"
        ]
      },
      "ApplicationUnfurlContent": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ApplicationUnfurlContent.Image"
          },
          {
            "$ref": "#/components/schemas/ApplicationUnfurlContent.Message"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ApplicationUnfurlContent.Image": {
        "type": "object",
        "properties": {
          "icon": {
            "nullable": true,
            "$ref": "#/components/schemas/ApiIcon"
          },
          "title": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "url"
        ]
      },
      "ApplicationUnfurlContent.Message": {
        "type": "object",
        "properties": {
          "style": {
            "$ref": "#/components/schemas/MessageStyle"
          },
          "outline": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageOutline"
          },
          "sections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageSectionElement"
            }
          }
        },
        "required": [
          "style",
          "sections"
        ]
      },
      "ApplicationUnfurlContext": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/TodoItemUnfurlContext"
          },
          {
            "$ref": "#/components/schemas/CodeReviewUnfurlContext"
          },
          {
            "$ref": "#/components/schemas/ArticleAppUnfurlContext"
          },
          {
            "$ref": "#/components/schemas/CommitMessageUnfurlContext"
          },
          {
            "$ref": "#/components/schemas/IssueUnfurlContext"
          },
          {
            "$ref": "#/components/schemas/ChatMessageUnfurlContext"
          },
          {
            "$ref": "#/components/schemas/DocumentAppUnfurlContext"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ApplicationUnfurlDomain": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/RightStatus"
          },
          "modificationAuthor": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipal"
          },
          "modificationTimestamp": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "domain",
          "status"
        ]
      },
      "ApplicationUnfurlPattern": {
        "type": "object",
        "properties": {
          "prefix": {
            "type": "string"
          },
          "linkReplacement": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/RightStatus"
          },
          "modificationAuthor": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipal"
          },
          "modificationTimestamp": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "prefix",
          "linkReplacement",
          "status"
        ]
      },
      "ApplicationUnfurlPatternRequest": {
        "type": "object",
        "properties": {
          "prefix": {
            "type": "string"
          },
          "linkReplacement": {
            "type": "string"
          }
        },
        "required": [
          "prefix",
          "linkReplacement"
        ]
      },
      "ApplicationUnfurlQueueItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "target": {
            "type": "string"
          },
          "context": {
            "nullable": true,
            "$ref": "#/components/schemas/ApplicationUnfurlContext"
          },
          "authorUserId": {
            "nullable": true,
            "$ref": "#/components/schemas/ProfileIdentifier"
          },
          "etag": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "id",
          "target",
          "etag"
        ]
      },
      "ApplicationUnfurlQueueItemsCreatedEvent": {
        "type": "object",
        "properties": {}
      },
      "ApplicationUnfurlTarget": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ApplicationUnfurlTarget.Domain"
          },
          {
            "$ref": "#/components/schemas/ApplicationUnfurlTarget.Pattern"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ApplicationUnfurlTarget.Domain": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string"
          }
        },
        "required": [
          "domain"
        ]
      },
      "ApplicationUnfurlTarget.Pattern": {
        "type": "object",
        "properties": {
          "pattern": {
            "type": "string"
          }
        },
        "required": [
          "pattern"
        ]
      },
      "ApplicationUnfurlTargetWebhookEvent": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/KMetaMod"
          },
          "application": {
            "$ref": "#/components/schemas/ES_App"
          },
          "target": {
            "$ref": "#/components/schemas/ApplicationUnfurlTarget"
          }
        },
        "required": [
          "meta",
          "application",
          "target"
        ]
      },
      "ApplicationWebhookEvent": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/KMetaMod"
          },
          "application": {
            "$ref": "#/components/schemas/ES_App"
          },
          "name": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "string"
              },
              "new": {
                "type": "string"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "owner": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "$ref": "#/components/schemas/TD_MemberProfile"
              },
              "new": {
                "$ref": "#/components/schemas/TD_MemberProfile"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "archived": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "boolean"
              },
              "new": {
                "type": "boolean"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "endpointURI": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "string"
              },
              "new": {
                "type": "string"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "clientIdChanged": {
            "type": "boolean"
          },
          "clientSecretChanged": {
            "type": "boolean"
          },
          "verificationTokenChanged": {
            "type": "boolean"
          },
          "signingKeyChanged": {
            "type": "boolean"
          }
        },
        "required": [
          "meta",
          "application",
          "clientIdChanged",
          "clientSecretChanged",
          "verificationTokenChanged",
          "signingKeyChanged"
        ]
      },
      "ApplicationsSubscriptionFilter": {
        "type": "object",
        "properties": {
          "application": {
            "nullable": true,
            "$ref": "#/components/schemas/ES_App"
          }
        }
      },
      "ApplicationsSubscriptionFilterIn": {
        "type": "object",
        "properties": {
          "application": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "ArticleAppUnfurlContext": {
        "type": "object",
        "properties": {
          "articleId": {
            "type": "string"
          }
        },
        "required": [
          "articleId"
        ]
      },
      "ArticleChannelRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "channel": {
            "$ref": "#/components/schemas/M2ChannelRecord"
          },
          "channelContent": {
            "nullable": true,
            "$ref": "#/components/schemas/M2ChannelContentRecord"
          },
          "reactions": {
            "$ref": "#/components/schemas/AllReactionsToItemRecord"
          }
        },
        "required": [
          "id",
          "archived",
          "channel",
          "reactions"
        ]
      },
      "ArticleContentRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "content": {
            "type": "string"
          },
          "attachments": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentInfo"
            }
          }
        },
        "required": [
          "id",
          "archived",
          "content"
        ]
      },
      "ArticleDetailsRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "event": {
            "nullable": true,
            "$ref": "#/components/schemas/MeetingRecord"
          },
          "teams": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_Team"
            }
          },
          "locations": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_Location"
            }
          },
          "externalEntityInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/ExternalEntityInfoRecord"
          }
        },
        "required": [
          "id",
          "archived"
        ]
      },
      "ArticleImportResult": {
        "type": "object",
        "properties": {
          "externalId": {
            "nullable": true,
            "type": "string"
          },
          "article": {
            "nullable": true,
            "$ref": "#/components/schemas/ArticleRecord"
          },
          "error": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "ArticleMarkdownImage": {
        "type": "object",
        "properties": {
          "alt": {
            "type": "string"
          },
          "src": {
            "type": "string"
          }
        },
        "required": [
          "alt",
          "src"
        ]
      },
      "ArticlePreviewRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "previewImages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ArticleMarkdownImage"
            }
          },
          "preview": {
            "type": "string"
          },
          "previewAttachments": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentInfo"
            }
          },
          "wordsNumber": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "cut": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "archived",
          "previewImages",
          "preview"
        ]
      },
      "ArticleRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "author": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "aliases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BG_ArticleAlias"
            }
          },
          "archivedBy": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "archivedAt": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "previewImages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ArticleMarkdownImage"
            }
          },
          "preview": {
            "type": "string"
          },
          "previewAttachments": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentInfo"
            }
          },
          "wordsNumber": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "cut": {
            "nullable": true,
            "type": "boolean"
          },
          "content": {
            "type": "string"
          },
          "attachments": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentInfo"
            }
          },
          "channel": {
            "$ref": "#/components/schemas/M2ChannelRecord"
          },
          "channelContent": {
            "nullable": true,
            "$ref": "#/components/schemas/M2ChannelContentRecord"
          },
          "reactions": {
            "$ref": "#/components/schemas/AllReactionsToItemRecord"
          },
          "editable": {
            "type": "boolean"
          },
          "event": {
            "nullable": true,
            "$ref": "#/components/schemas/MeetingRecord"
          },
          "teams": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_Team"
            }
          },
          "locations": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_Location"
            }
          },
          "externalEntityInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/ExternalEntityInfoRecord"
          }
        },
        "required": [
          "id",
          "archived",
          "title",
          "created",
          "author",
          "aliases",
          "previewImages",
          "preview",
          "content",
          "channel",
          "reactions",
          "editable"
        ]
      },
      "AssignedPerson": {
        "type": "object",
        "properties": {
          "profile": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "role": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "Attachment": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/UnfurlAttachment"
          },
          {
            "$ref": "#/components/schemas/FileAttachment"
          },
          {
            "$ref": "#/components/schemas/VideoAttachment"
          },
          {
            "$ref": "#/components/schemas/ImageAttachment"
          },
          {
            "$ref": "#/components/schemas/ProfileLinkPreview"
          },
          {
            "$ref": "#/components/schemas/DeletedAttachment"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "AttachmentIn": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/FileAttachment"
          },
          {
            "$ref": "#/components/schemas/VideoAttachment"
          },
          {
            "$ref": "#/components/schemas/ImageAttachment"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "AttachmentInfo": {
        "type": "object",
        "properties": {
          "details": {
            "nullable": true,
            "$ref": "#/components/schemas/Attachment"
          }
        }
      },
      "AuthCodeFlowPermissionsRequest": {
        "type": "object",
        "properties": {
          "scope": {
            "type": "string"
          },
          "purpose": {
            "type": "string"
          }
        },
        "required": [
          "scope",
          "purpose"
        ]
      },
      "AuthConfig": {
        "type": "object",
        "properties": {
          "dontRememberMeTtl": {
            "type": "integer",
            "format": "int32"
          },
          "adminRememberMeTtl": {
            "type": "integer",
            "format": "int32"
          },
          "userRememberMeTtl": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "dontRememberMeTtl",
          "adminRememberMeTtl",
          "userRememberMeTtl"
        ]
      },
      "AuthModuleUsage": {
        "type": "object",
        "properties": {
          "authModule": {
            "$ref": "#/components/schemas/ES_AuthModule"
          },
          "profiles": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "authModule",
          "profiles"
        ]
      },
      "AuthScope": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ProjectScope"
          },
          {
            "$ref": "#/components/schemas/GlobalScope"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "AutomationJobEvent": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/KMetaMod"
          },
          "executionId": {
            "type": "string"
          },
          "project": {
            "$ref": "#/components/schemas/PR_Project"
          },
          "repositoryName": {
            "type": "string"
          },
          "jobName": {
            "type": "string"
          },
          "executionNumber": {
            "type": "integer",
            "format": "int64"
          },
          "trigger": {
            "$ref": "#/components/schemas/JobExecutionTrigger"
          },
          "triggerTime": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "$ref": "#/components/schemas/JobExecutionStatus"
              },
              "new": {
                "$ref": "#/components/schemas/JobExecutionStatus"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "failureReasons": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FailureConditionType"
                }
              },
              "new": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FailureConditionType"
                }
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "stoppedBy": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "$ref": "#/components/schemas/CPrincipal"
              },
              "new": {
                "$ref": "#/components/schemas/CPrincipal"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "startTime": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "string",
                "format": "date-time"
              },
              "new": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "endTime": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "string",
                "format": "date-time"
              },
              "new": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "old",
              "new"
            ]
          }
        },
        "required": [
          "meta",
          "executionId",
          "project",
          "repositoryName",
          "jobName",
          "executionNumber",
          "trigger",
          "triggerTime"
        ]
      },
      "AutomationJobExecutionUnfurlDetails": {
        "type": "object",
        "properties": {
          "jobExecutionId": {
            "type": "string"
          },
          "projectRef": {
            "$ref": "#/components/schemas/PR_Project"
          },
          "repoName": {
            "type": "string"
          }
        },
        "required": [
          "jobExecutionId",
          "projectRef",
          "repoName"
        ]
      },
      "AutomationJobSubscriptionFilter": {
        "type": "object",
        "properties": {
          "projects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PR_Project"
            }
          },
          "repositoryName": {
            "nullable": true,
            "type": "string"
          },
          "branchSpec": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "jobs": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "projects"
        ]
      },
      "AutomationJobSubscriptionFilterIn": {
        "type": "object",
        "properties": {
          "projects": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "repositoryName": {
            "nullable": true,
            "type": "string"
          },
          "branchSpec": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "jobs": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AutomationJobUnfurlDetails": {
        "type": "object",
        "properties": {
          "jobId": {
            "type": "string"
          },
          "jobName": {
            "type": "string"
          },
          "projectRef": {
            "$ref": "#/components/schemas/PR_Project"
          },
          "repoName": {
            "type": "string"
          },
          "jobExecutionDisplayStatusFilter": {
            "nullable": true,
            "$ref": "#/components/schemas/JobExecutionDisplayStatus"
          },
          "jobTriggerFilter": {
            "nullable": true,
            "$ref": "#/components/schemas/JobTriggerType"
          },
          "branch": {
            "nullable": true,
            "$ref": "#/components/schemas/Branch"
          }
        },
        "required": [
          "jobId",
          "jobName",
          "projectRef",
          "repoName"
        ]
      },
      "AutomationServiceMetadata": {
        "type": "object",
        "properties": {
          "project": {
            "$ref": "#/components/schemas/PR_Project"
          }
        },
        "required": [
          "project"
        ]
      },
      "AutonumberCFParameters": {
        "type": "object",
        "properties": {
          "prefix": {
            "type": "string"
          },
          "suffix": {
            "type": "string"
          }
        },
        "required": [
          "prefix",
          "suffix"
        ]
      },
      "AutonumberCFType": {
        "type": "object",
        "properties": {}
      },
      "AutonumberCFValue": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "AvatarCropSquare": {
        "type": "object",
        "properties": {
          "x": {
            "type": "integer",
            "format": "int32"
          },
          "y": {
            "type": "integer",
            "format": "int32"
          },
          "length": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "x",
          "y",
          "length"
        ]
      },
      "BG_ArticleAlias": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "alias",
          "created"
        ]
      },
      "BG_Stats": {
        "type": "object",
        "properties": {
          "totalBlogs": {
            "type": "integer",
            "format": "int32"
          },
          "teams": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "first": {
                  "$ref": "#/components/schemas/TD_Team"
                },
                "second": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "required": [
                "first",
                "second"
              ]
            }
          },
          "projects": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "first": {
                  "$ref": "#/components/schemas/PR_Project"
                },
                "second": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "required": [
                "first",
                "second"
              ]
            }
          },
          "locations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "first": {
                  "$ref": "#/components/schemas/TD_Location"
                },
                "second": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "required": [
                "first",
                "second"
              ]
            }
          }
        },
        "required": [
          "totalBlogs",
          "teams",
          "locations"
        ]
      },
      "BillingFeedChannel": {
        "type": "object",
        "properties": {
          "notificationDefaults": {
            "nullable": true,
            "$ref": "#/components/schemas/ChannelSpecificDefaults"
          }
        }
      },
      "BillingReport": {
        "type": "object",
        "properties": {
          "plans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchasedBillingPlan"
            }
          },
          "reportDays": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BillingReportDay"
            }
          },
          "bandwidthAllocation": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "ciAllocation": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "serverToday": {
            "type": "string",
            "format": "full-date"
          },
          "earliestBillingDate": {
            "type": "string",
            "format": "full-date"
          }
        },
        "required": [
          "plans",
          "reportDays",
          "serverToday",
          "earliestBillingDate"
        ]
      },
      "BillingReportDay": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "full-date"
          },
          "activeUsers": {
            "type": "integer",
            "format": "int32"
          },
          "userUsage": {
            "type": "integer",
            "format": "int32"
          },
          "userCost": {
            "type": "number",
            "format": "double"
          },
          "storageAllocationB": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "storageTotalUsage": {
            "type": "integer",
            "format": "int64"
          },
          "storageFilesUsage": {
            "type": "integer",
            "format": "int64"
          },
          "storageGitUsage": {
            "type": "integer",
            "format": "int64"
          },
          "storagePackagesUsage": {
            "type": "integer",
            "format": "int64"
          },
          "storageCost": {
            "type": "number",
            "format": "double"
          },
          "bandwidthTotalUsageDelta": {
            "type": "integer",
            "format": "int64"
          },
          "bandwidthTotalUsage": {
            "type": "integer",
            "format": "int64"
          },
          "bandwidthFilesUsageDelta": {
            "type": "integer",
            "format": "int64"
          },
          "bandwidthFilesUsage": {
            "type": "integer",
            "format": "int64"
          },
          "bandwidthGitUsageDelta": {
            "type": "integer",
            "format": "int64"
          },
          "bandwidthGitUsage": {
            "type": "integer",
            "format": "int64"
          },
          "bandwidthPackagesUsageDelta": {
            "type": "integer",
            "format": "int64"
          },
          "bandwidthPackagesUsage": {
            "type": "integer",
            "format": "int64"
          },
          "bandwidthAutomationExternalTrafficUsageDelta": {
            "type": "integer",
            "format": "int64"
          },
          "bandwidthAutomationExternalTrafficUsage": {
            "type": "integer",
            "format": "int64"
          },
          "bandwidthAutomationInternalUsageDelta": {
            "type": "integer",
            "format": "int64"
          },
          "bandwidthAutomationInternalUsage": {
            "type": "integer",
            "format": "int64"
          },
          "bandwidthCost": {
            "type": "number",
            "format": "double"
          },
          "ciUsageDelta": {
            "type": "integer",
            "format": "int64"
          },
          "ciUsage": {
            "type": "integer",
            "format": "int64"
          },
          "ciCost": {
            "type": "number",
            "format": "double"
          },
          "appUsage": {
            "type": "integer",
            "format": "int64"
          },
          "chatUsage": {
            "type": "integer",
            "format": "int64"
          },
          "totalCost": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "date",
          "activeUsers",
          "userUsage",
          "userCost",
          "storageTotalUsage",
          "storageFilesUsage",
          "storageGitUsage",
          "storagePackagesUsage",
          "storageCost",
          "bandwidthTotalUsageDelta",
          "bandwidthTotalUsage",
          "bandwidthFilesUsageDelta",
          "bandwidthFilesUsage",
          "bandwidthGitUsageDelta",
          "bandwidthGitUsage",
          "bandwidthPackagesUsageDelta",
          "bandwidthPackagesUsage",
          "bandwidthAutomationExternalTrafficUsageDelta",
          "bandwidthAutomationExternalTrafficUsage",
          "bandwidthAutomationInternalUsageDelta",
          "bandwidthAutomationInternalUsage",
          "bandwidthCost",
          "ciUsageDelta",
          "ciUsage",
          "ciCost",
          "appUsage",
          "chatUsage",
          "totalCost"
        ]
      },
      "BirthdayEvent": {
        "type": "object",
        "properties": {
          "profile": {
            "$ref": "#/components/schemas/TD_MemberWithTeam"
          },
          "birthday": {
            "type": "string",
            "format": "full-date"
          }
        },
        "required": [
          "profile",
          "birthday"
        ]
      },
      "BlockNode": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/RtHorizontalRule"
          },
          {
            "$ref": "#/components/schemas/RtParagraph"
          },
          {
            "$ref": "#/components/schemas/RtTableHeader"
          },
          {
            "$ref": "#/components/schemas/RtTableCell"
          },
          {
            "$ref": "#/components/schemas/RtDocument"
          },
          {
            "$ref": "#/components/schemas/RtOrderedList"
          },
          {
            "$ref": "#/components/schemas/RtListItem"
          },
          {
            "$ref": "#/components/schemas/RtBulletList"
          },
          {
            "$ref": "#/components/schemas/RtBlockquote"
          },
          {
            "$ref": "#/components/schemas/RtTableRow"
          },
          {
            "$ref": "#/components/schemas/RtHeading"
          },
          {
            "$ref": "#/components/schemas/RtTable"
          },
          {
            "$ref": "#/components/schemas/RtCode"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "BlogCalendarEvent": {
        "type": "object",
        "properties": {
          "starts": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "ends": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "timezone": {
            "nullable": true,
            "$ref": "#/components/schemas/ATimeZone"
          },
          "rooms": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allDay": {
            "nullable": true,
            "type": "boolean"
          }
        }
      },
      "BlogCommonSubscriptionFilter": {
        "type": "object",
        "properties": {
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_Team"
            }
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_Location"
            }
          },
          "authors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_MemberProfile"
            }
          }
        },
        "required": [
          "teams",
          "locations",
          "authors"
        ]
      },
      "BlogCommonSubscriptionFilterIn": {
        "type": "object",
        "properties": {
          "teams": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "locations": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "authors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "teams",
          "locations",
          "authors"
        ]
      },
      "BlogEventMenuActionContext": {
        "type": "object",
        "properties": {
          "blogEventId": {
            "type": "string"
          }
        },
        "required": [
          "blogEventId"
        ]
      },
      "BlogPublicationDetails": {
        "type": "object",
        "properties": {
          "teams": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_Team"
            }
          },
          "locations": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_Location"
            }
          },
          "event": {
            "nullable": true,
            "$ref": "#/components/schemas/CalendarEvent"
          },
          "article": {
            "nullable": true,
            "$ref": "#/components/schemas/ArticleRecord"
          }
        }
      },
      "BlogPublicationDetailsIn": {
        "type": "object",
        "properties": {
          "teams": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "locations": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "event": {
            "nullable": true,
            "$ref": "#/components/schemas/CalendarEventIn"
          },
          "article": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "BlogWebhookEvent": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/KMetaMod"
          },
          "article": {
            "$ref": "#/components/schemas/ArticleRecord"
          },
          "action": {
            "nullable": true,
            "type": "string"
          },
          "author": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "$ref": "#/components/schemas/TD_MemberProfile"
              },
              "new": {
                "$ref": "#/components/schemas/TD_MemberProfile"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "created": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "string",
                "format": "date-time"
              },
              "new": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "title": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "string"
              },
              "new": {
                "type": "string"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "textChanged": {
            "type": "boolean"
          },
          "unpublished": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "boolean"
              },
              "new": {
                "type": "boolean"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "teams": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TD_MemberProfile"
                }
              },
              "new": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TD_MemberProfile"
                }
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "locations": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TD_MemberProfile"
                }
              },
              "new": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TD_MemberProfile"
                }
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "externalEntityInfo": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "integer",
                "format": "int64"
              },
              "new": {
                "type": "integer",
                "format": "int64"
              }
            },
            "required": [
              "old",
              "new"
            ]
          }
        },
        "required": [
          "meta",
          "article",
          "textChanged"
        ]
      },
      "BoardColumn": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "statuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IssueStatus"
            }
          }
        },
        "required": [
          "name",
          "statuses"
        ]
      },
      "BoardColumns": {
        "type": "object",
        "properties": {
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BoardColumn"
            }
          }
        },
        "required": [
          "columns"
        ]
      },
      "BoardInfo": {
        "type": "object",
        "properties": {
          "owners": {
            "$ref": "#/components/schemas/BoardOwners"
          },
          "columns": {
            "$ref": "#/components/schemas/BoardColumns"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "swimlaneKey": {
            "nullable": true,
            "type": "string"
          },
          "issueFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BoardIssueField"
            }
          }
        },
        "required": [
          "owners",
          "columns",
          "issueFields"
        ]
      },
      "BoardIssueField": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/BoardIssueField.BuiltIn"
          },
          {
            "$ref": "#/components/schemas/BoardIssueField.Custom"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "BoardIssueField.BuiltIn": {
        "type": "object",
        "properties": {
          "field": {
            "$ref": "#/components/schemas/BuiltInIssueField"
          }
        },
        "required": [
          "field"
        ]
      },
      "BoardIssueField.Custom": {
        "type": "object",
        "properties": {
          "customField": {
            "$ref": "#/components/schemas/CustomField"
          }
        },
        "required": [
          "customField"
        ]
      },
      "BoardIssueInputField": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/BoardIssueField.BuiltIn"
          },
          {
            "$ref": "#/components/schemas/CustomBoardIssueInputField"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "BoardMemberOwners": {
        "type": "object",
        "properties": {
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_MemberProfile"
            }
          }
        },
        "required": [
          "members"
        ]
      },
      "BoardOwners": {
        "type": "object",
        "properties": {
          "members": {
            "$ref": "#/components/schemas/BoardMemberOwners"
          },
          "teams": {
            "$ref": "#/components/schemas/BoardTeamOwners"
          }
        },
        "required": [
          "members",
          "teams"
        ]
      },
      "BoardRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "from": {
            "nullable": true,
            "type": "string",
            "format": "full-date"
          },
          "to": {
            "nullable": true,
            "type": "string",
            "format": "full-date"
          },
          "info": {
            "$ref": "#/components/schemas/BoardInfo"
          }
        },
        "required": [
          "id",
          "archived",
          "name",
          "info"
        ]
      },
      "BoardTeamOwners": {
        "type": "object",
        "properties": {
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_Team"
            }
          }
        },
        "required": [
          "teams"
        ]
      },
      "BookContainerInfo": {
        "type": "object",
        "properties": {
          "book": {
            "$ref": "#/components/schemas/KB_Book"
          }
        },
        "required": [
          "book"
        ]
      },
      "BooleanCFType": {
        "type": "object",
        "properties": {}
      },
      "BooleanCFValue": {
        "type": "object",
        "properties": {
          "value": {
            "type": "boolean"
          }
        },
        "required": [
          "value"
        ]
      },
      "Branch": {
        "type": "object",
        "properties": {
          "branchName": {
            "type": "string"
          }
        },
        "required": [
          "branchName"
        ]
      },
      "BranchInfo": {
        "type": "object",
        "properties": {
          "head": {
            "type": "string"
          },
          "ref": {
            "type": "string"
          }
        },
        "required": [
          "head",
          "ref"
        ]
      },
      "CApplicationPrincipalDetails": {
        "type": "object",
        "properties": {
          "app": {
            "$ref": "#/components/schemas/ES_App"
          }
        },
        "required": [
          "app"
        ]
      },
      "CAutomationTaskPrincipalDetails": {
        "type": "object",
        "properties": {
          "project": {
            "$ref": "#/components/schemas/PR_Project"
          },
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "project",
          "name",
          "id"
        ]
      },
      "CBuiltInServicePrincipalDetails": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "key": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "CFCommitIdentifier": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/CFCommitIdentifier.CommitHash"
          },
          {
            "$ref": "#/components/schemas/CFCommitIdentifier.Full"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "CFCommitIdentifier.CommitHash": {
        "type": "object",
        "properties": {
          "commitHash": {
            "type": "string"
          }
        },
        "required": [
          "commitHash"
        ]
      },
      "CFCommitIdentifier.Full": {
        "type": "object",
        "properties": {
          "project": {
            "$ref": "#/components/schemas/ProjectIdentifier"
          },
          "repository": {
            "type": "string"
          },
          "commitHash": {
            "type": "string"
          }
        },
        "required": [
          "project",
          "repository",
          "commitHash"
        ]
      },
      "CFCommitInfoBase": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/CFCommitInfoBase.CFCommitInfo"
          },
          {
            "$ref": "#/components/schemas/CFCommitInfoBase.PermissionDenied"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "CFCommitInfoBase.CFCommitInfo": {
        "type": "object",
        "properties": {
          "commit": {
            "$ref": "#/components/schemas/CommitInfo"
          }
        },
        "required": [
          "commit"
        ]
      },
      "CFCommitInfoBase.PermissionDenied": {
        "type": "object",
        "properties": {
          "commitHash": {
            "type": "string"
          }
        },
        "required": [
          "commitHash"
        ]
      },
      "CFConstraint": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/StringCFConstraint"
          },
          {
            "$ref": "#/components/schemas/DateTimeCFConstraint"
          },
          {
            "$ref": "#/components/schemas/DateCFConstraint"
          },
          {
            "$ref": "#/components/schemas/IntCFConstraint"
          },
          {
            "$ref": "#/components/schemas/PercentageCFConstraint"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "CFCreateParameters": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/EnumCFInputParameters"
          },
          {
            "$ref": "#/components/schemas/ContactCFParameters"
          },
          {
            "$ref": "#/components/schemas/VcsCommitCFParametersInput"
          },
          {
            "$ref": "#/components/schemas/DocumentCFParametersInput"
          },
          {
            "$ref": "#/components/schemas/OpenEnumCFCreateParameters"
          },
          {
            "$ref": "#/components/schemas/AutonumberCFParameters"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "CFEnumValue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "principal": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipalDetails"
          }
        },
        "required": [
          "id",
          "value"
        ]
      },
      "CFEnumValueModification": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/CFEnumValueModification.Create"
          },
          {
            "$ref": "#/components/schemas/CFEnumValueModification.Remove"
          },
          {
            "$ref": "#/components/schemas/CFEnumValueModification.Update"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "CFEnumValueModification.Create": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "CFEnumValueModification.Remove": {
        "type": "object",
        "properties": {
          "valueIdentifier": {
            "$ref": "#/components/schemas/CFEnumValueIdentifier"
          }
        },
        "required": [
          "valueIdentifier"
        ]
      },
      "CFEnumValueModification.Update": {
        "type": "object",
        "properties": {
          "valueIdentifier": {
            "$ref": "#/components/schemas/CFEnumValueIdentifier"
          },
          "newName": {
            "type": "string"
          }
        },
        "required": [
          "valueIdentifier",
          "newName"
        ]
      },
      "CFEnumValuesModification": {
        "type": "object",
        "properties": {
          "valuesToAdd": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnumValueData"
            }
          },
          "valuesToUpdate": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnumValueData"
            }
          },
          "valuesToDelete": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "valuesToAdd",
          "valuesToUpdate",
          "valuesToDelete"
        ]
      },
      "CFInputValue": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/OpenEnumListCFValue"
          },
          {
            "$ref": "#/components/schemas/DateCFValue"
          },
          {
            "$ref": "#/components/schemas/ProjectCFInputValue"
          },
          {
            "$ref": "#/components/schemas/ProfileListCFInputValue"
          },
          {
            "$ref": "#/components/schemas/ContactListCFValue"
          },
          {
            "$ref": "#/components/schemas/AutonumberCFValue"
          },
          {
            "$ref": "#/components/schemas/TargetCFInputValue"
          },
          {
            "$ref": "#/components/schemas/StringListCFValue"
          },
          {
            "$ref": "#/components/schemas/ProfileCFInputValue"
          },
          {
            "$ref": "#/components/schemas/FractionCFValue"
          },
          {
            "$ref": "#/components/schemas/EnumCFValue"
          },
          {
            "$ref": "#/components/schemas/DocumentListCFInputValue"
          },
          {
            "$ref": "#/components/schemas/EnumListCFInputValue"
          },
          {
            "$ref": "#/components/schemas/DeploymentCFInputValue"
          },
          {
            "$ref": "#/components/schemas/ContactCFValue"
          },
          {
            "$ref": "#/components/schemas/IntCFValue"
          },
          {
            "$ref": "#/components/schemas/DateTimeCFValue"
          },
          {
            "$ref": "#/components/schemas/OpenEnumCFInputValue"
          },
          {
            "$ref": "#/components/schemas/TeamCFInputValue"
          },
          {
            "$ref": "#/components/schemas/IntListCFValue"
          },
          {
            "$ref": "#/components/schemas/OpenEnumListCFInputValue"
          },
          {
            "$ref": "#/components/schemas/IssueCFInputValue"
          },
          {
            "$ref": "#/components/schemas/UrlCFValue"
          },
          {
            "$ref": "#/components/schemas/LocationCFInputValue"
          },
          {
            "$ref": "#/components/schemas/EnumCFInputValue"
          },
          {
            "$ref": "#/components/schemas/BooleanCFValue"
          },
          {
            "$ref": "#/components/schemas/VcsCommitCFInputValue"
          },
          {
            "$ref": "#/components/schemas/EnumListCFValue"
          },
          {
            "$ref": "#/components/schemas/StringCFValue"
          },
          {
            "$ref": "#/components/schemas/VcsCommitListCFInputValue"
          },
          {
            "$ref": "#/components/schemas/DocumentCFInputValue"
          },
          {
            "$ref": "#/components/schemas/IssueListCFInputValue"
          },
          {
            "$ref": "#/components/schemas/PercentageCFValue"
          },
          {
            "$ref": "#/components/schemas/OpenEnumCFValue"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "CFParameters": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/VcsCommitCFParameters"
          },
          {
            "$ref": "#/components/schemas/DocumentCFParameters"
          },
          {
            "$ref": "#/components/schemas/ContactCFParameters"
          },
          {
            "$ref": "#/components/schemas/EnumCFParameters"
          },
          {
            "$ref": "#/components/schemas/AutonumberCFParameters"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "CFType": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/DocumentCFType"
          },
          {
            "$ref": "#/components/schemas/IntCFType"
          },
          {
            "$ref": "#/components/schemas/LocationCFType"
          },
          {
            "$ref": "#/components/schemas/OpenEnumCFType"
          },
          {
            "$ref": "#/components/schemas/BooleanCFType"
          },
          {
            "$ref": "#/components/schemas/AutonumberCFType"
          },
          {
            "$ref": "#/components/schemas/DeploymentCFType"
          },
          {
            "$ref": "#/components/schemas/IntListCFType"
          },
          {
            "$ref": "#/components/schemas/OpenEnumListCFType"
          },
          {
            "$ref": "#/components/schemas/IssueCFType"
          },
          {
            "$ref": "#/components/schemas/EnumListCFType"
          },
          {
            "$ref": "#/components/schemas/DateCFType"
          },
          {
            "$ref": "#/components/schemas/ProfileCFType"
          },
          {
            "$ref": "#/components/schemas/ProfileListCFType"
          },
          {
            "$ref": "#/components/schemas/StringCFType"
          },
          {
            "$ref": "#/components/schemas/StringListCFType"
          },
          {
            "$ref": "#/components/schemas/FractionCFType"
          },
          {
            "$ref": "#/components/schemas/ProjectCFType"
          },
          {
            "$ref": "#/components/schemas/TargetCFType"
          },
          {
            "$ref": "#/components/schemas/DocumentListCFType"
          },
          {
            "$ref": "#/components/schemas/IssueListCFType"
          },
          {
            "$ref": "#/components/schemas/PercentageCFType"
          },
          {
            "$ref": "#/components/schemas/EnumCFType"
          },
          {
            "$ref": "#/components/schemas/UrlCFType"
          },
          {
            "$ref": "#/components/schemas/TeamCFType"
          },
          {
            "$ref": "#/components/schemas/DateTimeCFType"
          },
          {
            "$ref": "#/components/schemas/ContactCFType"
          },
          {
            "$ref": "#/components/schemas/VcsCommitListCFType"
          },
          {
            "$ref": "#/components/schemas/ContactListCFType"
          },
          {
            "$ref": "#/components/schemas/VcsCommitCFType"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "CFUpdateParameters": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/EnumCFInputParameters"
          },
          {
            "$ref": "#/components/schemas/OpenEnumCFUpdateParameters"
          },
          {
            "$ref": "#/components/schemas/ContactCFParameters"
          },
          {
            "$ref": "#/components/schemas/VcsCommitCFParametersInput"
          },
          {
            "$ref": "#/components/schemas/DocumentCFParametersInput"
          },
          {
            "$ref": "#/components/schemas/AutonumberCFParameters"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "CFValue": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/DateCFValue"
          },
          {
            "$ref": "#/components/schemas/OpenEnumListCFValue"
          },
          {
            "$ref": "#/components/schemas/IssueCFValue"
          },
          {
            "$ref": "#/components/schemas/ContactListCFValue"
          },
          {
            "$ref": "#/components/schemas/AutonumberCFValue"
          },
          {
            "$ref": "#/components/schemas/DocumentCFValue"
          },
          {
            "$ref": "#/components/schemas/TargetCFValue"
          },
          {
            "$ref": "#/components/schemas/StringListCFValue"
          },
          {
            "$ref": "#/components/schemas/FractionCFValue"
          },
          {
            "$ref": "#/components/schemas/EnumCFValue"
          },
          {
            "$ref": "#/components/schemas/ProjectCFValue"
          },
          {
            "$ref": "#/components/schemas/VcsCommitCFValue"
          },
          {
            "$ref": "#/components/schemas/ProfileCFValue"
          },
          {
            "$ref": "#/components/schemas/IntCFValue"
          },
          {
            "$ref": "#/components/schemas/ContactCFValue"
          },
          {
            "$ref": "#/components/schemas/DateTimeCFValue"
          },
          {
            "$ref": "#/components/schemas/LocationCFValue"
          },
          {
            "$ref": "#/components/schemas/IntListCFValue"
          },
          {
            "$ref": "#/components/schemas/DeploymentCFValue"
          },
          {
            "$ref": "#/components/schemas/TeamCFValue"
          },
          {
            "$ref": "#/components/schemas/ProfileListCFValue"
          },
          {
            "$ref": "#/components/schemas/UrlCFValue"
          },
          {
            "$ref": "#/components/schemas/BooleanCFValue"
          },
          {
            "$ref": "#/components/schemas/VcsCommitListCFValue"
          },
          {
            "$ref": "#/components/schemas/EnumListCFValue"
          },
          {
            "$ref": "#/components/schemas/DocumentListCFValue"
          },
          {
            "$ref": "#/components/schemas/IssueListCFValue"
          },
          {
            "$ref": "#/components/schemas/StringCFValue"
          },
          {
            "$ref": "#/components/schemas/OpenEnumCFValue"
          },
          {
            "$ref": "#/components/schemas/PercentageCFValue"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "CPrincipal": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "details": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipalDetails"
          }
        },
        "required": [
          "name"
        ]
      },
      "CPrincipalDetails": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/CUserPrincipalDetails"
          },
          {
            "$ref": "#/components/schemas/CBuiltInServicePrincipalDetails"
          },
          {
            "$ref": "#/components/schemas/CAutomationTaskPrincipalDetails"
          },
          {
            "$ref": "#/components/schemas/CUserWithEmailPrincipalDetails"
          },
          {
            "$ref": "#/components/schemas/CApplicationPrincipalDetails"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "CRight": {
        "type": "object",
        "properties": {
          "typeCode": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "featureFlag": {
            "nullable": true,
            "$ref": "#/components/schemas/FeatureFlag"
          }
        },
        "required": [
          "typeCode",
          "code",
          "title"
        ]
      },
      "CUserPrincipalDetails": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          }
        },
        "required": [
          "user"
        ]
      },
      "CUserWithEmailPrincipalDetails": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "email"
        ]
      },
      "CalendarEvent": {
        "type": "object",
        "properties": {
          "calendarEvent": {
            "nullable": true,
            "type": "boolean"
          },
          "starts": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "ends": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "timezone": {
            "nullable": true,
            "$ref": "#/components/schemas/ATimeZone"
          },
          "rooms": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_Location"
            }
          },
          "allDay": {
            "nullable": true,
            "type": "boolean"
          }
        }
      },
      "CalendarEventIn": {
        "type": "object",
        "properties": {
          "calendarEvent": {
            "nullable": true,
            "type": "boolean"
          },
          "starts": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "ends": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "timezone": {
            "nullable": true,
            "$ref": "#/components/schemas/ATimeZone"
          },
          "rooms": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allDay": {
            "nullable": true,
            "type": "boolean"
          }
        }
      },
      "CalendarEventSpec": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "recurrenceRule": {
            "nullable": true,
            "$ref": "#/components/schemas/RecurrenceRule"
          },
          "allDay": {
            "type": "boolean"
          },
          "timezone": {
            "$ref": "#/components/schemas/ATimeZone"
          },
          "parentId": {
            "nullable": true,
            "type": "string"
          },
          "initialMeetingStart": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "busyStatus": {
            "nullable": true,
            "$ref": "#/components/schemas/BusyStatus"
          },
          "nextChainId": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "start",
          "end",
          "allDay",
          "timezone"
        ]
      },
      "CalendarInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "defaultColor": {
            "nullable": true,
            "type": "string"
          },
          "freeBusyOnly": {
            "type": "boolean"
          },
          "readOnly": {
            "type": "boolean"
          },
          "exposeToCalDav": {
            "type": "boolean"
          },
          "exposeToGoogle": {
            "type": "boolean"
          },
          "sourceUrl": {
            "nullable": true,
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "freeBusyOnly",
          "readOnly",
          "exposeToCalDav",
          "exposeToGoogle",
          "archived"
        ]
      },
      "CallSession": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "room": {
            "$ref": "#/components/schemas/Room"
          },
          "description": {
            "type": "string"
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "channel": {
            "nullable": true,
            "$ref": "#/components/schemas/M2ChannelRecord"
          },
          "topology": {
            "nullable": true,
            "$ref": "#/components/schemas/ConnectionTopology"
          },
          "resourcesPrepared": {
            "type": "boolean"
          },
          "participations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionParticipationRecord"
            }
          }
        },
        "required": [
          "id",
          "archived",
          "room",
          "description",
          "start",
          "resourcesPrepared",
          "participations"
        ]
      },
      "CallSessionUnfurlDetails": {
        "type": "object",
        "properties": {
          "session": {
            "$ref": "#/components/schemas/CallSession"
          }
        },
        "required": [
          "session"
        ]
      },
      "CertificateInfo": {
        "type": "object",
        "properties": {
          "certificateType": {
            "type": "string"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "serialNumber": {
            "type": "string"
          },
          "issuedBy": {
            "type": "string"
          },
          "issuedTo": {
            "type": "string"
          },
          "validFrom": {
            "type": "string",
            "format": "date-time"
          },
          "validTo": {
            "type": "string",
            "format": "date-time"
          },
          "algorithm": {
            "type": "string"
          },
          "fingerprint": {
            "$ref": "#/components/schemas/Fingerprint"
          }
        },
        "required": [
          "certificateType",
          "version",
          "serialNumber",
          "issuedBy",
          "issuedTo",
          "validFrom",
          "validTo",
          "algorithm",
          "fingerprint"
        ]
      },
      "ChangeClientSecretPayload": {
        "type": "object",
        "properties": {
          "newClientSecret": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "userId": {
            "nullable": true,
            "type": "string"
          },
          "verificationToken": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "newClientSecret",
          "clientId"
        ]
      },
      "ChangeInReview": {
        "type": "object",
        "properties": {
          "repository": {
            "type": "string"
          },
          "change": {
            "$ref": "#/components/schemas/GitCommitChange"
          },
          "read": {
            "type": "boolean"
          }
        },
        "required": [
          "repository",
          "change",
          "read"
        ]
      },
      "ChangeServerUrlPayload": {
        "type": "object",
        "properties": {
          "newServerUrl": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "userId": {
            "nullable": true,
            "type": "string"
          },
          "verificationToken": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "newServerUrl",
          "clientId"
        ]
      },
      "ChannelContactThread": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/M2ChannelContentCodeDiscussionInReview"
          },
          {
            "$ref": "#/components/schemas/M2ChannelContactThread"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ChannelEvent": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/KMetaMod"
          },
          "channel": {
            "$ref": "#/components/schemas/M2ChannelRecord"
          },
          "name": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "string"
              },
              "new": {
                "type": "string"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "description": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "string"
              },
              "new": {
                "type": "string"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "icon": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "string"
              },
              "new": {
                "type": "string"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "restored": {
            "nullable": true,
            "type": "boolean"
          },
          "archived": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "meta",
          "channel"
        ]
      },
      "ChannelInfoAttachment": {
        "type": "object",
        "properties": {
          "details": {
            "nullable": true,
            "$ref": "#/components/schemas/Attachment"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "messageId": {
            "type": "string"
          },
          "channelId": {
            "type": "string"
          },
          "contactKey": {
            "type": "string"
          }
        },
        "required": [
          "time",
          "messageId",
          "channelId",
          "contactKey"
        ]
      },
      "ChannelItemRecord": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "details": {
            "nullable": true,
            "$ref": "#/components/schemas/M2ItemContentDetails"
          },
          "author": {
            "$ref": "#/components/schemas/CPrincipal"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "time": {
            "type": "integer",
            "format": "int64"
          },
          "reactions": {
            "nullable": true,
            "$ref": "#/components/schemas/AllReactionsToItemRecord"
          },
          "thread": {
            "nullable": true,
            "$ref": "#/components/schemas/M2ChannelRecord"
          },
          "projectedItem": {
            "nullable": true,
            "$ref": "#/components/schemas/ChannelItemRecord"
          },
          "attachments": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentInfo"
            }
          },
          "externalId": {
            "nullable": true,
            "type": "string"
          },
          "pending": {
            "nullable": true,
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "edited": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "pinned": {
            "nullable": true,
            "type": "boolean"
          },
          "suggestedParticipants": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CPrincipal"
            }
          },
          "mentions": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityMention"
            }
          },
          "channelId": {
            "nullable": true,
            "type": "string"
          },
          "issues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Issue"
            }
          }
        },
        "required": [
          "text",
          "author",
          "created",
          "time",
          "id",
          "archived",
          "issues"
        ]
      },
      "ChannelItemSnapshot": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "channelId": {
            "nullable": true,
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "details": {
            "nullable": true,
            "$ref": "#/components/schemas/M2ItemContentDetails"
          },
          "author": {
            "$ref": "#/components/schemas/CPrincipal"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "time": {
            "type": "integer",
            "format": "int64"
          },
          "attachments": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentInfo"
            }
          },
          "mentions": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityMention"
            }
          }
        },
        "required": [
          "id",
          "text",
          "author",
          "created",
          "time"
        ]
      },
      "ChannelMessageMenuActionContext": {
        "type": "object",
        "properties": {
          "channelIdentifier": {
            "$ref": "#/components/schemas/ChannelIdentifier"
          },
          "messageIdentifier": {
            "$ref": "#/components/schemas/ChatMessageIdentifier"
          }
        },
        "required": [
          "channelIdentifier",
          "messageIdentifier"
        ]
      },
      "ChannelParticipant": {
        "type": "object",
        "properties": {
          "principal": {
            "$ref": "#/components/schemas/CPrincipal"
          },
          "messageCount": {
            "type": "integer",
            "format": "int32"
          },
          "pendingMessageCount": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "principal",
          "messageCount"
        ]
      },
      "ChannelPermissionContext": {
        "type": "object",
        "properties": {
          "channel": {
            "$ref": "#/components/schemas/M2ChannelRecord"
          }
        },
        "required": [
          "channel"
        ]
      },
      "ChannelSpecificDefaults": {
        "type": "object",
        "properties": {
          "subscribed": {
            "nullable": true,
            "type": "boolean"
          },
          "filter": {
            "$ref": "#/components/schemas/NotificationFilter"
          },
          "push": {
            "type": "boolean"
          },
          "email": {
            "$ref": "#/components/schemas/M2EmailNotificationType"
          },
          "threadsSubscribed": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "filter",
          "push",
          "email"
        ]
      },
      "ChatBotUiExtensionApi": {
        "type": "object",
        "properties": {}
      },
      "ChatBotUiExtensionIn": {
        "type": "object",
        "properties": {}
      },
      "ChatChannelSubscriptionFilter": {
        "type": "object",
        "properties": {
          "channel": {
            "nullable": true,
            "type": "string"
          },
          "contact": {
            "nullable": true,
            "$ref": "#/components/schemas/ChatContactRecord"
          }
        }
      },
      "ChatChannelSubscriptionFilterIn": {
        "type": "object",
        "properties": {
          "channel": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "ChatContactDetails": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ChatContactDetails.App"
          },
          {
            "$ref": "#/components/schemas/ChatContactDetails.Conversation"
          },
          {
            "$ref": "#/components/schemas/ChatContactDetails.Default"
          },
          {
            "$ref": "#/components/schemas/ChatContactDetails.Profile"
          },
          {
            "$ref": "#/components/schemas/ChatContactDetails.Thread"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ChatContactDetails.App": {
        "type": "object",
        "properties": {
          "app": {
            "$ref": "#/components/schemas/ES_App"
          },
          "icon": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "app"
        ]
      },
      "ChatContactDetails.Conversation": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_MemberProfile"
            }
          },
          "subject": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "users"
        ]
      },
      "ChatContactDetails.Default": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "legacyName": {
            "nullable": true,
            "type": "string"
          },
          "icon": {
            "nullable": true,
            "type": "string"
          },
          "fontIcon": {
            "nullable": true,
            "type": "string"
          },
          "fontIconColor": {
            "nullable": true,
            "$ref": "#/components/schemas/PrivateFeedColor"
          },
          "access": {
            "nullable": true,
            "$ref": "#/components/schemas/M2.Access"
          },
          "resolvedImpl": {
            "nullable": true,
            "type": "boolean"
          },
          "extra": {
            "nullable": true,
            "$ref": "#/components/schemas/ContactExtraTag"
          }
        },
        "required": [
          "type",
          "name"
        ]
      },
      "ChatContactDetails.Profile": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          }
        },
        "required": [
          "user"
        ]
      },
      "ChatContactDetails.Thread": {
        "type": "object",
        "properties": {
          "parent": {
            "$ref": "#/components/schemas/ChatContactRecord"
          },
          "message": {
            "$ref": "#/components/schemas/MessageInfo"
          },
          "authors": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CPrincipal"
            }
          },
          "replies": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "absorbingParent": {
            "nullable": true,
            "type": "boolean"
          },
          "resolvedImpl": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "parent",
          "message"
        ]
      },
      "ChatContactRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "key": {
            "type": "string"
          },
          "details": {
            "$ref": "#/components/schemas/ChatContactDetails"
          },
          "channelType": {
            "type": "string"
          },
          "lastMessage": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageInfo"
          },
          "unreadStatus": {
            "nullable": true,
            "$ref": "#/components/schemas/M2UnreadStatus"
          },
          "readTime": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "subscribedSince": {
            "type": "string",
            "format": "date-time"
          },
          "pinned": {
            "type": "boolean"
          },
          "pinnedPrevId": {
            "nullable": true,
            "type": "string"
          },
          "draft": {
            "nullable": true,
            "type": "string"
          },
          "draftTime": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "lastChildMessageTime": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "deleted": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "archived",
          "key",
          "details",
          "channelType",
          "subscribedSince",
          "pinned"
        ]
      },
      "ChatHistoryRange": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelItemRecord"
            }
          },
          "firstAfterLimitMessage": {
            "nullable": true,
            "$ref": "#/components/schemas/ChannelItemRecord"
          }
        },
        "required": [
          "messages"
        ]
      },
      "ChatMessage": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ChatMessage.Block"
          },
          {
            "$ref": "#/components/schemas/ChatMessage.Text"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ChatMessage.Block": {
        "type": "object",
        "properties": {
          "style": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageStyle"
          },
          "outline": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageOutline"
          },
          "sections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageSectionElement"
            }
          },
          "messageData": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "sections"
        ]
      },
      "ChatMessage.Text": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          }
        },
        "required": [
          "text"
        ]
      },
      "ChatMessageCreatedEvent": {
        "type": "object",
        "properties": {
          "channelId": {
            "type": "string"
          },
          "threadId": {
            "nullable": true,
            "type": "string"
          },
          "message": {
            "$ref": "#/components/schemas/ChannelItemRecord"
          }
        },
        "required": [
          "channelId",
          "message"
        ]
      },
      "ChatMessageDeletedEvent": {
        "type": "object",
        "properties": {
          "channelId": {
            "type": "string"
          },
          "threadId": {
            "nullable": true,
            "type": "string"
          },
          "message": {
            "$ref": "#/components/schemas/ChannelItemRecord"
          }
        },
        "required": [
          "channelId",
          "message"
        ]
      },
      "ChatMessageEditableByMe": {
        "type": "object",
        "properties": {}
      },
      "ChatMessageIdentifier.ExternalId": {
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string"
          }
        },
        "required": [
          "externalId"
        ]
      },
      "ChatMessageMenuItemUiExtensionApi": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "menuItemUniqueCode": {
            "type": "string"
          },
          "visibilityFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatMessageMenuItemVisibilityFilterApi"
            }
          }
        },
        "required": [
          "displayName",
          "menuItemUniqueCode",
          "visibilityFilters"
        ]
      },
      "ChatMessageMenuItemUiExtensionIn": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "menuItemUniqueCode": {
            "type": "string"
          },
          "visibilityFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatMessageMenuItemVisibilityFilterIn"
            }
          }
        },
        "required": [
          "displayName",
          "menuItemUniqueCode",
          "visibilityFilters"
        ]
      },
      "ChatMessageMenuItemVisibilityFilterApi": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ChatMessageEditableByMe"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ChatMessageMenuItemVisibilityFilterIn": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ChatMessageEditableByMe"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ChatMessageUnfurlContext": {
        "type": "object",
        "properties": {
          "channel": {
            "type": "string"
          },
          "messageId": {
            "$ref": "#/components/schemas/ChatMessageIdentifier"
          }
        },
        "required": [
          "channel",
          "messageId"
        ]
      },
      "ChatMessageUpdatedEvent": {
        "type": "object",
        "properties": {
          "channelId": {
            "type": "string"
          },
          "threadId": {
            "nullable": true,
            "type": "string"
          },
          "message": {
            "$ref": "#/components/schemas/ChannelItemRecord"
          },
          "edited": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "string",
                "format": "date-time"
              },
              "new": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "pinned": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "boolean"
              },
              "new": {
                "type": "boolean"
              }
            },
            "required": [
              "old",
              "new"
            ]
          }
        },
        "required": [
          "channelId",
          "message"
        ]
      },
      "ChatModification": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/DeleteMessage"
          },
          {
            "$ref": "#/components/schemas/EditMessage"
          },
          {
            "$ref": "#/components/schemas/NewMessage"
          },
          {
            "$ref": "#/components/schemas/PublishMessage"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ChatSubscriptionFilterIn": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ChatChannelSubscriptionFilterIn"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "Checklist": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "projectId": {
            "nullable": true,
            "type": "string"
          },
          "project": {
            "nullable": true,
            "$ref": "#/components/schemas/PR_Project"
          },
          "issue": {
            "nullable": true,
            "$ref": "#/components/schemas/Issue"
          },
          "owner": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "name": {
            "type": "string"
          },
          "root": {
            "nullable": true,
            "$ref": "#/components/schemas/PlanItem"
          },
          "rootTag": {
            "nullable": true,
            "$ref": "#/components/schemas/PlanningTag"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "totalItemsCount": {
            "type": "integer",
            "format": "int32"
          },
          "doneItemsCount": {
            "type": "integer",
            "format": "int32"
          },
          "updatedTime": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "archived",
          "name",
          "totalItemsCount",
          "doneItemsCount"
        ]
      },
      "ChecklistBodyIn": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/TabIndentedLinesBodyIn"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ChecklistDocumentBody": {
        "type": "object",
        "properties": {
          "checklist": {
            "$ref": "#/components/schemas/Checklist"
          },
          "canConvertItemsToIssues": {
            "type": "boolean"
          }
        },
        "required": [
          "checklist",
          "canConvertItemsToIssues"
        ]
      },
      "ChecklistDocumentBodyCreateIn": {
        "type": "object",
        "properties": {
          "bodyIn": {
            "nullable": true,
            "$ref": "#/components/schemas/ChecklistBodyIn"
          }
        }
      },
      "ChecklistDocumentBodyEditIn": {
        "type": "object",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "owner": {
            "nullable": true,
            "type": "string"
          },
          "tag": {
            "nullable": true,
            "type": "string"
          },
          "topics": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bodyIn": {
            "nullable": true,
            "$ref": "#/components/schemas/ChecklistBodyIn"
          }
        },
        "required": [
          "topics"
        ]
      },
      "ClientInfo": {
        "type": "object",
        "properties": {
          "os": {
            "nullable": true,
            "$ref": "#/components/schemas/ClientOS"
          },
          "osVersion": {
            "nullable": true,
            "type": "string"
          },
          "browser": {
            "nullable": true,
            "$ref": "#/components/schemas/ClientBrowser"
          },
          "browserVersion": {
            "nullable": true,
            "type": "string"
          },
          "device": {
            "nullable": true,
            "type": "string"
          },
          "version": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "ClientSideActionContext": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/DeletePersonalFeedAction"
          },
          {
            "$ref": "#/components/schemas/NewMergeRequestFromIssueActionContext"
          },
          {
            "$ref": "#/components/schemas/ConfigurePermissionsAction"
          },
          {
            "$ref": "#/components/schemas/OpenPersonalFeedSettingsAction"
          },
          {
            "$ref": "#/components/schemas/NavigateUrlActionContext"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "CodeDiscussionAddedFeedEvent": {
        "type": "object",
        "properties": {
          "codeDiscussion": {
            "$ref": "#/components/schemas/CodeDiscussionRecord"
          },
          "codeReview": {
            "$ref": "#/components/schemas/CodeReviewRecord"
          }
        },
        "required": [
          "codeDiscussion",
          "codeReview"
        ]
      },
      "CodeDiscussionAnchor": {
        "type": "object",
        "properties": {
          "project": {
            "$ref": "#/components/schemas/ProjectKey"
          },
          "repository": {
            "type": "string"
          },
          "revision": {
            "type": "string"
          },
          "filename": {
            "nullable": true,
            "type": "string"
          },
          "line": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "oldLine": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "interpolatedLineState": {
            "nullable": true,
            "$ref": "#/components/schemas/InterpolatedLineState"
          }
        },
        "required": [
          "project",
          "repository",
          "revision"
        ]
      },
      "CodeDiscussionRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "project": {
            "nullable": true,
            "$ref": "#/components/schemas/PR_Project"
          },
          "anchor": {
            "$ref": "#/components/schemas/CodeDiscussionAnchor"
          },
          "endAnchor": {
            "nullable": true,
            "$ref": "#/components/schemas/CodeDiscussionAnchor"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "channel": {
            "$ref": "#/components/schemas/M2ChannelRecord"
          },
          "resolvable": {
            "nullable": true,
            "type": "boolean"
          },
          "resolved": {
            "type": "boolean"
          },
          "snippet": {
            "nullable": true,
            "$ref": "#/components/schemas/CodeDiscussionSnippet"
          },
          "suggestedEdit": {
            "nullable": true,
            "$ref": "#/components/schemas/CodeDiscussionSuggestedEdit"
          },
          "resolvedBy": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipal"
          },
          "pending": {
            "nullable": true,
            "type": "boolean"
          },
          "review": {
            "nullable": true,
            "$ref": "#/components/schemas/CodeReviewRecord"
          },
          "feedItemId": {
            "nullable": true,
            "type": "string"
          },
          "reviews": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeReviewRecord"
            }
          },
          "archived": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "projectId",
          "anchor",
          "created",
          "channel",
          "resolved",
          "archived"
        ]
      },
      "CodeDiscussionSnippet": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/CodeDiscussionSnippet.InlineDiffSnippet"
          },
          {
            "$ref": "#/components/schemas/CodeDiscussionSnippet.PlainSnippet"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "CodeDiscussionSnippet.InlineDiffSnippet": {
        "type": "object",
        "properties": {
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InlineDiffLine"
            }
          }
        },
        "required": [
          "lines"
        ]
      },
      "CodeDiscussionSnippet.PlainSnippet": {
        "type": "object",
        "properties": {
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeLine"
            }
          }
        },
        "required": [
          "lines"
        ]
      },
      "CodeDiscussionSuggestedEdit": {
        "type": "object",
        "properties": {
          "suggestionCommitId": {
            "type": "string"
          },
          "status": {
            "nullable": true,
            "$ref": "#/components/schemas/CodeDiscussionSuggestedEditState"
          },
          "resolvedBy": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipal"
          },
          "filePath": {
            "type": "string"
          },
          "hasConflicts": {
            "type": "boolean"
          },
          "identicalContents": {
            "nullable": true,
            "type": "boolean"
          },
          "startLineIndex": {
            "type": "integer",
            "format": "int32"
          },
          "endLineIndexInclusive": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "suggestionCommitId",
          "filePath",
          "hasConflicts",
          "startLineIndex",
          "endLineIndexInclusive"
        ]
      },
      "CodeLine": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "index": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "syntax": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SyntaxMarkup"
            }
          }
        },
        "required": [
          "text",
          "offset"
        ]
      },
      "CodeReviewDetailedInfo": {
        "type": "object",
        "properties": {
          "shortInfo": {
            "$ref": "#/components/schemas/CodeReviewRecord"
          },
          "commits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RevisionsInReview"
            }
          },
          "discussionCounter": {
            "$ref": "#/components/schemas/CodeReviewDiscussionCounter"
          },
          "unboundDiscussionCounter": {
            "nullable": true,
            "$ref": "#/components/schemas/CodeReviewUnboundDiscussionCounter"
          },
          "branches": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackedBranchesInReview"
            }
          }
        },
        "required": [
          "shortInfo",
          "commits",
          "discussionCounter",
          "branches"
        ]
      },
      "CodeReviewDiscussionAddedFeedEvent": {
        "type": "object",
        "properties": {
          "discussion": {
            "$ref": "#/components/schemas/CodeReviewDiscussionRecord"
          }
        },
        "required": [
          "discussion"
        ]
      },
      "CodeReviewDiscussionCounter": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "discussionCounter": {
            "$ref": "#/components/schemas/DiscussionCounter"
          }
        },
        "required": [
          "id",
          "discussionCounter"
        ]
      },
      "CodeReviewDiscussionRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "review": {
            "$ref": "#/components/schemas/CodeReviewRecord"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "channel": {
            "nullable": true,
            "$ref": "#/components/schemas/M2ChannelRecord"
          },
          "resolved": {
            "nullable": true,
            "type": "boolean"
          },
          "archived": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "review",
          "created",
          "archived"
        ]
      },
      "CodeReviewParticipant": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "role": {
            "$ref": "#/components/schemas/CodeReviewParticipantRole"
          },
          "state": {
            "nullable": true,
            "$ref": "#/components/schemas/ReviewerState"
          },
          "theirTurn": {
            "nullable": true,
            "type": "boolean"
          },
          "qualityGateSlots": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeReviewParticipantQualityGateSlot"
            }
          },
          "codeOwnerSlots": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeReviewParticipantCodeOwnerSlot"
            }
          },
          "addedAt": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "user",
          "role"
        ]
      },
      "CodeReviewParticipantCodeOwnerSlot": {
        "type": "object",
        "properties": {
          "rule": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pattern": {
            "type": "string"
          }
        },
        "required": [
          "pattern"
        ]
      },
      "CodeReviewParticipantQualityGateSlot": {
        "type": "object",
        "properties": {
          "rule": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "index": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "rule",
          "index"
        ]
      },
      "CodeReviewParticipantRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/CodeReviewParticipantRole"
          },
          "profile": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "reviewerState": {
            "nullable": true,
            "$ref": "#/components/schemas/ReviewerState"
          },
          "theirTurn": {
            "nullable": true,
            "type": "boolean"
          },
          "archived": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "projectId",
          "role",
          "profile",
          "archived"
        ]
      },
      "CodeReviewParticipantSlotBase": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/CodeReviewParticipantCodeOwnerSlot"
          },
          {
            "$ref": "#/components/schemas/CodeReviewParticipantQualityGateSlot"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "CodeReviewParticipants": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "participants": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeReviewParticipant"
            }
          },
          "reviewers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeReviewParticipantRecord"
            }
          },
          "authors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeReviewParticipantRecord"
            }
          },
          "watchers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeReviewParticipantRecord"
            }
          }
        },
        "required": [
          "id",
          "reviewers",
          "authors",
          "watchers"
        ]
      },
      "CodeReviewPendingMessageCounter": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "archived"
        ]
      },
      "CodeReviewRecord": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/CommitSetReviewRecord"
          },
          {
            "$ref": "#/components/schemas/MergeRequestRecord"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "CodeReviewSubscriptionFilter": {
        "type": "object",
        "properties": {
          "project": {
            "nullable": true,
            "$ref": "#/components/schemas/PR_Project"
          },
          "repository": {
            "nullable": true,
            "type": "string"
          },
          "authors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_MemberProfile"
            }
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_MemberProfile"
            }
          },
          "branchSpec": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pathSpec": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "titleRegex": {
            "type": "string"
          }
        },
        "required": [
          "authors",
          "participants",
          "branchSpec",
          "pathSpec",
          "titleRegex"
        ]
      },
      "CodeReviewSubscriptionFilterIn": {
        "type": "object",
        "properties": {
          "project": {
            "nullable": true,
            "type": "string"
          },
          "repository": {
            "nullable": true,
            "type": "string"
          },
          "authors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "participants": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "branchSpec": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pathSpec": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "titleRegex": {
            "type": "string"
          }
        },
        "required": [
          "authors",
          "participants",
          "branchSpec",
          "pathSpec",
          "titleRegex"
        ]
      },
      "CodeReviewUnboundDiscussionCounter": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "CodeReviewUnfurlContext": {
        "type": "object",
        "properties": {
          "reviewId": {
            "type": "string"
          }
        },
        "required": [
          "reviewId"
        ]
      },
      "CodeReviewWebhookEvent": {
        "type": "object",
        "properties": {
          "projectKey": {
            "$ref": "#/components/schemas/ProjectKey"
          },
          "repository": {
            "type": "string"
          },
          "reviewId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "isMergeRequest": {
            "type": "boolean"
          }
        },
        "required": [
          "projectKey",
          "repository",
          "reviewId",
          "title",
          "isMergeRequest"
        ]
      },
      "CodeReviewWithCount": {
        "type": "object",
        "properties": {
          "review": {
            "$ref": "#/components/schemas/CodeReviewRecord"
          },
          "messagesCount": {
            "type": "integer",
            "format": "int32"
          },
          "authors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitCommitterProfile"
            }
          },
          "participants": {
            "$ref": "#/components/schemas/CodeReviewParticipants"
          }
        },
        "required": [
          "review",
          "messagesCount",
          "authors",
          "participants"
        ]
      },
      "CodeSnippetAnchor": {
        "type": "object",
        "properties": {
          "projectKey": {
            "$ref": "#/components/schemas/ProjectKey"
          },
          "repository": {
            "type": "string"
          },
          "revision": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "lineIndex": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "lineStart": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "lineEnd": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "projectKey",
          "repository",
          "revision",
          "filename"
        ]
      },
      "CodeSuggestedEditHeadContentDetails": {
        "type": "object",
        "properties": {
          "codeDiscussion": {
            "$ref": "#/components/schemas/CodeDiscussionRecord"
          },
          "accepted": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "codeDiscussion"
        ]
      },
      "CommandDetail": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "description"
        ]
      },
      "Commands": {
        "type": "object",
        "properties": {
          "commands": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommandDetail"
            }
          }
        },
        "required": [
          "commands"
        ]
      },
      "CommitInfo": {
        "type": "object",
        "properties": {
          "project": {
            "$ref": "#/components/schemas/PR_Project"
          },
          "repository": {
            "type": "string"
          },
          "commitId": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "commitDate": {
            "type": "string",
            "format": "date-time"
          },
          "authorName": {
            "type": "string"
          },
          "authorEmail": {
            "type": "string"
          },
          "authorProfile": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_MemberProfile"
          }
        },
        "required": [
          "project",
          "repository",
          "commitId",
          "message",
          "commitDate",
          "authorName",
          "authorEmail"
        ]
      },
      "CommitLinksContainer": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/IssueCommits"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "CommitMessageUnfurlContext": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string"
          },
          "repo": {
            "type": "string"
          },
          "commitId": {
            "type": "string"
          }
        },
        "required": [
          "projectId",
          "repo",
          "commitId"
        ]
      },
      "CommitMessageUnfurlsRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "unfurls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Unfurl"
            }
          }
        },
        "required": [
          "id",
          "unfurls"
        ]
      },
      "CommitSetReviewRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "project": {
            "$ref": "#/components/schemas/ProjectKey"
          },
          "projectId": {
            "type": "string"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/CodeReviewState"
          },
          "canBeReopened": {
            "nullable": true,
            "type": "boolean"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "createdBy": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "turnBased": {
            "nullable": true,
            "type": "boolean"
          },
          "feedChannel": {
            "nullable": true,
            "$ref": "#/components/schemas/M2ChannelRecord"
          },
          "issueIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "commits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReviewCommit"
            }
          },
          "participants": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeReviewParticipant"
            }
          },
          "reviewers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeReviewParticipantRecord"
            }
          },
          "authors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeReviewParticipantRecord"
            }
          },
          "watchers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeReviewParticipantRecord"
            }
          },
          "discussionCounter": {
            "$ref": "#/components/schemas/DiscussionCounter"
          }
        },
        "required": [
          "id",
          "project",
          "projectId",
          "number",
          "title",
          "state",
          "createdAt",
          "issueIds",
          "commits",
          "reviewers",
          "authors",
          "watchers",
          "discussionCounter"
        ]
      },
      "ComposerPackageDependency": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "version",
          "type"
        ]
      },
      "ComposerPackageType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "ComposerPackageVersionDetails": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PackageType"
          },
          "repository": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "tags": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created": {
            "type": "integer",
            "format": "int64"
          },
          "accessed": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "downloads": {
            "type": "integer",
            "format": "int64"
          },
          "pinned": {
            "type": "boolean"
          },
          "comment": {
            "nullable": true,
            "type": "string"
          },
          "diskSize": {
            "type": "integer",
            "format": "int64"
          },
          "author": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipal"
          },
          "authors": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CPrincipal"
            }
          },
          "origin": {
            "nullable": true,
            "$ref": "#/components/schemas/PackageOrigin"
          },
          "metadata": {
            "nullable": true,
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "homepage": {
            "nullable": true,
            "type": "string"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComposerPackageDependency"
            }
          },
          "keywords": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "license": {
            "nullable": true,
            "type": "string"
          },
          "projectUrl": {
            "nullable": true,
            "type": "string"
          },
          "repositoryUrl": {
            "nullable": true,
            "type": "string"
          },
          "repositoryRevision": {
            "nullable": true,
            "type": "string"
          },
          "readme": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "type",
          "repository",
          "name",
          "version",
          "created",
          "downloads",
          "pinned",
          "diskSize",
          "dependencies"
        ]
      },
      "ComputePoolKey": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value"
        ]
      },
      "ConfigurePermissionsAction": {
        "type": "object",
        "properties": {
          "app": {
            "$ref": "#/components/schemas/ES_App"
          },
          "context": {
            "$ref": "#/components/schemas/PermissionContextIdentifier"
          }
        },
        "required": [
          "app",
          "context"
        ]
      },
      "ContactCFParameters": {
        "type": "object",
        "properties": {
          "contactKind": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_ContactKind"
          }
        }
      },
      "ContactCFType": {
        "type": "object",
        "properties": {}
      },
      "ContactCFValue": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "ContactExtraTag": {
        "type": "object",
        "properties": {
          "primary": {
            "type": "string"
          },
          "secondary": {
            "type": "string"
          },
          "issueStatus": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "primary",
          "secondary"
        ]
      },
      "ContactListCFType": {
        "type": "object",
        "properties": {}
      },
      "ContactListCFValue": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "values"
        ]
      },
      "ContainerHelmChart": {
        "type": "object",
        "properties": {
          "name": {
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "tags": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "projectUrl": {
            "nullable": true,
            "type": "string"
          },
          "sourceUrl": {
            "nullable": true,
            "type": "string"
          },
          "version": {
            "nullable": true,
            "type": "string"
          },
          "apiVersion": {
            "nullable": true,
            "type": "string"
          },
          "appVersion": {
            "nullable": true,
            "type": "string"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContainerHelmChartDependency"
            }
          },
          "type": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "dependencies"
        ]
      },
      "ContainerHelmChartDependency": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "repository": {
            "nullable": true,
            "type": "string"
          },
          "condition": {
            "nullable": true,
            "type": "string"
          },
          "tags": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "version"
        ]
      },
      "ContainerImage": {
        "type": "object",
        "properties": {
          "name": {
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "tags": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "projectUrl": {
            "nullable": true,
            "type": "string"
          },
          "sourceUrl": {
            "nullable": true,
            "type": "string"
          },
          "version": {
            "nullable": true,
            "type": "string"
          },
          "platform": {
            "nullable": true,
            "$ref": "#/components/schemas/ContainerImagePlatform"
          },
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContainerImageLayer"
            }
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContainerManifest"
            }
          },
          "config": {
            "nullable": true,
            "$ref": "#/components/schemas/ContainerImageConfig"
          },
          "annotation": {
            "nullable": true,
            "$ref": "#/components/schemas/ContainerImageAnnotation"
          }
        },
        "required": [
          "history",
          "children"
        ]
      },
      "ContainerImageAnnotation": {
        "type": "object",
        "properties": {
          "created": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "buildName": {
            "nullable": true,
            "type": "string"
          },
          "buildUrl": {
            "nullable": true,
            "type": "string"
          },
          "revision": {
            "nullable": true,
            "type": "string"
          },
          "vendor": {
            "nullable": true,
            "type": "string"
          },
          "documentationUrl": {
            "nullable": true,
            "type": "string"
          },
          "licenses": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "ContainerImageConfig": {
        "type": "object",
        "properties": {
          "userName": {
            "nullable": true,
            "type": "string"
          },
          "ports": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "volumes": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "env": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "workingDir": {
            "nullable": true,
            "type": "string"
          },
          "entryPoint": {
            "nullable": true,
            "type": "string"
          },
          "cmd": {
            "nullable": true,
            "type": "string"
          },
          "labels": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ContainerImageLayer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "statement": {
            "type": "string"
          },
          "command": {
            "type": "string"
          },
          "size": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "id",
          "statement",
          "command"
        ]
      },
      "ContainerImagePlatform": {
        "type": "object",
        "properties": {
          "os": {
            "type": "string"
          },
          "osVersion": {
            "nullable": true,
            "type": "string"
          },
          "arch": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "os"
        ]
      },
      "ContainerManifest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "digest": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created": {
            "type": "integer",
            "format": "int64"
          },
          "schemaVersion": {
            "type": "integer",
            "format": "int32"
          },
          "mediaType": {
            "type": "string"
          },
          "manifestType": {
            "type": "string"
          },
          "totalSize": {
            "type": "integer",
            "format": "int64"
          },
          "image": {
            "nullable": true,
            "$ref": "#/components/schemas/ContainerImage"
          },
          "chart": {
            "nullable": true,
            "$ref": "#/components/schemas/ContainerHelmChart"
          }
        },
        "required": [
          "name",
          "digest",
          "tags",
          "created",
          "schemaVersion",
          "mediaType",
          "manifestType",
          "totalSize"
        ]
      },
      "ContainerPackageType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "ContainerPackageVersionDetails": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PackageType"
          },
          "repository": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "tags": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created": {
            "type": "integer",
            "format": "int64"
          },
          "accessed": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "downloads": {
            "type": "integer",
            "format": "int64"
          },
          "pinned": {
            "type": "boolean"
          },
          "comment": {
            "nullable": true,
            "type": "string"
          },
          "diskSize": {
            "type": "integer",
            "format": "int64"
          },
          "author": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipal"
          },
          "authors": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CPrincipal"
            }
          },
          "origin": {
            "nullable": true,
            "$ref": "#/components/schemas/PackageOrigin"
          },
          "metadata": {
            "nullable": true,
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "schemaVersion": {
            "type": "integer",
            "format": "int32"
          },
          "mediaType": {
            "type": "string"
          },
          "manifestType": {
            "type": "string"
          },
          "image": {
            "nullable": true,
            "$ref": "#/components/schemas/ContainerImage"
          },
          "chart": {
            "nullable": true,
            "$ref": "#/components/schemas/ContainerHelmChart"
          }
        },
        "required": [
          "type",
          "repository",
          "name",
          "version",
          "created",
          "downloads",
          "pinned",
          "diskSize",
          "schemaVersion",
          "mediaType",
          "manifestType"
        ]
      },
      "ContextMenuItemUiExtensionApi": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ChatMessageMenuItemUiExtensionApi"
          },
          {
            "$ref": "#/components/schemas/IssueMenuItemUiExtensionApi"
          },
          {
            "$ref": "#/components/schemas/MeetingMenuItemUiExtensionApi"
          },
          {
            "$ref": "#/components/schemas/DocumentMenuItemUiExtensionApi"
          },
          {
            "$ref": "#/components/schemas/DocumentFolderMenuItemUiExtensionApi"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ContextMenuItemUiExtensionIn": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/DocumentMenuItemUiExtensionIn"
          },
          {
            "$ref": "#/components/schemas/ChatMessageMenuItemUiExtensionIn"
          },
          {
            "$ref": "#/components/schemas/DocumentFolderMenuItemUiExtensionIn"
          },
          {
            "$ref": "#/components/schemas/MeetingMenuItemUiExtensionIn"
          },
          {
            "$ref": "#/components/schemas/IssueMenuItemUiExtensionIn"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "Currency": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "sign": {
            "nullable": true,
            "type": "string"
          },
          "signAsPrefix": {
            "type": "boolean"
          },
          "hasCents": {
            "type": "boolean"
          }
        },
        "required": [
          "code",
          "signAsPrefix",
          "hasCents"
        ]
      },
      "CustomBoardIssueInputField": {
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/components/schemas/ExtendedTypeKey"
          },
          "fieldId": {
            "type": "string"
          }
        },
        "required": [
          "key",
          "fieldId"
        ]
      },
      "CustomField": {
        "type": "object",
        "properties": {
          "extendedType": {
            "$ref": "#/components/schemas/ExtendedType"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "key": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/CFType"
          },
          "constraint": {
            "nullable": true,
            "$ref": "#/components/schemas/CFConstraint"
          },
          "required": {
            "type": "boolean"
          },
          "private": {
            "type": "boolean"
          },
          "access": {
            "nullable": true,
            "$ref": "#/components/schemas/AccessType"
          },
          "defaultValue": {
            "$ref": "#/components/schemas/CFValue"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "scope": {
            "nullable": true,
            "$ref": "#/components/schemas/ExtendedTypeScope"
          },
          "deleted": {
            "nullable": true,
            "type": "boolean"
          },
          "parameters": {
            "nullable": true,
            "$ref": "#/components/schemas/CFParameters"
          },
          "archived": {
            "type": "boolean"
          }
        },
        "required": [
          "extendedType",
          "id",
          "name",
          "type",
          "required",
          "private",
          "defaultValue",
          "order",
          "archived"
        ]
      },
      "CustomFieldData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/CustomFieldType"
          },
          "multivalued": {
            "type": "boolean"
          },
          "parameters": {
            "nullable": true,
            "$ref": "#/components/schemas/CFParameters"
          },
          "required": {
            "type": "boolean"
          },
          "defaultValue": {
            "$ref": "#/components/schemas/CFValue"
          },
          "constraint": {
            "nullable": true,
            "$ref": "#/components/schemas/CFConstraint"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "archived": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "multivalued",
          "required",
          "defaultValue",
          "order",
          "archived"
        ]
      },
      "CustomFieldInputValue": {
        "type": "object",
        "properties": {
          "fieldId": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/CFInputValue"
          }
        },
        "required": [
          "fieldId",
          "value"
        ]
      },
      "CustomFieldValue": {
        "type": "object",
        "properties": {
          "field": {
            "$ref": "#/components/schemas/CustomField"
          },
          "value": {
            "$ref": "#/components/schemas/CFValue"
          }
        },
        "required": [
          "field",
          "value"
        ]
      },
      "CustomFieldValueData": {
        "type": "object",
        "properties": {
          "customField": {
            "$ref": "#/components/schemas/CustomFieldData"
          },
          "value": {
            "$ref": "#/components/schemas/CFValue"
          }
        },
        "required": [
          "customField",
          "value"
        ]
      },
      "CustomFieldValueUpdate": {
        "type": "object",
        "properties": {
          "field": {
            "$ref": "#/components/schemas/CFIdentifier"
          },
          "newValue": {
            "$ref": "#/components/schemas/CFInputValue"
          }
        },
        "required": [
          "field",
          "newValue"
        ]
      },
      "CustomFieldsRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldValue"
            }
          }
        },
        "required": [
          "id",
          "values"
        ]
      },
      "CustomGenericSubscriptionIn": {
        "type": "object",
        "properties": {
          "subjectCode": {
            "type": "string"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionFilterIn"
            }
          },
          "eventTypeCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "subjectCode",
          "filters",
          "eventTypeCodes"
        ]
      },
      "CustomHttpHeaderDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ]
      },
      "DTO_FullRightWithoutType": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "grantedForUsers": {
            "type": "boolean"
          },
          "featureFlag": {
            "nullable": true,
            "$ref": "#/components/schemas/FeatureFlag"
          }
        },
        "required": [
          "code",
          "title",
          "grantedForUsers"
        ]
      },
      "DTO_Meeting": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "summary": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_Location"
            }
          },
          "profiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_MemberProfile"
            }
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_Team"
            }
          },
          "occurrenceRule": {
            "$ref": "#/components/schemas/CalendarEventSpec"
          },
          "origin": {
            "$ref": "#/components/schemas/MeetingOrigin"
          },
          "conferenceLink": {
            "nullable": true,
            "type": "string"
          },
          "visibility": {
            "$ref": "#/components/schemas/MeetingVisibility"
          },
          "modificationPreference": {
            "$ref": "#/components/schemas/MeetingModificationPreference"
          },
          "joiningPreference": {
            "nullable": true,
            "$ref": "#/components/schemas/MeetingJoiningPreference"
          },
          "organizer": {
            "nullable": true,
            "$ref": "#/components/schemas/MeetingOrganizer"
          },
          "etag": {
            "type": "integer",
            "format": "int64"
          },
          "privateDataSubstituted": {
            "type": "boolean"
          },
          "canModify": {
            "type": "boolean"
          },
          "canDelete": {
            "type": "boolean"
          },
          "canJoin": {
            "type": "boolean"
          },
          "externalParticipants": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "linkToExternalSource": {
            "nullable": true,
            "type": "string"
          },
          "eventAttachments": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeetingAttachment"
            }
          },
          "conferenceData": {
            "nullable": true,
            "$ref": "#/components/schemas/EventConferenceData"
          },
          "channelRef": {
            "nullable": true,
            "$ref": "#/components/schemas/M2ChannelRecord"
          },
          "externalSource": {
            "nullable": true,
            "$ref": "#/components/schemas/EventExternalSource"
          },
          "calendar": {
            "nullable": true,
            "$ref": "#/components/schemas/CalendarInfo"
          },
          "canLeaveOrRsvp": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "archived",
          "summary",
          "locations",
          "profiles",
          "teams",
          "occurrenceRule",
          "origin",
          "visibility",
          "modificationPreference",
          "etag",
          "privateDataSubstituted",
          "canModify",
          "canDelete",
          "canJoin",
          "externalParticipants"
        ]
      },
      "DTO_MeetingRSVP": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "member": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "meeting": {
            "$ref": "#/components/schemas/DTO_Meeting"
          },
          "status": {
            "$ref": "#/components/schemas/EventParticipationStatus"
          }
        },
        "required": [
          "id",
          "archived",
          "member",
          "meeting",
          "status"
        ]
      },
      "DTO_Right": {
        "type": "object",
        "properties": {
          "typeCode": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "typeCode",
          "code"
        ]
      },
      "DTO_RightType": {
        "type": "object",
        "properties": {
          "typeCode": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "typeCode",
          "title"
        ]
      },
      "DTO_RightType_Right": {
        "type": "object",
        "properties": {
          "rightType": {
            "$ref": "#/components/schemas/DTO_RightType"
          },
          "rights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_FullRightWithoutType"
            }
          }
        },
        "required": [
          "rightType",
          "rights"
        ]
      },
      "DTO_RightsDeps": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "deps": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "code",
          "deps"
        ]
      },
      "DTO_RightsGroup": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "rights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_Right"
            }
          }
        },
        "required": [
          "title",
          "priority",
          "rights"
        ]
      },
      "DTO_RightsWithHierarchy": {
        "type": "object",
        "properties": {
          "rights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_RightType_Right"
            }
          },
          "rightsGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_RightsGroup"
            }
          },
          "deps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_RightsDeps"
            }
          }
        },
        "required": [
          "rights",
          "rightsGroups",
          "deps"
        ]
      },
      "DashboardItemData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "isEnabled": {
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "isEnabled"
        ]
      },
      "DashboardPreferencesRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "data": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DashboardItemData"
              }
            }
          },
          "type": {
            "nullable": true,
            "$ref": "#/components/schemas/DashboardContainerType"
          }
        },
        "required": [
          "id",
          "archived"
        ]
      },
      "DataProducerOptions": {
        "type": "object",
        "properties": {
          "sfuOptions": {
            "$ref": "#/components/schemas/SFUDataProducerOptions"
          },
          "closed": {
            "type": "boolean"
          },
          "userConnectionId": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "routerId": {
            "type": "string"
          }
        },
        "required": [
          "sfuOptions",
          "closed",
          "routerId"
        ]
      },
      "DateCFConstraint": {
        "type": "object",
        "properties": {
          "min": {
            "nullable": true,
            "type": "string",
            "format": "full-date"
          },
          "max": {
            "nullable": true,
            "type": "string",
            "format": "full-date"
          },
          "message": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "DateCFType": {
        "type": "object",
        "properties": {}
      },
      "DateCFValue": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true,
            "type": "string",
            "format": "full-date"
          }
        }
      },
      "DateTimeCFConstraint": {
        "type": "object",
        "properties": {
          "min": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "max": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "message": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "DateTimeCFType": {
        "type": "object",
        "properties": {}
      },
      "DateTimeCFValue": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DateTimeViewParams": {
        "type": "object",
        "properties": {
          "format": {
            "nullable": true,
            "$ref": "#/components/schemas/UnfurlDateTimeFormat"
          },
          "style": {
            "nullable": true,
            "$ref": "#/components/schemas/UnfurlDateTimeStyle"
          },
          "template": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "DeleteMessage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "DeletePersonalFeedAction": {
        "type": "object",
        "properties": {
          "feed": {
            "type": "string"
          },
          "feedId": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "feed"
        ]
      },
      "DeletedAttachment": {
        "type": "object",
        "properties": {
          "deletedIdentity": {
            "type": "string"
          }
        },
        "required": [
          "deletedIdentity"
        ]
      },
      "DeployTargetDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "lastUpdated": {
            "nullable": true,
            "type": "string"
          },
          "lastDeployed": {
            "nullable": true,
            "type": "string"
          },
          "current": {
            "nullable": true,
            "$ref": "#/components/schemas/DeploymentInfo"
          },
          "next": {
            "nullable": true,
            "$ref": "#/components/schemas/DeploymentInfo"
          },
          "connectedChannel": {
            "nullable": true,
            "$ref": "#/components/schemas/M2ChannelRecord"
          }
        },
        "required": [
          "id",
          "name",
          "key",
          "description",
          "createdAt"
        ]
      },
      "DeployTargetRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "createdBy": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipal"
          },
          "lastUpdated": {
            "nullable": true,
            "type": "string"
          },
          "lastDeployed": {
            "nullable": true,
            "type": "string"
          },
          "channelId": {
            "type": "string"
          },
          "channel": {
            "$ref": "#/components/schemas/M2ChannelRecord"
          },
          "repositories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeployTargetRepositoryDTO"
            }
          },
          "manualControl": {
            "type": "boolean"
          },
          "hangTimeoutMinutes": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "failTimeoutMinutes": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "archived": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "projectId",
          "name",
          "key",
          "description",
          "createdAt",
          "channelId",
          "channel",
          "repositories",
          "manualControl",
          "archived"
        ]
      },
      "DeployTargetRepositoryDTO": {
        "type": "object",
        "properties": {
          "repositoryName": {
            "type": "string"
          }
        },
        "required": [
          "repositoryName"
        ]
      },
      "DeploymentCFInputValue": {
        "type": "object",
        "properties": {
          "deployment": {
            "nullable": true,
            "$ref": "#/components/schemas/DeploymentIdentifier"
          }
        }
      },
      "DeploymentCFType": {
        "type": "object",
        "properties": {}
      },
      "DeploymentCFValue": {
        "type": "object",
        "properties": {
          "deployment": {
            "nullable": true,
            "$ref": "#/components/schemas/DeploymentRecord"
          }
        }
      },
      "DeploymentCommitRefDetails": {
        "type": "object",
        "properties": {
          "repositoryName": {
            "type": "string"
          },
          "branch": {
            "type": "string"
          },
          "commit": {
            "type": "string"
          },
          "timestamp": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "head": {
            "type": "boolean"
          },
          "totalCommits": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "totalMerges": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "totalIssues": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "rollback": {
            "type": "boolean"
          }
        },
        "required": [
          "repositoryName",
          "branch",
          "commit",
          "head",
          "rollback"
        ]
      },
      "DeploymentCommitReference": {
        "type": "object",
        "properties": {
          "repositoryName": {
            "type": "string"
          },
          "branch": {
            "type": "string"
          },
          "commit": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "repositoryName",
          "branch"
        ]
      },
      "DeploymentData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "scheduledStart": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "startedAt": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "finishedAt": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "targetKey": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/DeploymentStatus"
          },
          "syncStatus": {
            "$ref": "#/components/schemas/DeploymentSyncStatus"
          },
          "externalLink": {
            "nullable": true,
            "$ref": "#/components/schemas/ExternalLink"
          },
          "commitRefs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeploymentCommitRefDetails"
            }
          }
        },
        "required": [
          "id",
          "version",
          "createdAt",
          "targetKey",
          "status",
          "syncStatus",
          "commitRefs"
        ]
      },
      "DeploymentInfo": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/DeploymentData"
          },
          {
            "$ref": "#/components/schemas/DeploymentRecord"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "DeploymentM2ChannelInfo": {
        "type": "object",
        "properties": {
          "notificationDefaults": {
            "$ref": "#/components/schemas/ChannelSpecificDefaults"
          },
          "deployment": {
            "$ref": "#/components/schemas/DeploymentRecord"
          },
          "project": {
            "nullable": true,
            "$ref": "#/components/schemas/PR_Project"
          }
        },
        "required": [
          "notificationDefaults",
          "deployment"
        ]
      },
      "DeploymentM2DetailsNoThread": {
        "type": "object",
        "properties": {}
      },
      "DeploymentM2DetailsWithThread": {
        "type": "object",
        "properties": {
          "deployment": {
            "$ref": "#/components/schemas/DeploymentRecord"
          }
        },
        "required": [
          "deployment"
        ]
      },
      "DeploymentRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "scheduledStart": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "startedAt": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "finishedAt": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/DeploymentStatus"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "channel": {
            "$ref": "#/components/schemas/M2ChannelRecord"
          },
          "target": {
            "$ref": "#/components/schemas/DeployTargetRecord"
          },
          "targetKey": {
            "type": "string"
          },
          "syncStatus": {
            "$ref": "#/components/schemas/DeploymentSyncStatus"
          },
          "commitRefs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeploymentCommitRefDetails"
            }
          },
          "jobIds": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "externalLink": {
            "nullable": true,
            "$ref": "#/components/schemas/ExternalLink"
          },
          "archived": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "version",
          "createdAt",
          "status",
          "channel",
          "target",
          "targetKey",
          "syncStatus",
          "commitRefs",
          "archived"
        ]
      },
      "DeploymentTargetM2ChannelInfo": {
        "type": "object",
        "properties": {
          "notificationDefaults": {
            "$ref": "#/components/schemas/ChannelSpecificDefaults"
          },
          "deployTarget": {
            "$ref": "#/components/schemas/DeployTargetRecord"
          },
          "project": {
            "$ref": "#/components/schemas/PR_Project"
          }
        },
        "required": [
          "notificationDefaults",
          "deployTarget",
          "project"
        ]
      },
      "DeploymentWebhookEvent": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/KMetaMod"
          },
          "projectKey": {
            "type": "string"
          },
          "targetId": {
            "type": "string"
          },
          "deploymentId": {
            "type": "string"
          },
          "statusMod": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "$ref": "#/components/schemas/DeploymentStatus"
              },
              "new": {
                "$ref": "#/components/schemas/DeploymentStatus"
              }
            },
            "required": [
              "old",
              "new"
            ]
          }
        },
        "required": [
          "meta",
          "projectKey",
          "targetId",
          "deploymentId"
        ]
      },
      "DeploymentsSubscriptionFilter": {
        "type": "object",
        "properties": {
          "project": {
            "nullable": true,
            "$ref": "#/components/schemas/PR_Project"
          },
          "repositories": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "targetIdentifiers": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "DeploymentsSubscriptionFilterIn": {
        "type": "object",
        "properties": {
          "project": {
            "type": "string"
          },
          "repositories": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "targetIdentifiers": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "project"
        ]
      },
      "Diff": {
        "type": "object",
        "properties": {
          "added": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "removed": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "removeAll": {
            "type": "boolean"
          }
        },
        "required": [
          "added",
          "removed",
          "removeAll"
        ]
      },
      "DiffContext": {
        "type": "object",
        "properties": {
          "left": {
            "nullable": true,
            "$ref": "#/components/schemas/DiffSide"
          },
          "right": {
            "$ref": "#/components/schemas/DiffSide"
          }
        },
        "required": [
          "right"
        ]
      },
      "DiffSide": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/DiffSide.Empty"
          },
          {
            "$ref": "#/components/schemas/DiffSide.NonEmpty"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "DiffSide.Empty": {
        "type": "object",
        "properties": {
          "revision": {
            "type": "string"
          }
        },
        "required": [
          "revision"
        ]
      },
      "DiffSide.NonEmpty": {
        "type": "object",
        "properties": {
          "revision": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        },
        "required": [
          "revision",
          "path"
        ]
      },
      "DiscussionCounter": {
        "type": "object",
        "properties": {
          "resolved": {
            "type": "integer",
            "format": "int32"
          },
          "unresolved": {
            "type": "integer",
            "format": "int32"
          },
          "unresolvedSuggestedEdits": {
            "type": "integer",
            "format": "int32"
          },
          "acceptedSuggestedEdits": {
            "type": "integer",
            "format": "int32"
          },
          "rejectedSuggestedEdits": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "resolved",
          "unresolved",
          "unresolvedSuggestedEdits",
          "acceptedSuggestedEdits",
          "rejectedSuggestedEdits"
        ]
      },
      "Document": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "alias": {
            "type": "string"
          },
          "publicationDetails": {
            "nullable": true,
            "$ref": "#/components/schemas/PublicationDetails"
          },
          "folderRef": {
            "nullable": true,
            "$ref": "#/components/schemas/DocumentFolder"
          },
          "bodyType": {
            "nullable": true,
            "$ref": "#/components/schemas/DocumentBodyType"
          },
          "bodyInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/DocumentBodyInfo"
          },
          "archived": {
            "type": "boolean"
          },
          "archivedBy": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipal"
          },
          "archivedAt": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipal"
          },
          "created": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipal"
          },
          "modified": {
            "type": "string",
            "format": "date-time"
          },
          "documentBody": {
            "$ref": "#/components/schemas/DocumentBodyInfo"
          }
        },
        "required": [
          "id",
          "title",
          "alias",
          "archived",
          "modified",
          "documentBody"
        ]
      },
      "DocumentAppUnfurlContext": {
        "type": "object",
        "properties": {
          "documentId": {
            "type": "string"
          }
        },
        "required": [
          "documentId"
        ]
      },
      "DocumentBodyCreateIn": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/TextDocumentBodyCreateTypedIn"
          },
          {
            "$ref": "#/components/schemas/FileDocumentBodyCreateIn"
          },
          {
            "$ref": "#/components/schemas/ChecklistDocumentBodyCreateIn"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "DocumentBodyInfo": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/InaccessibleDocumentBody"
          },
          {
            "$ref": "#/components/schemas/FileDocumentBody"
          },
          {
            "$ref": "#/components/schemas/FileDocumentBodyInfo"
          },
          {
            "$ref": "#/components/schemas/TextDocumentBodyInfo"
          },
          {
            "$ref": "#/components/schemas/TextDocument"
          },
          {
            "$ref": "#/components/schemas/ChecklistDocumentBody"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "DocumentBodyUpdateIn": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/FileDocumentBodyUpdateIn"
          },
          {
            "$ref": "#/components/schemas/ChecklistDocumentBodyEditIn"
          },
          {
            "$ref": "#/components/schemas/TextDocumentBodyConvertTypeIn"
          },
          {
            "$ref": "#/components/schemas/TextDocumentBodyUpdateIn"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "DocumentCFInputValue": {
        "type": "object",
        "properties": {
          "documentId": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "DocumentCFParameters": {
        "type": "object",
        "properties": {
          "documentScope": {
            "$ref": "#/components/schemas/DocumentCFScope"
          }
        },
        "required": [
          "documentScope"
        ]
      },
      "DocumentCFParametersInput": {
        "type": "object",
        "properties": {
          "documentScope": {
            "$ref": "#/components/schemas/DocumentCFScopeInput"
          }
        },
        "required": [
          "documentScope"
        ]
      },
      "DocumentCFScope": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/DocumentCFScope.Project"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "DocumentCFScope.Project": {
        "type": "object",
        "properties": {
          "project": {
            "$ref": "#/components/schemas/PR_Project"
          }
        },
        "required": [
          "project"
        ]
      },
      "DocumentCFScopeInput": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/DocumentCFScopeInput.Project"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "DocumentCFScopeInput.Project": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string"
          }
        },
        "required": [
          "projectId"
        ]
      },
      "DocumentCFType": {
        "type": "object",
        "properties": {}
      },
      "DocumentCFValue": {
        "type": "object",
        "properties": {
          "document": {
            "nullable": true,
            "$ref": "#/components/schemas/Document"
          }
        }
      },
      "DocumentContainerInfo": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/PersonalDocumentContainerInfo"
          },
          {
            "$ref": "#/components/schemas/BookContainerInfo"
          },
          {
            "$ref": "#/components/schemas/InaccessibleContainerInfo"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "DocumentCustomSubscriptionFilter": {
        "type": "object",
        "properties": {
          "project": {
            "nullable": true,
            "$ref": "#/components/schemas/PR_Project"
          },
          "books": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KB_Book"
            }
          },
          "folders": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KbFolderItem"
            }
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KbDocumentItem"
            }
          }
        },
        "required": [
          "documents"
        ]
      },
      "DocumentCustomSubscriptionFilterIn": {
        "type": "object",
        "properties": {
          "project": {
            "nullable": true,
            "type": "string"
          },
          "books": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "folders": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "documents": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "documents"
        ]
      },
      "DocumentEditableByMe": {
        "type": "object",
        "properties": {}
      },
      "DocumentEditorsChangedEvent": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/KMetaMod"
          },
          "document": {
            "type": "string"
          }
        },
        "required": [
          "meta",
          "document"
        ]
      },
      "DocumentFolder": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "parent": {
            "nullable": true,
            "$ref": "#/components/schemas/DocumentFolder"
          },
          "name": {
            "type": "string"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipal"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipal"
          },
          "cover": {
            "nullable": true,
            "$ref": "#/components/schemas/Document"
          }
        },
        "required": [
          "id",
          "archived",
          "name",
          "created",
          "updated"
        ]
      },
      "DocumentFolderEditableByMe": {
        "type": "object",
        "properties": {}
      },
      "DocumentFolderMenuActionContext": {
        "type": "object",
        "properties": {
          "folderIdentifier": {
            "$ref": "#/components/schemas/FolderIdentifier"
          },
          "projectIdentifier": {
            "nullable": true,
            "$ref": "#/components/schemas/ProjectIdentifier"
          }
        },
        "required": [
          "folderIdentifier"
        ]
      },
      "DocumentFolderMenuItemUiExtensionApi": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "menuItemUniqueCode": {
            "type": "string"
          },
          "visibilityFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentFolderMenuItemVisibilityFilterApi"
            }
          }
        },
        "required": [
          "displayName",
          "menuItemUniqueCode",
          "visibilityFilters"
        ]
      },
      "DocumentFolderMenuItemUiExtensionIn": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "menuItemUniqueCode": {
            "type": "string"
          },
          "visibilityFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentFolderMenuItemVisibilityFilterIn"
            }
          }
        },
        "required": [
          "displayName",
          "menuItemUniqueCode",
          "visibilityFilters"
        ]
      },
      "DocumentFolderMenuItemVisibilityFilterApi": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/DocumentFolderEditableByMe"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "DocumentFolderMenuItemVisibilityFilterIn": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/DocumentFolderEditableByMe"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "DocumentFolderPermissionContext": {
        "type": "object",
        "properties": {
          "folder": {
            "$ref": "#/components/schemas/DocumentFolder"
          }
        },
        "required": [
          "folder"
        ]
      },
      "DocumentFolderWithChildren": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "containerLinkId": {
            "type": "string"
          },
          "containerInfo": {
            "$ref": "#/components/schemas/DocumentContainerInfo"
          },
          "subfolders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentFolderWithChildren"
            }
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document"
            }
          }
        },
        "required": [
          "id",
          "archived",
          "containerLinkId",
          "containerInfo",
          "subfolders",
          "documents"
        ]
      },
      "DocumentHistoryUnfurlDetails": {
        "type": "object",
        "properties": {
          "document": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "version": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "base": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "preview": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "version2": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "base2": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "preview2": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "document",
          "title"
        ]
      },
      "DocumentListCFInputValue": {
        "type": "object",
        "properties": {
          "documents": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "documents"
        ]
      },
      "DocumentListCFType": {
        "type": "object",
        "properties": {}
      },
      "DocumentListCFValue": {
        "type": "object",
        "properties": {
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document"
            }
          }
        },
        "required": [
          "documents"
        ]
      },
      "DocumentMark": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/RtCodeMark"
          },
          {
            "$ref": "#/components/schemas/RtItalicMark"
          },
          {
            "$ref": "#/components/schemas/RtStrikeThroughMark"
          },
          {
            "$ref": "#/components/schemas/RtBoldMark"
          },
          {
            "$ref": "#/components/schemas/RtLinkMark"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "DocumentMenuActionContext": {
        "type": "object",
        "properties": {
          "documentId": {
            "type": "string"
          },
          "projectIdentifier": {
            "nullable": true,
            "$ref": "#/components/schemas/ProjectIdentifier"
          }
        },
        "required": [
          "documentId"
        ]
      },
      "DocumentMenuItemUiExtensionApi": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "menuItemUniqueCode": {
            "type": "string"
          },
          "visibilityFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentMenuItemVisibilityFilterApi"
            }
          }
        },
        "required": [
          "displayName",
          "menuItemUniqueCode",
          "visibilityFilters"
        ]
      },
      "DocumentMenuItemUiExtensionIn": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "menuItemUniqueCode": {
            "type": "string"
          },
          "visibilityFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentMenuItemVisibilityFilterIn"
            }
          }
        },
        "required": [
          "displayName",
          "menuItemUniqueCode",
          "visibilityFilters"
        ]
      },
      "DocumentMenuItemVisibilityFilterApi": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/DocumentEditableByMe"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "DocumentMenuItemVisibilityFilterIn": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/DocumentEditableByMe"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "DocumentMetaWebhookEvent": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/KMetaMod"
          },
          "document": {
            "type": "string"
          },
          "deleted": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "boolean"
              },
              "new": {
                "type": "boolean"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "published": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "boolean"
              },
              "new": {
                "type": "boolean"
              }
            },
            "required": [
              "old",
              "new"
            ]
          }
        },
        "required": [
          "meta",
          "document"
        ]
      },
      "DocumentPermissionContext": {
        "type": "object",
        "properties": {
          "document": {
            "$ref": "#/components/schemas/Document"
          }
        },
        "required": [
          "document"
        ]
      },
      "DocumentWebhookEvent": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/KMetaMod"
          },
          "document": {
            "type": "string"
          },
          "changeAuthors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CPrincipal"
            }
          },
          "version": {
            "type": "string",
            "format": "date-time"
          },
          "base": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "meta",
          "document",
          "changeAuthors",
          "version",
          "base"
        ]
      },
      "DryCleanupResults": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/DryCleanupResults.Failure"
          },
          {
            "$ref": "#/components/schemas/DryCleanupResults.Results"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "DryCleanupResults.Failure": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          }
        },
        "required": [
          "error"
        ]
      },
      "DryCleanupResults.Results": {
        "type": "object",
        "properties": {
          "totalSize": {
            "type": "integer",
            "format": "int64"
          },
          "packageVersions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PackageVersionRef"
            }
          }
        },
        "required": [
          "totalSize",
          "packageVersions"
        ]
      },
      "DslEvaluationConfig": {
        "type": "object",
        "properties": {
          "experimentalOptIns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "runtimeInfo": {
            "$ref": "#/components/schemas/DslRuntimeInfo"
          }
        },
        "required": [
          "experimentalOptIns",
          "runtimeInfo"
        ]
      },
      "DslRuntimeInfo": {
        "type": "object",
        "properties": {
          "mavenRepoUrl": {
            "type": "string"
          },
          "mavenCoordinates": {
            "$ref": "#/components/schemas/MavenCoordinates"
          }
        },
        "required": [
          "mavenRepoUrl",
          "mavenCoordinates"
        ]
      },
      "ES_App": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "owner": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "ownerApp": {
            "nullable": true,
            "$ref": "#/components/schemas/ES_App"
          },
          "clientId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "picture": {
            "nullable": true,
            "type": "string"
          },
          "defaultExternalPicture": {
            "nullable": true,
            "type": "string"
          },
          "createdAt": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "kind": {
            "nullable": true,
            "type": "string"
          },
          "presentableName": {
            "nullable": true,
            "type": "string"
          },
          "applicationType": {
            "nullable": true,
            "$ref": "#/components/schemas/ApplicationType"
          },
          "clientCredentialsFlowEnabled": {
            "nullable": true,
            "type": "boolean"
          },
          "codeFlowEnabled": {
            "nullable": true,
            "type": "boolean"
          },
          "codeFlowRedirectURIs": {
            "nullable": true,
            "type": "string"
          },
          "pkceRequired": {
            "nullable": true,
            "type": "boolean"
          },
          "implicitFlowEnabled": {
            "nullable": true,
            "type": "boolean"
          },
          "implicitFlowRedirectURIs": {
            "nullable": true,
            "type": "string"
          },
          "endpointURI": {
            "nullable": true,
            "type": "string"
          },
          "hasVerificationToken": {
            "nullable": true,
            "type": "boolean"
          },
          "hasSigningKey": {
            "nullable": true,
            "type": "boolean"
          },
          "hasPublicKeySignature": {
            "nullable": true,
            "type": "boolean"
          },
          "endpointSslVerification": {
            "nullable": true,
            "type": "boolean"
          },
          "basicAuthUsername": {
            "nullable": true,
            "type": "string"
          },
          "hasBearerToken": {
            "nullable": true,
            "type": "boolean"
          },
          "sslKeystoreAuth": {
            "nullable": true,
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "domains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationUnfurlDomain"
            }
          },
          "patterns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationUnfurlPattern"
            }
          },
          "contexts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppUiExtContextData"
            }
          },
          "metadata": {
            "nullable": true,
            "$ref": "#/components/schemas/ApplicationMetadata"
          },
          "settings": {
            "$ref": "#/components/schemas/ES_AppSettings"
          }
        },
        "required": [
          "id",
          "clientId",
          "name",
          "archived",
          "domains",
          "patterns",
          "contexts",
          "settings"
        ]
      },
      "ES_AppSettings": {
        "type": "object",
        "properties": {
          "clientCredentialsFlowEnabled": {
            "nullable": true,
            "type": "boolean"
          },
          "codeFlowEnabled": {
            "nullable": true,
            "type": "boolean"
          },
          "codeFlowRedirectURIs": {
            "nullable": true,
            "type": "string"
          },
          "pkceRequired": {
            "nullable": true,
            "type": "boolean"
          },
          "implicitFlowEnabled": {
            "nullable": true,
            "type": "boolean"
          },
          "implicitFlowRedirectURIs": {
            "nullable": true,
            "type": "string"
          },
          "endpoint": {
            "nullable": true,
            "$ref": "#/components/schemas/EndpointDTO"
          },
          "endpointAuth": {
            "nullable": true,
            "$ref": "#/components/schemas/EndpointAuthDTO"
          }
        }
      },
      "ES_ApplicationPassword": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "profile": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "name": {
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/XScopeApi"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "lastAccess": {
            "nullable": true,
            "$ref": "#/components/schemas/AccessRecord"
          }
        },
        "required": [
          "id",
          "profile",
          "name",
          "scope",
          "created"
        ]
      },
      "ES_ApplicationPermanentToken": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "application": {
            "$ref": "#/components/schemas/ES_App"
          },
          "scope": {
            "type": "string"
          },
          "apiScope": {
            "$ref": "#/components/schemas/XScopeApi"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "expires": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "lastAccess": {
            "nullable": true,
            "$ref": "#/components/schemas/AccessRecord"
          }
        },
        "required": [
          "id",
          "name",
          "application",
          "scope",
          "apiScope",
          "created"
        ]
      },
      "ES_ApprovedScope": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/XScopeApi"
          },
          "offlineAllowed": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "scope",
          "offlineAllowed"
        ]
      },
      "ES_AuthModule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "ordinal": {
            "type": "integer",
            "format": "int32"
          },
          "enabled": {
            "type": "boolean"
          },
          "iconDataURI": {
            "nullable": true,
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/ES_AuthModuleSettings"
          }
        },
        "required": [
          "id",
          "key",
          "name",
          "ordinal",
          "enabled",
          "settings"
        ]
      },
      "ES_AuthModuleSettings": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ES_BuiltinAuthModuleSettings"
          },
          {
            "$ref": "#/components/schemas/ES_LdapAuthModuleSettings"
          },
          {
            "$ref": "#/components/schemas/ES_AzureAuthModuleSettings"
          },
          {
            "$ref": "#/components/schemas/ES_GithubAuthModuleSettings"
          },
          {
            "$ref": "#/components/schemas/ES_GoogleAuthModuleSettings"
          },
          {
            "$ref": "#/components/schemas/ES_HubAuthModuleSettings"
          },
          {
            "$ref": "#/components/schemas/ES_OIDCAuthModuleSettings"
          },
          {
            "$ref": "#/components/schemas/ES_SamlAuthModuleSettings"
          },
          {
            "$ref": "#/components/schemas/ES_HiddenAuthModuleSettings"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ES_AuthenticationSession": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "profile": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          },
          "lastAccess": {
            "nullable": true,
            "$ref": "#/components/schemas/AccessRecord"
          },
          "current": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "profile",
          "created",
          "expires",
          "current"
        ]
      },
      "ES_AzureAuthModuleSettings": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "clientSecret": {
            "type": "string"
          },
          "registerNewUsers": {
            "type": "boolean"
          },
          "emailVerified": {
            "type": "boolean"
          }
        },
        "required": [
          "tenantId",
          "clientId",
          "clientSecret",
          "registerNewUsers",
          "emailVerified"
        ]
      },
      "ES_BuiltinAuthModuleSettings": {
        "type": "object",
        "properties": {
          "passwordStrengthPolicy": {
            "$ref": "#/components/schemas/PasswordStrength"
          },
          "domains": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "passwordStrengthPolicy"
        ]
      },
      "ES_BuiltinProfileLoginDetails": {
        "type": "object",
        "properties": {
          "passwordChangeRequest": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "ES_ComposerRepositorySettings": {
        "type": "object",
        "properties": {
          "retentionPolicyParams": {
            "nullable": true,
            "$ref": "#/components/schemas/RetentionPolicyParams"
          },
          "immutablePackageVersions": {
            "nullable": true,
            "type": "boolean"
          }
        }
      },
      "ES_ContainerRegistrySettings": {
        "type": "object",
        "properties": {
          "immutableTags": {
            "type": "boolean"
          },
          "retentionPolicyParams": {
            "nullable": true,
            "$ref": "#/components/schemas/RetentionPolicyParams"
          },
          "immutablePackageVersions": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "immutableTags"
        ]
      },
      "ES_DefaultProfileLoginDetails": {
        "type": "object",
        "properties": {
          "login": {
            "nullable": true,
            "type": "string"
          },
          "firstName": {
            "nullable": true,
            "type": "string"
          },
          "lastName": {
            "nullable": true,
            "type": "string"
          },
          "email": {
            "nullable": true,
            "type": "string"
          },
          "emailVerified": {
            "type": "boolean"
          },
          "avatarUrl": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "emailVerified"
        ]
      },
      "ES_ExternalPasswordAuthModuleSettings": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ES_LdapAuthModuleSettings"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ES_FederatedAuthModuleSettings": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ES_AzureAuthModuleSettings"
          },
          {
            "$ref": "#/components/schemas/ES_GithubAuthModuleSettings"
          },
          {
            "$ref": "#/components/schemas/ES_GoogleAuthModuleSettings"
          },
          {
            "$ref": "#/components/schemas/ES_HubAuthModuleSettings"
          },
          {
            "$ref": "#/components/schemas/ES_OIDCAuthModuleSettings"
          },
          {
            "$ref": "#/components/schemas/ES_SamlAuthModuleSettings"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ES_FileRepositorySettings": {
        "type": "object",
        "properties": {
          "retentionPolicyParams": {
            "nullable": true,
            "$ref": "#/components/schemas/RetentionPolicyParams"
          },
          "immutablePackageVersions": {
            "nullable": true,
            "type": "boolean"
          }
        }
      },
      "ES_GithubAuthModuleSettings": {
        "type": "object",
        "properties": {
          "githubUrl": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "clientSecret": {
            "type": "string"
          },
          "registerNewUsers": {
            "type": "boolean"
          },
          "organizations": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "githubUrl",
          "clientId",
          "clientSecret",
          "registerNewUsers",
          "organizations"
        ]
      },
      "ES_GithubProfileLoginDetails": {
        "type": "object",
        "properties": {
          "login": {
            "nullable": true,
            "type": "string"
          },
          "firstName": {
            "nullable": true,
            "type": "string"
          },
          "lastName": {
            "nullable": true,
            "type": "string"
          },
          "email": {
            "nullable": true,
            "type": "string"
          },
          "emailVerified": {
            "type": "boolean"
          },
          "avatarUrl": {
            "nullable": true,
            "type": "string"
          },
          "organizations": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allEmails": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "first": {
                  "type": "string"
                },
                "second": {
                  "type": "boolean"
                }
              },
              "required": [
                "first",
                "second"
              ]
            }
          }
        },
        "required": [
          "emailVerified"
        ]
      },
      "ES_GoogleAuthModuleSettings": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "clientSecret": {
            "type": "string"
          },
          "registerNewUsers": {
            "type": "boolean"
          },
          "domains": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "clientId",
          "clientSecret",
          "registerNewUsers",
          "domains"
        ]
      },
      "ES_HiddenAuthModuleSettings": {
        "type": "object",
        "properties": {
          "passwordModule": {
            "nullable": true,
            "type": "boolean"
          },
          "federatedModule": {
            "nullable": true,
            "type": "boolean"
          }
        }
      },
      "ES_HubAuthModuleSettings": {
        "type": "object",
        "properties": {
          "hubUrl": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "clientSecret": {
            "type": "string"
          },
          "registerNewUsers": {
            "nullable": true,
            "type": "boolean"
          },
          "orgAuthProviderName": {
            "nullable": true,
            "type": "string"
          },
          "groups": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "hubUrl",
          "clientId",
          "clientSecret"
        ]
      },
      "ES_HubProfileLoginDetails": {
        "type": "object",
        "properties": {
          "login": {
            "nullable": true,
            "type": "string"
          },
          "hubAuthModuleLogin": {
            "nullable": true,
            "type": "string"
          },
          "firstName": {
            "nullable": true,
            "type": "string"
          },
          "lastName": {
            "nullable": true,
            "type": "string"
          },
          "email": {
            "nullable": true,
            "type": "string"
          },
          "emailVerified": {
            "type": "boolean"
          },
          "avatarUrl": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "emailVerified"
        ]
      },
      "ES_LdapAttributeNames": {
        "type": "object",
        "properties": {
          "fullNameAttributeName": {
            "nullable": true,
            "type": "string"
          },
          "usernameAttributeName": {
            "nullable": true,
            "type": "string"
          },
          "emailAttributeName": {
            "nullable": true,
            "type": "string"
          },
          "groupsAttributeName": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "ES_LdapAuthModuleSettings": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/LdapModuleType"
          },
          "registerNewUsers": {
            "type": "boolean"
          },
          "serverUrl": {
            "type": "string"
          },
          "connectionTimeout": {
            "type": "integer",
            "format": "int32"
          },
          "readTimeout": {
            "type": "integer",
            "format": "int32"
          },
          "sslKeystore": {
            "nullable": true,
            "$ref": "#/components/schemas/SSLKeystore"
          },
          "teamMappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ES_TeamMapping"
            }
          },
          "referralIgnored": {
            "type": "boolean"
          },
          "filter": {
            "type": "string"
          },
          "bindUserDN": {
            "type": "string"
          },
          "bindUserPassword": {
            "type": "string"
          },
          "attributeNames": {
            "$ref": "#/components/schemas/ES_LdapAttributeNames"
          }
        },
        "required": [
          "type",
          "registerNewUsers",
          "serverUrl",
          "connectionTimeout",
          "readTimeout",
          "teamMappings",
          "referralIgnored",
          "filter",
          "bindUserDN",
          "bindUserPassword",
          "attributeNames"
        ]
      },
      "ES_MavenRepositorySettings": {
        "type": "object",
        "properties": {
          "enableSnapshots": {
            "type": "boolean"
          },
          "retentionPolicyParams": {
            "nullable": true,
            "$ref": "#/components/schemas/RetentionPolicyParams"
          },
          "immutablePackageVersions": {
            "nullable": true,
            "type": "boolean"
          },
          "checkVulnerabilities": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "enableSnapshots"
        ]
      },
      "ES_NpmRegistrySettings": {
        "type": "object",
        "properties": {
          "retentionPolicyParams": {
            "nullable": true,
            "$ref": "#/components/schemas/RetentionPolicyParams"
          },
          "immutablePackageVersions": {
            "nullable": true,
            "type": "boolean"
          },
          "checkVulnerabilities": {
            "nullable": true,
            "type": "boolean"
          }
        }
      },
      "ES_NuGetFeedSettings": {
        "type": "object",
        "properties": {
          "retentionPolicyParams": {
            "nullable": true,
            "$ref": "#/components/schemas/RetentionPolicyParams"
          },
          "immutablePackageVersions": {
            "nullable": true,
            "type": "boolean"
          },
          "checkVulnerabilities": {
            "nullable": true,
            "type": "boolean"
          }
        }
      },
      "ES_OAuth2AuthModuleSettings": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ES_AzureAuthModuleSettings"
          },
          {
            "$ref": "#/components/schemas/ES_GithubAuthModuleSettings"
          },
          {
            "$ref": "#/components/schemas/ES_GoogleAuthModuleSettings"
          },
          {
            "$ref": "#/components/schemas/ES_HubAuthModuleSettings"
          },
          {
            "$ref": "#/components/schemas/ES_OIDCAuthModuleSettings"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ES_OAuthApp": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ES_OAuthInternalApp"
          },
          {
            "$ref": "#/components/schemas/ES_OAuthUserApp"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ES_OAuthConsent": {
        "type": "object",
        "properties": {
          "clientApplication": {
            "$ref": "#/components/schemas/ES_OAuthApp"
          },
          "approvedScopes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ES_ApprovedScope"
            }
          },
          "refreshTokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ES_RefreshToken"
            }
          }
        },
        "required": [
          "clientApplication",
          "approvedScopes",
          "refreshTokens"
        ]
      },
      "ES_OAuthInternalApp": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "clientId"
        ]
      },
      "ES_OAuthUserApp": {
        "type": "object",
        "properties": {
          "app": {
            "$ref": "#/components/schemas/ES_App"
          }
        },
        "required": [
          "app"
        ]
      },
      "ES_OIDCAuthModuleSettings": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "clientSecret": {
            "type": "string"
          },
          "registerNewUsers": {
            "type": "boolean"
          },
          "discoveryUrl": {
            "nullable": true,
            "type": "string"
          },
          "issuer": {
            "type": "string"
          },
          "authorizationEndpoint": {
            "type": "string"
          },
          "tokenEndpoint": {
            "type": "string"
          },
          "tokenKeysEndpoint": {
            "type": "string"
          },
          "userInfoEndpoint": {
            "type": "string"
          },
          "domains": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "clientId",
          "clientSecret",
          "registerNewUsers",
          "issuer",
          "authorizationEndpoint",
          "tokenEndpoint",
          "tokenKeysEndpoint",
          "userInfoEndpoint",
          "domains"
        ]
      },
      "ES_PackageRepositorySettings": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ES_ComposerRepositorySettings"
          },
          {
            "$ref": "#/components/schemas/ES_NpmRegistrySettings"
          },
          {
            "$ref": "#/components/schemas/ES_NuGetFeedSettings"
          },
          {
            "$ref": "#/components/schemas/ES_FileRepositorySettings"
          },
          {
            "$ref": "#/components/schemas/ES_ContainerRegistrySettings"
          },
          {
            "$ref": "#/components/schemas/ES_MavenRepositorySettings"
          },
          {
            "$ref": "#/components/schemas/ES_PythonPackageIndexSettings"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ES_PasswordAuthModuleSettings": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ES_BuiltinAuthModuleSettings"
          },
          {
            "$ref": "#/components/schemas/ES_LdapAuthModuleSettings"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ES_PersonalToken": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "profile": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "scope": {
            "type": "string"
          },
          "apiScope": {
            "$ref": "#/components/schemas/XScopeApi"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "expires": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "lastAccess": {
            "nullable": true,
            "$ref": "#/components/schemas/AccessRecord"
          }
        },
        "required": [
          "id",
          "name",
          "profile",
          "scope",
          "apiScope",
          "created"
        ]
      },
      "ES_ProfileLogin": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "authModule": {
            "$ref": "#/components/schemas/ES_AuthModule"
          },
          "details": {
            "$ref": "#/components/schemas/ES_ProfileLoginDetails"
          },
          "access": {
            "nullable": true,
            "$ref": "#/components/schemas/AccessRecord"
          }
        },
        "required": [
          "identifier",
          "authModule",
          "details"
        ]
      },
      "ES_ProfileLoginDetails": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ES_GithubProfileLoginDetails"
          },
          {
            "$ref": "#/components/schemas/ES_DefaultProfileLoginDetails"
          },
          {
            "$ref": "#/components/schemas/ES_BuiltinProfileLoginDetails"
          },
          {
            "$ref": "#/components/schemas/ES_HubProfileLoginDetails"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ES_PythonPackageIndexSettings": {
        "type": "object",
        "properties": {
          "retentionPolicyParams": {
            "nullable": true,
            "$ref": "#/components/schemas/RetentionPolicyParams"
          },
          "immutablePackageVersions": {
            "nullable": true,
            "type": "boolean"
          }
        }
      },
      "ES_RefreshToken": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/XScopeApi"
          },
          "lastAccess": {
            "nullable": true,
            "$ref": "#/components/schemas/AccessRecord"
          }
        },
        "required": [
          "id",
          "scope"
        ]
      },
      "ES_SamlAttributeNames": {
        "type": "object",
        "properties": {
          "loginAttributeName": {
            "nullable": true,
            "type": "string"
          },
          "firstNameAttributeName": {
            "nullable": true,
            "type": "string"
          },
          "lastNameAttributeName": {
            "nullable": true,
            "type": "string"
          },
          "fullNameAttributeName": {
            "nullable": true,
            "type": "string"
          },
          "emailAttributeName": {
            "nullable": true,
            "type": "string"
          },
          "emailVerified": {
            "type": "boolean"
          }
        },
        "required": [
          "emailVerified"
        ]
      },
      "ES_SamlAuthModuleSettings": {
        "type": "object",
        "properties": {
          "idpUrl": {
            "type": "string"
          },
          "idpEntityId": {
            "type": "string"
          },
          "idpCertificateSHA256": {
            "type": "string"
          },
          "spEntityId": {
            "type": "string"
          },
          "sslKeystore": {
            "nullable": true,
            "$ref": "#/components/schemas/SSLKeystore"
          },
          "registerNewUsers": {
            "type": "boolean"
          },
          "contactProfileId": {
            "nullable": true,
            "type": "string"
          },
          "attributeNames": {
            "$ref": "#/components/schemas/ES_SamlAttributeNames"
          }
        },
        "required": [
          "idpUrl",
          "idpEntityId",
          "idpCertificateSHA256",
          "spEntityId",
          "registerNewUsers",
          "attributeNames"
        ]
      },
      "ES_SshKey": {
        "type": "object",
        "properties": {
          "fingerprint": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "lastUsedAt": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "fingerprint",
          "comment",
          "createdAt"
        ]
      },
      "ES_TeamMapping": {
        "type": "object",
        "properties": {
          "teamId": {
            "type": "string"
          },
          "externalGroupName": {
            "type": "string"
          }
        },
        "required": [
          "teamId",
          "externalGroupName"
        ]
      },
      "EbsSnapshotApi": {
        "type": "object",
        "properties": {
          "snapshotId": {
            "type": "string"
          },
          "snapshotName": {
            "nullable": true,
            "type": "string"
          },
          "snapshotState": {
            "$ref": "#/components/schemas/SnapshotState"
          },
          "execution": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "claimId": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "snapshotId",
          "snapshotState"
        ]
      },
      "EbsVolumeApi": {
        "type": "object",
        "properties": {
          "volumeId": {
            "type": "string"
          },
          "volumeName": {
            "type": "string"
          },
          "az": {
            "nullable": true,
            "type": "string"
          },
          "volumeState": {
            "$ref": "#/components/schemas/VolumeState"
          },
          "execution": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "claimId": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "volumeId",
          "volumeName",
          "volumeState"
        ]
      },
      "EcsTaskContainerInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "lastStatus": {
            "nullable": true,
            "type": "string"
          },
          "exitCode": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "reason": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "EcsTaskInfoApi": {
        "type": "object",
        "properties": {
          "taskArn": {
            "type": "string"
          },
          "containers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EcsTaskContainerInfo"
            }
          },
          "desiredStatus": {
            "$ref": "#/components/schemas/DesiredStatus"
          },
          "lastStatus": {
            "$ref": "#/components/schemas/DesiredStatus"
          },
          "startedAt": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "pullStartedAt": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "stoppedAt": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "execution": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "taskArn",
          "containers",
          "desiredStatus",
          "lastStatus",
          "execution"
        ]
      },
      "EditMessage": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "attachments": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            }
          },
          "pending": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "text",
          "id"
        ]
      },
      "EmailBouncedEvent": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "reason"
        ]
      },
      "EmojiReaction": {
        "type": "object",
        "properties": {
          "emoji": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "meReacted": {
            "type": "boolean"
          }
        },
        "required": [
          "emoji",
          "count",
          "meReacted"
        ]
      },
      "EmojiReactionRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "itemId": {
            "type": "string"
          },
          "emoji": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "meReacted": {
            "type": "boolean"
          },
          "order": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "id",
          "itemId",
          "emoji",
          "count",
          "meReacted",
          "order"
        ]
      },
      "EmojiSearchMatchData": {
        "type": "object",
        "properties": {
          "emoji": {
            "type": "string"
          },
          "matched": {
            "nullable": true,
            "type": "string"
          },
          "matchType": {
            "$ref": "#/components/schemas/EmojiSearchMatchType"
          }
        },
        "required": [
          "emoji",
          "matchType"
        ]
      },
      "EndpointAuthCreate": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/EndpointAuthCreate.Basic"
          },
          {
            "$ref": "#/components/schemas/EndpointAuthCreate.Bearer"
          },
          {
            "$ref": "#/components/schemas/EndpointAuthCreate.PublicKeySignature"
          },
          {
            "$ref": "#/components/schemas/EndpointAuthCreate.SigningKey"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "EndpointAuthCreate.Basic": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "username",
          "password"
        ]
      },
      "EndpointAuthCreate.Bearer": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        },
        "required": [
          "token"
        ]
      },
      "EndpointAuthCreate.PublicKeySignature": {
        "type": "object",
        "properties": {}
      },
      "EndpointAuthCreate.SigningKey": {
        "type": "object",
        "properties": {}
      },
      "EndpointAuthCreateDTO": {
        "type": "object",
        "properties": {
          "appLevelAuth": {
            "$ref": "#/components/schemas/EndpointAuthCreate"
          },
          "sslKeystore": {
            "nullable": true,
            "$ref": "#/components/schemas/SSLKeystoreEndpointAuth"
          }
        },
        "required": [
          "appLevelAuth"
        ]
      },
      "EndpointAuthDTO": {
        "type": "object",
        "properties": {
          "appLevelAuth": {
            "$ref": "#/components/schemas/EndpointAuthRead"
          },
          "sslKeystore": {
            "nullable": true,
            "$ref": "#/components/schemas/SSLKeystoreEndpointAuth"
          },
          "verificationToken": {
            "type": "boolean"
          }
        },
        "required": [
          "appLevelAuth",
          "verificationToken"
        ]
      },
      "EndpointAuthRead": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/EndpointAuthRead.Basic"
          },
          {
            "$ref": "#/components/schemas/EndpointAuthRead.Bearer"
          },
          {
            "$ref": "#/components/schemas/EndpointAuthRead.PublicKeySignature"
          },
          {
            "$ref": "#/components/schemas/EndpointAuthRead.SigningKey"
          },
          {
            "$ref": "#/components/schemas/EndpointAuthRead.Unknown"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "EndpointAuthRead.Basic": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          }
        },
        "required": [
          "username"
        ]
      },
      "EndpointAuthRead.Bearer": {
        "type": "object",
        "properties": {}
      },
      "EndpointAuthRead.PublicKeySignature": {
        "type": "object",
        "properties": {}
      },
      "EndpointAuthRead.SigningKey": {
        "type": "object",
        "properties": {}
      },
      "EndpointAuthRead.Unknown": {
        "type": "object",
        "properties": {}
      },
      "EndpointAuthUpdateDTO": {
        "type": "object",
        "properties": {
          "appLevelAuth": {
            "$ref": "#/components/schemas/EndpointAppLevelAuthUpdateType"
          },
          "basicAuthUsername": {
            "type": "string"
          },
          "basicAuthPassword": {
            "type": "string"
          },
          "bearerAuthToken": {
            "type": "string"
          },
          "hasVerificationToken": {
            "type": "boolean"
          },
          "sslKeystoreAuth": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "appLevelAuth",
          "basicAuthUsername",
          "basicAuthPassword",
          "bearerAuthToken",
          "hasVerificationToken"
        ]
      },
      "EndpointCreateDTO": {
        "type": "object",
        "properties": {
          "url": {
            "nullable": true,
            "type": "string"
          },
          "sslVerification": {
            "type": "boolean"
          }
        },
        "required": [
          "sslVerification"
        ]
      },
      "EndpointDTO": {
        "type": "object",
        "properties": {
          "url": {
            "nullable": true,
            "type": "string"
          },
          "sslVerification": {
            "type": "boolean"
          }
        },
        "required": [
          "sslVerification"
        ]
      },
      "EntityMention": {
        "type": "object",
        "properties": {
          "position": {
            "type": "integer",
            "format": "int32"
          },
          "length": {
            "type": "integer",
            "format": "int32"
          },
          "link": {
            "type": "string"
          }
        },
        "required": [
          "position",
          "length",
          "link"
        ]
      },
      "EnumCFInputParameters": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "values"
        ]
      },
      "EnumCFInputValue": {
        "type": "object",
        "properties": {
          "enumValueIdentifier": {
            "nullable": true,
            "$ref": "#/components/schemas/CFEnumValueIdentifier"
          }
        }
      },
      "EnumCFParameters": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CFEnumValue"
            }
          }
        },
        "required": [
          "values"
        ]
      },
      "EnumCFType": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnumValueData"
            }
          }
        },
        "required": [
          "values"
        ]
      },
      "EnumCFValue": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true,
            "$ref": "#/components/schemas/EnumValueData"
          }
        }
      },
      "EnumListCFInputValue": {
        "type": "object",
        "properties": {
          "enumValueIdentifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CFEnumValueIdentifier"
            }
          }
        },
        "required": [
          "enumValueIdentifiers"
        ]
      },
      "EnumListCFType": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnumValueData"
            }
          }
        },
        "required": [
          "values"
        ]
      },
      "EnumListCFValue": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnumValueData"
            }
          }
        },
        "required": [
          "values"
        ]
      },
      "EnumValueData": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": true,
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "principal": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipalDetails"
          }
        },
        "required": [
          "value"
        ]
      },
      "EstimationDTO": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "predictedDuration": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "start",
          "predictedDuration"
        ]
      },
      "EventConferenceData": {
        "type": "object",
        "properties": {
          "kind": {
            "$ref": "#/components/schemas/EventConferenceKind"
          },
          "url": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "kind"
        ]
      },
      "EventExternalSource": {
        "type": "object",
        "properties": {
          "sourceName": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "sourceLink": {
            "nullable": true,
            "type": "string"
          },
          "externalTimestamp": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "sourceName",
          "externalId"
        ]
      },
      "EventSubjectInfoDTO": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "parentCode": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTypeInfoDTO"
            }
          },
          "defaultFilters": {
            "type": "array",
            "items": {
              "nullable": true,
              "$ref": "#/components/schemas/SubscriptionFilter"
            }
          },
          "featureFlag": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "code",
          "name",
          "description",
          "events",
          "defaultFilters"
        ]
      },
      "EventTypeInfoDTO": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "rights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CRight"
            }
          },
          "featureFlag": {
            "nullable": true,
            "type": "string"
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "code",
          "name",
          "description",
          "rights",
          "sortOrder"
        ]
      },
      "ExtendedType": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "apiClassName": {
            "nullable": true,
            "type": "string"
          },
          "scopeType": {
            "$ref": "#/components/schemas/ExtendedTypeScopeType"
          }
        },
        "required": [
          "key",
          "displayName",
          "scopeType"
        ]
      },
      "ExtendedTypeKey": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/ExtendedTypeScope"
          }
        },
        "required": [
          "key",
          "scope"
        ]
      },
      "ExternalArticle": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "authorId": {
            "type": "string"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "teams": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "locations": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "externalId": {
            "nullable": true,
            "type": "string"
          },
          "externalUrl": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "title",
          "content",
          "authorId",
          "created"
        ]
      },
      "ExternalCheckDTO": {
        "type": "object",
        "properties": {
          "repository": {
            "type": "string"
          },
          "revision": {
            "type": "string"
          },
          "executionStatus": {
            "$ref": "#/components/schemas/CommitExecutionStatus"
          },
          "url": {
            "type": "string"
          },
          "externalServiceName": {
            "type": "string"
          },
          "taskName": {
            "type": "string"
          },
          "taskId": {
            "type": "string"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "description": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "repository",
          "revision",
          "executionStatus",
          "url",
          "externalServiceName",
          "taskName",
          "taskId",
          "timestamp"
        ]
      },
      "ExternalEndpointUpdateDTO": {
        "type": "object",
        "properties": {
          "url": {
            "nullable": true,
            "type": "string"
          },
          "sslVerification": {
            "type": "boolean"
          }
        },
        "required": [
          "sslVerification"
        ]
      },
      "ExternalEntityInfoRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "externalId": {
            "nullable": true,
            "type": "string"
          },
          "externalName": {
            "nullable": true,
            "type": "string"
          },
          "externalUrl": {
            "nullable": true,
            "type": "string"
          },
          "transaction": {
            "$ref": "#/components/schemas/ImportTransactionRecord"
          }
        },
        "required": [
          "id",
          "archived",
          "transaction"
        ]
      },
      "ExternalIssue": {
        "type": "object",
        "properties": {
          "summary": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "assignee": {
            "nullable": true,
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "externalName": {
            "nullable": true,
            "type": "string"
          },
          "externalUrl": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "summary",
          "status",
          "externalId"
        ]
      },
      "ExternalLink": {
        "type": "object",
        "properties": {
          "label": {
            "nullable": true,
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "url"
        ]
      },
      "ExternalLinkPattern": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "prefix": {
            "type": "string"
          },
          "linkReplacement": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "archived",
          "prefix",
          "linkReplacement"
        ]
      },
      "FailureConditionDTO": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/NonZeroExitCodeDTO"
          },
          {
            "$ref": "#/components/schemas/OutOfMemoryDTO"
          },
          {
            "$ref": "#/components/schemas/TestFailedDTO"
          },
          {
            "$ref": "#/components/schemas/TimeOutDTO"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "FeatureFlag": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/FeatureFlagStatus"
          },
          "owner": {
            "type": "string"
          },
          "since": {
            "nullable": true,
            "$ref": "#/components/schemas/FeatureFlagDate"
          },
          "issueNumber": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "name",
          "description",
          "status",
          "owner"
        ]
      },
      "FeatureFlagDate": {
        "type": "object",
        "properties": {
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "month": {
            "type": "integer",
            "format": "int32"
          },
          "day": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "year",
          "month",
          "day"
        ]
      },
      "FeatureFlagWebhookEvent": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/KMetaMod"
          },
          "name": {
            "type": "string"
          },
          "issueNumber": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "enabledForAll": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "boolean"
              },
              "new": {
                "type": "boolean"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "selfManageable": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "boolean"
              },
              "new": {
                "type": "boolean"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "addedTeams": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_Team"
            }
          },
          "addedProfiles": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_Team"
            }
          },
          "removedTeams": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_MemberProfile"
            }
          },
          "removedProfiles": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_MemberProfile"
            }
          }
        },
        "required": [
          "meta",
          "name"
        ]
      },
      "FeedEvent": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ReviewerChangedEvent"
          },
          {
            "$ref": "#/components/schemas/ReviewTitleChangedEvent"
          },
          {
            "$ref": "#/components/schemas/ReviewRevisionsChangedEvent"
          },
          {
            "$ref": "#/components/schemas/CodeReviewDiscussionAddedFeedEvent"
          },
          {
            "$ref": "#/components/schemas/MergeRequestBranchRestoredEvent"
          },
          {
            "$ref": "#/components/schemas/MergeRequestBranchDeletedEvent"
          },
          {
            "$ref": "#/components/schemas/ReviewStateChangedEvent"
          },
          {
            "$ref": "#/components/schemas/CodeDiscussionAddedFeedEvent"
          },
          {
            "$ref": "#/components/schemas/MergeRequestMergedEvent"
          },
          {
            "$ref": "#/components/schemas/ReviewBranchTrackEvent"
          },
          {
            "$ref": "#/components/schemas/ReviewCompletionStateChangedEvent"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "FileAttachment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "sizeBytes": {
            "type": "integer",
            "format": "int64"
          },
          "filename": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "sizeBytes",
          "filename"
        ]
      },
      "FileData": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PackageType"
          },
          "repository": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "fileType": {
            "$ref": "#/components/schemas/FileDataType"
          }
        },
        "required": [
          "type",
          "repository",
          "name",
          "path",
          "fileType"
        ]
      },
      "FileDetails": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PackageType"
          },
          "repository": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "created": {
            "type": "integer",
            "format": "int64"
          },
          "lastModified": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "downloads": {
            "type": "integer",
            "format": "int64"
          },
          "diskSize": {
            "type": "integer",
            "format": "int64"
          },
          "authors": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CPrincipal"
            }
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "metadata": {
            "nullable": true,
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "type",
          "repository",
          "name",
          "created",
          "downloads",
          "diskSize",
          "path"
        ]
      },
      "FileDocumentBody": {
        "type": "object",
        "properties": {
          "versionId": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          },
          "fileSize": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "versionId",
          "contentType",
          "fileSize"
        ]
      },
      "FileDocumentBodyCreateIn": {
        "type": "object",
        "properties": {
          "blobId": {
            "type": "string"
          }
        },
        "required": [
          "blobId"
        ]
      },
      "FileDocumentBodyInfo": {
        "type": "object",
        "properties": {
          "fileDocument": {
            "$ref": "#/components/schemas/FileDocumentRecord"
          }
        },
        "required": [
          "fileDocument"
        ]
      },
      "FileDocumentBodyUpdateIn": {
        "type": "object",
        "properties": {
          "blobId": {
            "type": "string"
          }
        },
        "required": [
          "blobId"
        ]
      },
      "FileDocumentRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "body": {
            "$ref": "#/components/schemas/FileDocumentBody"
          }
        },
        "required": [
          "id",
          "archived",
          "body"
        ]
      },
      "FileType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "Fingerprint": {
        "type": "object",
        "properties": {
          "md5": {
            "type": "string"
          },
          "sha1": {
            "type": "string"
          },
          "sha256": {
            "type": "string"
          },
          "sha384": {
            "type": "string"
          },
          "sha512": {
            "type": "string"
          }
        },
        "required": [
          "md5",
          "sha1",
          "sha256",
          "sha384",
          "sha512"
        ]
      },
      "Fraction": {
        "type": "object",
        "properties": {
          "numerator": {
            "type": "integer",
            "format": "int32"
          },
          "denominator": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "numerator",
          "denominator"
        ]
      },
      "FractionCFType": {
        "type": "object",
        "properties": {}
      },
      "FractionCFValue": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true,
            "$ref": "#/components/schemas/Fraction"
          }
        }
      },
      "FullWebhookDTO": {
        "type": "object",
        "properties": {
          "webhook": {
            "$ref": "#/components/schemas/WebhookRecord"
          },
          "status": {
            "nullable": true,
            "$ref": "#/components/schemas/WebhookDeliveryStatusDTO"
          }
        },
        "required": [
          "webhook"
        ]
      },
      "GetMessagesResponse": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelItemRecord"
            }
          },
          "nextStartFromDate": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "orgLimitReached": {
            "type": "boolean"
          }
        },
        "required": [
          "messages",
          "orgLimitReached"
        ]
      },
      "GitAuthorInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "email"
        ]
      },
      "GitCommitChange": {
        "type": "object",
        "properties": {
          "changeType": {
            "$ref": "#/components/schemas/GitCommitChangeType"
          },
          "old": {
            "nullable": true,
            "$ref": "#/components/schemas/GitFile"
          },
          "new": {
            "nullable": true,
            "$ref": "#/components/schemas/GitFile"
          },
          "revision": {
            "type": "string"
          },
          "diffSize": {
            "nullable": true,
            "$ref": "#/components/schemas/GitDiffSize"
          },
          "path": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "changeType",
          "revision"
        ]
      },
      "GitCommitChanges": {
        "type": "object",
        "properties": {
          "changes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitCommitChange"
            }
          },
          "overflow": {
            "type": "boolean"
          }
        },
        "required": [
          "changes",
          "overflow"
        ]
      },
      "GitCommitFileRequest": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "content": {
            "$ref": "#/components/schemas/GitFileContent"
          }
        },
        "required": [
          "path",
          "content"
        ]
      },
      "GitCommitInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "authorDate": {
            "type": "integer",
            "format": "int64"
          },
          "commitDate": {
            "type": "integer",
            "format": "int64"
          },
          "author": {
            "$ref": "#/components/schemas/GitAuthorInfo"
          },
          "authorProfile": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "committer": {
            "$ref": "#/components/schemas/GitAuthorInfo"
          },
          "committerProfile": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "parents": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "heads": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "signature": {
            "nullable": true,
            "$ref": "#/components/schemas/GitCommitSignature"
          }
        },
        "required": [
          "id",
          "message",
          "authorDate",
          "commitDate",
          "author",
          "committer",
          "parents",
          "heads"
        ]
      },
      "GitCommitInfoWithChanges": {
        "type": "object",
        "properties": {
          "commit": {
            "$ref": "#/components/schemas/GitCommitInfo"
          },
          "changes": {
            "$ref": "#/components/schemas/GitCommitChanges"
          }
        },
        "required": [
          "commit",
          "changes"
        ]
      },
      "GitCommitResult": {
        "type": "object",
        "properties": {
          "fromHead": {
            "nullable": true,
            "type": "string"
          },
          "toHead": {
            "nullable": true,
            "type": "string"
          },
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "resultCommitId": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "GitCommitSignature": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/GitCommitSignature.ExpiredKey"
          },
          {
            "$ref": "#/components/schemas/GitCommitSignature.NotVerified"
          },
          {
            "$ref": "#/components/schemas/GitCommitSignature.Raw"
          },
          {
            "$ref": "#/components/schemas/GitCommitSignature.RevokedKey"
          },
          {
            "$ref": "#/components/schemas/GitCommitSignature.Verified"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "GitCommitSignature.ExpiredKey": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          }
        },
        "required": [
          "description"
        ]
      },
      "GitCommitSignature.NotVerified": {
        "type": "object",
        "properties": {}
      },
      "GitCommitSignature.Raw": {
        "type": "object",
        "properties": {
          "signature": {
            "type": "string"
          },
          "signedDataB64": {
            "type": "string"
          }
        },
        "required": [
          "signature",
          "signedDataB64"
        ]
      },
      "GitCommitSignature.RevokedKey": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "revokeComment": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "description"
        ]
      },
      "GitCommitSignature.Verified": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          }
        },
        "required": [
          "description"
        ]
      },
      "GitCommitWithGraph": {
        "type": "object",
        "properties": {
          "repositoryName": {
            "type": "string"
          },
          "commit": {
            "$ref": "#/components/schemas/GitCommitInfo"
          },
          "commitMessageUnfurls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Unfurl"
            }
          },
          "reviews": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeReviewRecord"
            }
          },
          "issueIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "deployments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "first": {
                  "type": "string"
                },
                "second": {
                  "nullable": true,
                  "type": "string"
                }
              },
              "required": [
                "first"
              ]
            }
          },
          "layout": {
            "nullable": true,
            "$ref": "#/components/schemas/GitGraphLayoutLine"
          },
          "unreachable": {
            "type": "boolean"
          }
        },
        "required": [
          "repositoryName",
          "commit",
          "commitMessageUnfurls",
          "reviews",
          "issueIds",
          "deployments",
          "unreachable"
        ]
      },
      "GitCommitterProfile": {
        "type": "object",
        "properties": {
          "author": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "profile": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_MemberProfile"
          }
        },
        "required": [
          "author",
          "email"
        ]
      },
      "GitDiffSize": {
        "type": "object",
        "properties": {
          "added": {
            "type": "integer",
            "format": "int32"
          },
          "deleted": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "added",
          "deleted"
        ]
      },
      "GitFile": {
        "type": "object",
        "properties": {
          "commit": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "blob": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/GitEntryType"
          }
        },
        "required": [
          "commit",
          "path",
          "blob",
          "type"
        ]
      },
      "GitFileContent": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/GitFileContent.Base64"
          },
          {
            "$ref": "#/components/schemas/GitFileContent.Deleted"
          },
          {
            "$ref": "#/components/schemas/GitFileContent.Text"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "GitFileContent.Base64": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "executable": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "value"
        ]
      },
      "GitFileContent.Deleted": {
        "type": "object",
        "properties": {}
      },
      "GitFileContent.Text": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "executable": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "value"
        ]
      },
      "GitGraphLayoutEdge": {
        "type": "object",
        "properties": {
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/GitGraphEdgeType"
          },
          "style": {
            "$ref": "#/components/schemas/GitGraphEdgeLineStyle"
          },
          "hasArrow": {
            "type": "boolean"
          },
          "color": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "from",
          "to",
          "type",
          "style",
          "hasArrow",
          "color"
        ]
      },
      "GitGraphLayoutLine": {
        "type": "object",
        "properties": {
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitGraphLayoutNode"
            }
          },
          "edges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitGraphLayoutEdge"
            }
          }
        },
        "required": [
          "nodes",
          "edges"
        ]
      },
      "GitGraphLayoutNode": {
        "type": "object",
        "properties": {
          "pos": {
            "type": "integer",
            "format": "int32"
          },
          "color": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "pos",
          "color"
        ]
      },
      "GitMergeResultHttp": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/GitMergeStatusHttp"
          },
          "resultCommitId": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "status"
        ]
      },
      "GitMergedFile": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "oldName": {
            "nullable": true,
            "type": "string"
          },
          "baseId": {
            "nullable": true,
            "type": "string"
          },
          "sourceId": {
            "nullable": true,
            "type": "string"
          },
          "targetId": {
            "nullable": true,
            "type": "string"
          },
          "diffSize": {
            "nullable": true,
            "$ref": "#/components/schemas/GitDiffSize"
          },
          "entryType": {
            "$ref": "#/components/schemas/GitEntryType"
          },
          "conflicting": {
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "entryType",
          "conflicting"
        ]
      },
      "GitRebaseResultHttp": {
        "type": "object",
        "properties": {
          "resultCommitIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "resultCommitIds"
        ]
      },
      "GlobalNotificationSettings": {
        "type": "object",
        "properties": {
          "emailNotificationsEnabled": {
            "type": "boolean"
          },
          "notificationEmail": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_ProfileEmail"
          },
          "pushNotificationEnabled": {
            "type": "boolean"
          },
          "desktopInactivityTimeout": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "multiClientEnabled": {
            "type": "boolean"
          }
        },
        "required": [
          "emailNotificationsEnabled",
          "pushNotificationEnabled",
          "multiClientEnabled"
        ]
      },
      "GlobalPermissionContext": {
        "type": "object",
        "properties": {}
      },
      "GlobalPermissionTarget": {
        "type": "object",
        "properties": {}
      },
      "GlobalScope": {
        "type": "object",
        "properties": {}
      },
      "GpgKeyData": {
        "type": "object",
        "properties": {
          "fingerprint": {
            "type": "string"
          },
          "publicKey": {
            "type": "string"
          },
          "userIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GpgKeyData.KeyUserId"
            }
          },
          "comment": {
            "type": "string"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "added": {
            "type": "string",
            "format": "date-time"
          },
          "expires": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "revoked": {
            "type": "boolean"
          },
          "revokedAt": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "revokeComment": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "fingerprint",
          "publicKey",
          "userIds",
          "comment",
          "created",
          "added",
          "revoked"
        ]
      },
      "GpgKeyData.KeyUserId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "verified": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "verified"
        ]
      },
      "HA_DefaultValue": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/HA_DefaultValue.Collection"
          },
          {
            "$ref": "#/components/schemas/HA_DefaultValue.Const.EnumEntry"
          },
          {
            "$ref": "#/components/schemas/HA_DefaultValue.Const.Primitive"
          },
          {
            "$ref": "#/components/schemas/HA_DefaultValue.Map"
          },
          {
            "$ref": "#/components/schemas/HA_DefaultValue.Reference"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "HA_DefaultValue.Collection": {
        "type": "object",
        "properties": {
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HA_DefaultValue"
            }
          }
        },
        "required": [
          "elements"
        ]
      },
      "HA_DefaultValue.Const": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/HA_DefaultValue.Const.EnumEntry"
          },
          {
            "$ref": "#/components/schemas/HA_DefaultValue.Const.Primitive"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "HA_DefaultValue.Const.EnumEntry": {
        "type": "object",
        "properties": {
          "entryName": {
            "type": "string"
          }
        },
        "required": [
          "entryName"
        ]
      },
      "HA_DefaultValue.Const.Primitive": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string"
          }
        },
        "required": [
          "expression"
        ]
      },
      "HA_DefaultValue.Map": {
        "type": "object",
        "properties": {
          "elements": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/HA_DefaultValue"
            }
          }
        },
        "required": [
          "elements"
        ]
      },
      "HA_DefaultValue.Reference": {
        "type": "object",
        "properties": {
          "paramName": {
            "type": "string"
          }
        },
        "required": [
          "paramName"
        ]
      },
      "HA_Deprecation": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "since": {
            "type": "string"
          },
          "forRemoval": {
            "type": "boolean"
          }
        },
        "required": [
          "message",
          "since",
          "forRemoval"
        ]
      },
      "HA_Description": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "helpTopic": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "text"
        ]
      },
      "HA_Dto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HA_DtoField"
            }
          },
          "hierarchyRole": {
            "$ref": "#/components/schemas/HierarchyRole"
          },
          "hierarchyRole2": {
            "$ref": "#/components/schemas/HierarchyRole2"
          },
          "extends": {
            "nullable": true,
            "$ref": "#/components/schemas/HA_Dto"
          },
          "implements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HA_Dto"
            }
          },
          "inheritors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HA_Dto"
            }
          },
          "description": {
            "nullable": true,
            "$ref": "#/components/schemas/HA_Description"
          },
          "deprecation": {
            "nullable": true,
            "$ref": "#/components/schemas/HA_Deprecation"
          },
          "record": {
            "type": "boolean"
          },
          "errorsField": {
            "nullable": true,
            "$ref": "#/components/schemas/HA_Field"
          }
        },
        "required": [
          "id",
          "name",
          "fields",
          "hierarchyRole",
          "hierarchyRole2",
          "implements",
          "inheritors",
          "record"
        ]
      },
      "HA_DtoField": {
        "type": "object",
        "properties": {
          "field": {
            "$ref": "#/components/schemas/HA_Field"
          },
          "extension": {
            "type": "boolean"
          }
        },
        "required": [
          "field",
          "extension"
        ]
      },
      "HA_Endpoint": {
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/HA_Resource"
          },
          "method": {
            "$ref": "#/components/schemas/HA_Method"
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HA_Parameter"
            }
          },
          "requestBody": {
            "nullable": true,
            "$ref": "#/components/schemas/HA_Type.Object"
          },
          "responseBody": {
            "nullable": true,
            "$ref": "#/components/schemas/HA_Type"
          },
          "path": {
            "$ref": "#/components/schemas/HA_Path"
          },
          "displayName": {
            "type": "string"
          },
          "functionName": {
            "type": "string"
          },
          "doc": {
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "$ref": "#/components/schemas/HA_Description"
          },
          "deprecation": {
            "nullable": true,
            "$ref": "#/components/schemas/HA_Deprecation"
          },
          "rights": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HA_Right"
            }
          },
          "featureFlag": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "resource",
          "method",
          "parameters",
          "path",
          "displayName",
          "functionName"
        ]
      },
      "HA_Enum": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "deprecation": {
            "nullable": true,
            "$ref": "#/components/schemas/HA_Deprecation"
          }
        },
        "required": [
          "id",
          "name",
          "values"
        ]
      },
      "HA_Field": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/HA_Type"
          },
          "defaultValue": {
            "nullable": true,
            "$ref": "#/components/schemas/HA_DefaultValue"
          },
          "optional": {
            "type": "boolean"
          },
          "description": {
            "nullable": true,
            "$ref": "#/components/schemas/HA_Description"
          },
          "deprecation": {
            "nullable": true,
            "$ref": "#/components/schemas/HA_Deprecation"
          }
        },
        "required": [
          "name",
          "type",
          "optional"
        ]
      },
      "HA_InlineError": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/HA_InlineError.InaccessibleFields"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "HA_InlineError.InaccessibleFields": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "fields",
          "message"
        ]
      },
      "HA_MenuId": {
        "type": "object",
        "properties": {
          "menuId": {
            "type": "string"
          },
          "context": {
            "$ref": "#/components/schemas/HA_Dto"
          }
        },
        "required": [
          "menuId",
          "context"
        ]
      },
      "HA_Model": {
        "type": "object",
        "properties": {
          "dto": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HA_Dto"
            }
          },
          "enums": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HA_Enum"
            }
          },
          "urlParams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HA_UrlParameter"
            }
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HA_Resource"
            }
          },
          "allResources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HA_Resource"
            }
          },
          "menuIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HA_MenuId"
            }
          }
        },
        "required": [
          "dto",
          "enums",
          "urlParams",
          "resources",
          "allResources",
          "menuIds"
        ]
      },
      "HA_Parameter": {
        "type": "object",
        "properties": {
          "field": {
            "$ref": "#/components/schemas/HA_Field"
          },
          "path": {
            "type": "boolean"
          }
        },
        "required": [
          "field",
          "path"
        ]
      },
      "HA_Path": {
        "type": "object",
        "properties": {
          "segments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HA_PathSegment"
            }
          }
        },
        "required": [
          "segments"
        ]
      },
      "HA_PathSegment": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/HA_PathSegment.Const"
          },
          {
            "$ref": "#/components/schemas/HA_PathSegment.PrefixedVar"
          },
          {
            "$ref": "#/components/schemas/HA_PathSegment.Var"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "HA_PathSegment.Const": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value"
        ]
      },
      "HA_PathSegment.PrefixedVar": {
        "type": "object",
        "properties": {
          "prefix": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "prefix",
          "name"
        ]
      },
      "HA_PathSegment.Var": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "HA_Resource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "path": {
            "$ref": "#/components/schemas/HA_Path"
          },
          "displaySingular": {
            "type": "string"
          },
          "displayPlural": {
            "type": "string"
          },
          "parentResource": {
            "nullable": true,
            "$ref": "#/components/schemas/HA_Resource"
          },
          "endpoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HA_Endpoint"
            }
          },
          "nestedResources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HA_Resource"
            }
          }
        },
        "required": [
          "id",
          "path",
          "displaySingular",
          "displayPlural",
          "endpoints",
          "nestedResources"
        ]
      },
      "HA_Right": {
        "type": "object",
        "properties": {
          "rightUniqueCode": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "rightUniqueCode",
          "title"
        ]
      },
      "HA_Type": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/HA_Type.Array"
          },
          {
            "$ref": "#/components/schemas/HA_Type.Dto"
          },
          {
            "$ref": "#/components/schemas/HA_Type.Enum"
          },
          {
            "$ref": "#/components/schemas/HA_Type.Map"
          },
          {
            "$ref": "#/components/schemas/HA_Type.Object"
          },
          {
            "$ref": "#/components/schemas/HA_Type.Primitive"
          },
          {
            "$ref": "#/components/schemas/HA_Type.Ref"
          },
          {
            "$ref": "#/components/schemas/HA_Type.UrlParam"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "HA_Type.Array": {
        "type": "object",
        "properties": {
          "elementType": {
            "$ref": "#/components/schemas/HA_Type"
          },
          "nullable": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "elementType",
          "nullable",
          "tags"
        ]
      },
      "HA_Type.Dto": {
        "type": "object",
        "properties": {
          "dto": {
            "$ref": "#/components/schemas/HA_Dto"
          },
          "nullable": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "dto",
          "nullable",
          "tags"
        ]
      },
      "HA_Type.Enum": {
        "type": "object",
        "properties": {
          "enum": {
            "$ref": "#/components/schemas/HA_Enum"
          },
          "nullable": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "enum",
          "nullable",
          "tags"
        ]
      },
      "HA_Type.Map": {
        "type": "object",
        "properties": {
          "valueType": {
            "$ref": "#/components/schemas/HA_Type"
          },
          "nullable": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "valueType",
          "nullable",
          "tags"
        ]
      },
      "HA_Type.Object": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HA_Field"
            }
          },
          "kind": {
            "$ref": "#/components/schemas/HA_Type.Object.Kind"
          },
          "nullable": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "fields",
          "kind",
          "nullable",
          "tags"
        ]
      },
      "HA_Type.Primitive": {
        "type": "object",
        "properties": {
          "primitive": {
            "$ref": "#/components/schemas/HA_Primitive"
          },
          "nullable": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "primitive",
          "nullable",
          "tags"
        ]
      },
      "HA_Type.Ref": {
        "type": "object",
        "properties": {
          "dto": {
            "$ref": "#/components/schemas/HA_Dto"
          },
          "nullable": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "dto",
          "nullable",
          "tags"
        ]
      },
      "HA_Type.UrlParam": {
        "type": "object",
        "properties": {
          "urlParam": {
            "$ref": "#/components/schemas/HA_UrlParameter"
          },
          "nullable": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "urlParam",
          "nullable",
          "tags"
        ]
      },
      "HA_UrlParameter": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HA_UrlParameterOption"
            }
          },
          "deprecation": {
            "nullable": true,
            "$ref": "#/components/schemas/HA_Deprecation"
          }
        },
        "required": [
          "id",
          "name",
          "options"
        ]
      },
      "HA_UrlParameterOption": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/HA_UrlParameterOption.Const"
          },
          {
            "$ref": "#/components/schemas/HA_UrlParameterOption.Var"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "HA_UrlParameterOption.Const": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "optionName": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "$ref": "#/components/schemas/HA_Description"
          },
          "deprecation": {
            "nullable": true,
            "$ref": "#/components/schemas/HA_Deprecation"
          }
        },
        "required": [
          "value",
          "optionName"
        ]
      },
      "HA_UrlParameterOption.Var": {
        "type": "object",
        "properties": {
          "parameter": {
            "$ref": "#/components/schemas/HA_Field"
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HA_Field"
            }
          },
          "prefixRequired": {
            "type": "boolean"
          },
          "optionName": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "$ref": "#/components/schemas/HA_Description"
          },
          "deprecation": {
            "nullable": true,
            "$ref": "#/components/schemas/HA_Deprecation"
          }
        },
        "required": [
          "parameter",
          "parameters",
          "prefixRequired",
          "optionName"
        ]
      },
      "HolidaysEvent": {
        "type": "object",
        "properties": {
          "profile": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "holidays": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicHoliday"
            }
          }
        },
        "required": [
          "profile",
          "holidays"
        ]
      },
      "IdeNames": {
        "type": "object",
        "properties": {
          "backendFullName": {
            "type": "string"
          },
          "backendShortName": {
            "type": "string"
          },
          "clientFullName": {
            "type": "string"
          },
          "clientShortName": {
            "type": "string"
          },
          "usesSeparateClientProduct": {
            "type": "boolean"
          }
        },
        "required": [
          "backendFullName",
          "backendShortName",
          "clientFullName",
          "clientShortName",
          "usesSeparateClientProduct"
        ]
      },
      "IdeType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "toolboxId": {
            "type": "string"
          },
          "names": {
            "$ref": "#/components/schemas/IdeNames"
          },
          "description": {
            "type": "string"
          },
          "defaultWarmupProfile": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "toolboxId",
          "names",
          "description",
          "defaultWarmupProfile"
        ]
      },
      "IdeVersionDetails": {
        "type": "object",
        "properties": {
          "ideName": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "versionDisplayName": {
            "type": "string"
          },
          "build": {
            "type": "string"
          },
          "releaseDate": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "quality": {
            "$ref": "#/components/schemas/IdeVersionQuality"
          }
        },
        "required": [
          "ideName",
          "version",
          "versionDisplayName",
          "build",
          "quality"
        ]
      },
      "IdeVersionQuality": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "name",
          "order"
        ]
      },
      "ImageAttachment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "width": {
            "type": "integer",
            "format": "int32"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          },
          "previewBytes": {
            "nullable": true,
            "type": "string"
          },
          "variants": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageAttachmentVariant"
            }
          }
        },
        "required": [
          "id",
          "width",
          "height"
        ]
      },
      "ImageAttachmentMeta": {
        "type": "object",
        "properties": {
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageAttachmentVariantsMeta"
            }
          }
        },
        "required": [
          "variants"
        ]
      },
      "ImageAttachmentVariant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "width": {
            "type": "integer",
            "format": "int32"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "id",
          "width",
          "height"
        ]
      },
      "ImageAttachmentVariantsMeta": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "width": {
            "type": "integer",
            "format": "int32"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "id",
          "name",
          "width",
          "height"
        ]
      },
      "ImportMessage": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ImportMessage.Create"
          },
          {
            "$ref": "#/components/schemas/ImportMessage.Delete"
          },
          {
            "$ref": "#/components/schemas/ImportMessage.Update"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ImportMessage.Create": {
        "type": "object",
        "properties": {
          "messageId": {
            "$ref": "#/components/schemas/ChatMessageIdentifier.ExternalId"
          },
          "message": {
            "$ref": "#/components/schemas/ChatMessage"
          },
          "author": {
            "$ref": "#/components/schemas/PrincipalIn"
          },
          "createdAtUtc": {
            "type": "integer",
            "format": "int64"
          },
          "editedAtUtc": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "attachments": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentIn"
            }
          }
        },
        "required": [
          "messageId",
          "message",
          "author",
          "createdAtUtc"
        ]
      },
      "ImportMessage.Delete": {
        "type": "object",
        "properties": {
          "messageId": {
            "$ref": "#/components/schemas/ChatMessageIdentifier.ExternalId"
          }
        },
        "required": [
          "messageId"
        ]
      },
      "ImportMessage.Update": {
        "type": "object",
        "properties": {
          "messageId": {
            "$ref": "#/components/schemas/ChatMessageIdentifier.ExternalId"
          },
          "message": {
            "$ref": "#/components/schemas/ChatMessage"
          },
          "author": {
            "$ref": "#/components/schemas/PrincipalIn"
          },
          "editedAtUtc": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "attachments": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentIn"
            }
          }
        },
        "required": [
          "messageId",
          "message",
          "author"
        ]
      },
      "ImportMetadata": {
        "type": "object",
        "properties": {
          "importSource": {
            "type": "string"
          }
        },
        "required": [
          "importSource"
        ]
      },
      "ImportTransactionRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "importer": {
            "$ref": "#/components/schemas/CPrincipal"
          },
          "externalSource": {
            "type": "string"
          },
          "imported": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "archived",
          "importer",
          "externalSource",
          "imported"
        ]
      },
      "InaccessibleContainerInfo": {
        "type": "object",
        "properties": {}
      },
      "InaccessibleDocumentBody": {
        "type": "object",
        "properties": {
          "docBodyType": {
            "$ref": "#/components/schemas/DocumentBodyType"
          },
          "docBodyId": {
            "type": "string"
          }
        },
        "required": [
          "docBodyType",
          "docBodyId"
        ]
      },
      "InitPayload": {
        "type": "object",
        "properties": {
          "clientSecret": {
            "type": "string"
          },
          "serverUrl": {
            "type": "string"
          },
          "state": {
            "nullable": true,
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "userId": {
            "nullable": true,
            "type": "string"
          },
          "verificationToken": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "clientSecret",
          "serverUrl",
          "clientId"
        ]
      },
      "InlineDiffLine": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "type": {
            "nullable": true,
            "$ref": "#/components/schemas/DiffLineType"
          },
          "oldLineNum": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "newLineNum": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "oldFileOffset": {
            "type": "integer",
            "format": "int32"
          },
          "newFileOffset": {
            "type": "integer",
            "format": "int32"
          },
          "syntax": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SyntaxMarkup"
            }
          },
          "deletes": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextRange"
            }
          },
          "inserts": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextRange"
            }
          }
        },
        "required": [
          "text",
          "oldFileOffset",
          "newFileOffset"
        ]
      },
      "InlineNode": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/RtEmoji"
          },
          {
            "$ref": "#/components/schemas/RtText"
          },
          {
            "$ref": "#/components/schemas/RtImage"
          },
          {
            "$ref": "#/components/schemas/RtBreak"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "IntCFConstraint": {
        "type": "object",
        "properties": {
          "min": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "max": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "IntCFType": {
        "type": "object",
        "properties": {}
      },
      "IntCFValue": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "IntListCFType": {
        "type": "object",
        "properties": {}
      },
      "IntListCFValue": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "required": [
          "values"
        ]
      },
      "Invitation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "inviteeEmail": {
            "type": "string"
          },
          "inviteeEmailBlocked": {
            "type": "boolean"
          },
          "inviteeEmailBlockedReason": {
            "nullable": true,
            "type": "string"
          },
          "inviteeFirstName": {
            "nullable": true,
            "type": "string"
          },
          "inviteeLastName": {
            "nullable": true,
            "type": "string"
          },
          "invitee": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "inviter": {
            "$ref": "#/components/schemas/CPrincipal"
          },
          "team": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_Team"
          },
          "role": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_Role"
          },
          "project": {
            "nullable": true,
            "$ref": "#/components/schemas/PR_Project"
          },
          "projectRole": {
            "nullable": true,
            "$ref": "#/components/schemas/ProjectTeamRole"
          },
          "revoked": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "expiresAt",
          "inviteeEmail",
          "inviteeEmailBlocked",
          "inviter"
        ]
      },
      "InvitationLink": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/CPrincipal"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "expiresAt": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "inviteeLimit": {
            "type": "integer",
            "format": "int32"
          },
          "inviteeUsage": {
            "type": "integer",
            "format": "int32"
          },
          "team": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_Team"
          },
          "position": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_Role"
          },
          "project": {
            "nullable": true,
            "$ref": "#/components/schemas/PR_Project"
          },
          "projectRole": {
            "$ref": "#/components/schemas/ProjectTeamRole"
          },
          "link": {
            "nullable": true,
            "type": "string"
          },
          "deleted": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "name",
          "createdBy",
          "createdAt",
          "inviteeLimit",
          "inviteeUsage",
          "projectRole",
          "deleted"
        ]
      },
      "Issue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "projectId": {
            "nullable": true,
            "type": "string"
          },
          "projectRef": {
            "$ref": "#/components/schemas/PR_Project"
          },
          "trackerRef": {
            "nullable": true,
            "$ref": "#/components/schemas/IssueTracker"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "createdBy": {
            "$ref": "#/components/schemas/CPrincipal"
          },
          "creationTime": {
            "type": "string",
            "format": "date-time"
          },
          "assignee": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "status": {
            "$ref": "#/components/schemas/IssueStatus"
          },
          "dueDate": {
            "nullable": true,
            "type": "string",
            "format": "full-date"
          },
          "externalEntityInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/ExternalEntityInfoRecord"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlanningTag"
            }
          },
          "title": {
            "type": "string"
          },
          "attachmentsCount": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "subItemsCount": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "doneSubItemsCount": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "commentsCount": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "deletedBy": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipal"
          },
          "deletedTime": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "messageOrigin": {
            "nullable": true,
            "$ref": "#/components/schemas/ChannelItemRecord"
          },
          "checklists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Checklist"
            }
          },
          "sprints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SprintRecord"
            }
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "channel": {
            "$ref": "#/components/schemas/M2ChannelRecord"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentInfo"
            }
          },
          "unfurls": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentInfo"
            }
          },
          "topics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Topic"
            }
          },
          "customFields": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CFValue"
            }
          }
        },
        "required": [
          "id",
          "archived",
          "projectRef",
          "number",
          "createdBy",
          "creationTime",
          "status",
          "tags",
          "title",
          "checklists",
          "sprints",
          "channel",
          "attachments",
          "topics",
          "customFields"
        ]
      },
      "IssueAssigneeChangedDetails": {
        "type": "object",
        "properties": {
          "oldAssignee": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "newAssignee": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_MemberProfile"
          }
        }
      },
      "IssueAttachmentsChangedDetails": {
        "type": "object",
        "properties": {
          "addedNames": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "removedNames": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "IssueCFInputValue": {
        "type": "object",
        "properties": {
          "issue": {
            "nullable": true,
            "$ref": "#/components/schemas/IssueIdentifier"
          }
        }
      },
      "IssueCFType": {
        "type": "object",
        "properties": {}
      },
      "IssueCFValue": {
        "type": "object",
        "properties": {
          "issue": {
            "nullable": true,
            "$ref": "#/components/schemas/Issue"
          }
        }
      },
      "IssueChangedM2Details": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/IssueAttachmentsChangedDetails"
          },
          {
            "$ref": "#/components/schemas/IssueDeletedDetails"
          },
          {
            "$ref": "#/components/schemas/IssueStatusChangedDetails"
          },
          {
            "$ref": "#/components/schemas/IssueMentionedDetails"
          },
          {
            "$ref": "#/components/schemas/IssueDueDateChangedDetails"
          },
          {
            "$ref": "#/components/schemas/IssueCreatedDetails"
          },
          {
            "$ref": "#/components/schemas/IssueTitleChangedDetails"
          },
          {
            "$ref": "#/components/schemas/IssueChecklistsChangedDetails"
          },
          {
            "$ref": "#/components/schemas/IssueDescriptionChangedDetails"
          },
          {
            "$ref": "#/components/schemas/IssueMCExtension"
          },
          {
            "$ref": "#/components/schemas/IssueTagsChangedDetails"
          },
          {
            "$ref": "#/components/schemas/IssueAssigneeChangedDetails"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "IssueChecklistsChangedDetails": {
        "type": "object",
        "properties": {
          "addedChecklists": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Checklist"
            }
          },
          "removedChecklists": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Checklist"
            }
          }
        }
      },
      "IssueCodeChangesMCExtension": {
        "type": "object",
        "properties": {}
      },
      "IssueCommits": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "IssueCreatedDetails": {
        "type": "object",
        "properties": {
          "issue": {
            "nullable": true,
            "$ref": "#/components/schemas/Issue"
          },
          "originMessage": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageLink"
          }
        }
      },
      "IssueDeletedDetails": {
        "type": "object",
        "properties": {}
      },
      "IssueDescriptionChangedDetails": {
        "type": "object",
        "properties": {
          "oldDescription": {
            "nullable": true,
            "type": "string"
          },
          "newDescription": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "IssueDueDateChangedDetails": {
        "type": "object",
        "properties": {
          "oldDueDate": {
            "nullable": true,
            "type": "string",
            "format": "full-date"
          },
          "newDueDate": {
            "nullable": true,
            "type": "string",
            "format": "full-date"
          }
        }
      },
      "IssueEditableByMe": {
        "type": "object",
        "properties": {}
      },
      "IssueImportResult": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "created": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IssueImportResultItem"
            }
          },
          "updated": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IssueImportResultItem"
            }
          },
          "skipped": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IssueImportResultItem"
            }
          },
          "missingAttributes": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "message"
        ]
      },
      "IssueImportResultItem": {
        "type": "object",
        "properties": {
          "externalId": {
            "nullable": true,
            "type": "string"
          },
          "issue": {
            "nullable": true,
            "$ref": "#/components/schemas/Issue"
          },
          "error": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "IssueListCFInputValue": {
        "type": "object",
        "properties": {
          "issues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IssueIdentifier"
            }
          }
        },
        "required": [
          "issues"
        ]
      },
      "IssueListCFType": {
        "type": "object",
        "properties": {}
      },
      "IssueListCFValue": {
        "type": "object",
        "properties": {
          "issues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Issue"
            }
          }
        },
        "required": [
          "issues"
        ]
      },
      "IssueMCExtension": {
        "type": "object",
        "properties": {}
      },
      "IssueMentionedDetails": {
        "type": "object",
        "properties": {
          "message": {
            "$ref": "#/components/schemas/ChannelItemSnapshot"
          }
        },
        "required": [
          "message"
        ]
      },
      "IssueMenuActionContext": {
        "type": "object",
        "properties": {
          "projectIdentifier": {
            "$ref": "#/components/schemas/ProjectIdentifier"
          },
          "issueIdentifier": {
            "$ref": "#/components/schemas/IssueIdentifier"
          }
        },
        "required": [
          "projectIdentifier",
          "issueIdentifier"
        ]
      },
      "IssueMenuItemUiExtensionApi": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "menuItemUniqueCode": {
            "type": "string"
          },
          "visibilityFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IssueMenuItemVisibilityFilterApi"
            }
          }
        },
        "required": [
          "displayName",
          "menuItemUniqueCode",
          "visibilityFilters"
        ]
      },
      "IssueMenuItemUiExtensionIn": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "menuItemUniqueCode": {
            "type": "string"
          },
          "visibilityFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IssueMenuItemVisibilityFilterIn"
            }
          }
        },
        "required": [
          "displayName",
          "menuItemUniqueCode",
          "visibilityFilters"
        ]
      },
      "IssueMenuItemVisibilityFilterApi": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/IssueEditableByMe"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "IssueMenuItemVisibilityFilterIn": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/IssueEditableByMe"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "IssueStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "resolved": {
            "type": "boolean"
          },
          "color": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "archived",
          "name",
          "resolved",
          "color"
        ]
      },
      "IssueStatusChangedDetails": {
        "type": "object",
        "properties": {
          "oldStatus": {
            "$ref": "#/components/schemas/IssueStatus"
          },
          "newStatus": {
            "$ref": "#/components/schemas/IssueStatus"
          }
        },
        "required": [
          "oldStatus",
          "newStatus"
        ]
      },
      "IssueStatusData": {
        "type": "object",
        "properties": {
          "existingId": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "resolved": {
            "type": "boolean"
          },
          "color": {
            "type": "string"
          },
          "originalStatus": {
            "nullable": true,
            "$ref": "#/components/schemas/IssueStatus"
          }
        },
        "required": [
          "name",
          "resolved",
          "color"
        ]
      },
      "IssueStatusWithUsages": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/IssueStatus"
          },
          "usages": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "status",
          "usages"
        ]
      },
      "IssueTagsChangedDetails": {
        "type": "object",
        "properties": {
          "addedTags": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlanningTag"
            }
          },
          "removedTags": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlanningTag"
            }
          }
        }
      },
      "IssueTitleChangedDetails": {
        "type": "object",
        "properties": {
          "oldTitle": {
            "type": "string"
          },
          "newTitle": {
            "type": "string"
          }
        },
        "required": [
          "oldTitle",
          "newTitle"
        ]
      },
      "IssueTracker": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "archived",
          "name"
        ]
      },
      "IssueUnfurlContext": {
        "type": "object",
        "properties": {
          "issueId": {
            "type": "string"
          }
        },
        "required": [
          "issueId"
        ]
      },
      "IssueWebhookCustomFieldUpdate": {
        "type": "object",
        "properties": {
          "customField": {
            "$ref": "#/components/schemas/CustomField"
          },
          "mod": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "$ref": "#/components/schemas/CFValue"
              },
              "new": {
                "$ref": "#/components/schemas/CFValue"
              }
            },
            "required": [
              "old",
              "new"
            ]
          }
        },
        "required": [
          "customField"
        ]
      },
      "IssueWebhookEvent": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/KMetaMod"
          },
          "issue": {
            "$ref": "#/components/schemas/Issue"
          },
          "title": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "string"
              },
              "new": {
                "type": "string"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "description": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "string"
              },
              "new": {
                "type": "string"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "assignee": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "$ref": "#/components/schemas/TD_MemberProfile"
              },
              "new": {
                "$ref": "#/components/schemas/TD_MemberProfile"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "status": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "$ref": "#/components/schemas/IssueStatus"
              },
              "new": {
                "$ref": "#/components/schemas/IssueStatus"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "dueDate": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "string",
                "format": "full-date"
              },
              "new": {
                "type": "string",
                "format": "full-date"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "tagDelta": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PlanningTag"
                }
              },
              "new": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PlanningTag"
                }
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "topicDelta": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Topic"
                }
              },
              "new": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Topic"
                }
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "checklistDelta": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Checklist"
                }
              },
              "new": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Checklist"
                }
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "sprintDelta": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SprintRecord"
                }
              },
              "new": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SprintRecord"
                }
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "customFieldUpdate": {
            "nullable": true,
            "$ref": "#/components/schemas/IssueWebhookCustomFieldUpdate"
          },
          "deleted": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "boolean"
              },
              "new": {
                "type": "boolean"
              }
            },
            "required": [
              "old",
              "new"
            ]
          }
        },
        "required": [
          "meta",
          "issue"
        ]
      },
      "JobDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "repoName": {
            "type": "string"
          },
          "repository": {
            "$ref": "#/components/schemas/RepositoryInProject"
          },
          "archive": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "name",
          "repoName",
          "repository",
          "archive"
        ]
      },
      "JobExecutionDTO": {
        "type": "object",
        "properties": {
          "executionId": {
            "type": "string"
          },
          "executionNumber": {
            "type": "integer",
            "format": "int64"
          },
          "jobId": {
            "type": "string"
          },
          "jobName": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "branch": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ExecutionStatus"
          },
          "triggeredTime": {
            "type": "integer",
            "format": "int64"
          },
          "startedTime": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "finishedTime": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "changesCount": {
            "type": "integer",
            "format": "int32"
          },
          "predictedEndTime": {
            "nullable": true,
            "$ref": "#/components/schemas/EstimationDTO"
          },
          "failureConditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FailureConditionDTO"
            }
          }
        },
        "required": [
          "executionId",
          "executionNumber",
          "jobId",
          "jobName",
          "projectId",
          "branch",
          "status",
          "triggeredTime",
          "changesCount",
          "failureConditions"
        ]
      },
      "JobExecutionTrigger": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/JobExecutionTrigger.CodeReviewClosed"
          },
          {
            "$ref": "#/components/schemas/JobExecutionTrigger.CodeReviewOpened"
          },
          {
            "$ref": "#/components/schemas/JobExecutionTrigger.GitBranchDeleted"
          },
          {
            "$ref": "#/components/schemas/JobExecutionTrigger.GitPush"
          },
          {
            "$ref": "#/components/schemas/JobExecutionTrigger.Manual"
          },
          {
            "$ref": "#/components/schemas/JobExecutionTrigger.Schedule"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "JobExecutionTrigger.CodeReviewClosed": {
        "type": "object",
        "properties": {
          "reviewId": {
            "type": "string"
          }
        },
        "required": [
          "reviewId"
        ]
      },
      "JobExecutionTrigger.CodeReviewOpened": {
        "type": "object",
        "properties": {
          "reviewId": {
            "type": "string"
          }
        },
        "required": [
          "reviewId"
        ]
      },
      "JobExecutionTrigger.GitBranchDeleted": {
        "type": "object",
        "properties": {
          "branches": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "branches"
        ]
      },
      "JobExecutionTrigger.GitPush": {
        "type": "object",
        "properties": {
          "commit": {
            "type": "string"
          }
        },
        "required": [
          "commit"
        ]
      },
      "JobExecutionTrigger.Manual": {
        "type": "object",
        "properties": {
          "principal": {
            "$ref": "#/components/schemas/CPrincipal"
          }
        },
        "required": [
          "principal"
        ]
      },
      "JobExecutionTrigger.Schedule": {
        "type": "object",
        "properties": {}
      },
      "JobParameter": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ]
      },
      "JobSubscription": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "jobId": {
            "type": "string"
          },
          "project": {
            "$ref": "#/components/schemas/PR_Project"
          },
          "state": {
            "$ref": "#/components/schemas/JobSubscriptionState"
          },
          "archived": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "jobId",
          "project",
          "state",
          "archived"
        ]
      },
      "JobSubscriptionState": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/JobSubscriptionType"
          },
          "containsMyCommit": {
            "type": "boolean"
          },
          "runByMe": {
            "type": "boolean"
          }
        },
        "required": [
          "type",
          "containsMyCommit",
          "runByMe"
        ]
      },
      "KB_Article": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "book": {
            "$ref": "#/components/schemas/KB_Book"
          },
          "folder": {
            "$ref": "#/components/schemas/KB_Folder"
          },
          "documentId": {
            "type": "string"
          },
          "documentRef": {
            "$ref": "#/components/schemas/Document"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipal"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipal"
          },
          "alias": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "archived",
          "title",
          "book",
          "folder",
          "documentId",
          "documentRef",
          "created",
          "updated",
          "alias"
        ]
      },
      "KB_Book": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "updated": {
            "type": "integer",
            "format": "int64"
          },
          "updatedBy": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipal"
          },
          "alias": {
            "type": "string"
          },
          "contexts": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KB_BookContext"
            }
          },
          "project": {
            "nullable": true,
            "$ref": "#/components/schemas/PR_Project"
          },
          "rootFolder": {
            "$ref": "#/components/schemas/KB_Folder"
          }
        },
        "required": [
          "id",
          "archived",
          "name",
          "summary",
          "updated",
          "alias",
          "rootFolder"
        ]
      },
      "KB_BookContext": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/KbPersonalContext"
          },
          {
            "$ref": "#/components/schemas/KbProjectContext"
          },
          {
            "$ref": "#/components/schemas/KbNoneContext"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "KB_Folder": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "parent": {
            "nullable": true,
            "$ref": "#/components/schemas/KB_Folder"
          },
          "subfolders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KB_Folder"
            }
          },
          "articles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KB_Article"
            }
          },
          "book": {
            "$ref": "#/components/schemas/KB_Book"
          },
          "cover": {
            "nullable": true,
            "$ref": "#/components/schemas/KB_Article"
          },
          "alias": {
            "type": "string"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipal"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipal"
          }
        },
        "required": [
          "id",
          "archived",
          "name",
          "subfolders",
          "articles",
          "book",
          "alias",
          "created",
          "updated"
        ]
      },
      "KMetaMod": {
        "type": "object",
        "properties": {
          "principal": {
            "$ref": "#/components/schemas/CPrincipal"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "method": {
            "type": "string"
          }
        },
        "required": [
          "principal",
          "timestamp",
          "method"
        ]
      },
      "KbDocumentItem": {
        "type": "object",
        "properties": {
          "book": {
            "$ref": "#/components/schemas/KB_Book"
          },
          "articleId": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "containerLinkId": {
            "type": "string"
          }
        },
        "required": [
          "book",
          "articleId",
          "id",
          "name",
          "path",
          "containerLinkId"
        ]
      },
      "KbFolderItem": {
        "type": "object",
        "properties": {
          "book": {
            "$ref": "#/components/schemas/KB_Book"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "book",
          "id",
          "name",
          "path"
        ]
      },
      "KbNoneContext": {
        "type": "object",
        "properties": {}
      },
      "KbPersonalContext": {
        "type": "object",
        "properties": {
          "owner": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          }
        },
        "required": [
          "owner"
        ]
      },
      "KbProjectContext": {
        "type": "object",
        "properties": {
          "project": {
            "$ref": "#/components/schemas/PR_Project"
          }
        },
        "required": [
          "project"
        ]
      },
      "KotlinPlatform": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "targets": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "targets"
        ]
      },
      "LastChanges": {
        "type": "object",
        "properties": {
          "lastChanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RevisionInfo"
            }
          },
          "totalChanges": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "lastChanges",
          "totalChanges"
        ]
      },
      "LaunchResult": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/LaunchResult.Error"
          },
          {
            "$ref": "#/components/schemas/LaunchResult.Success"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "LaunchResult.Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "LaunchResult.Success": {
        "type": "object",
        "properties": {
          "executionId": {
            "type": "string"
          }
        },
        "required": [
          "executionId"
        ]
      },
      "LinkPreview": {
        "type": "object",
        "properties": {}
      },
      "ListCommandsPayload": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "userId": {
            "nullable": true,
            "type": "string"
          },
          "verificationToken": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "clientId"
        ]
      },
      "LocationCFInputValue": {
        "type": "object",
        "properties": {
          "location": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "LocationCFType": {
        "type": "object",
        "properties": {}
      },
      "LocationCFValue": {
        "type": "object",
        "properties": {
          "location": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_Location"
          }
        }
      },
      "LocationEvent": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/KMetaMod"
          },
          "location": {
            "$ref": "#/components/schemas/TD_Location"
          }
        },
        "required": [
          "meta",
          "location"
        ]
      },
      "M2AbsenceItemApproveDeletedContent": {
        "type": "object",
        "properties": {
          "absence": {
            "$ref": "#/components/schemas/AbsenceRecord"
          },
          "by": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "approve": {
            "type": "boolean"
          }
        },
        "required": [
          "absence",
          "by",
          "approve"
        ]
      },
      "M2AbsenceItemApprovedContent": {
        "type": "object",
        "properties": {
          "absence": {
            "$ref": "#/components/schemas/AbsenceRecord"
          },
          "by": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "approve": {
            "type": "boolean"
          }
        },
        "required": [
          "absence",
          "by",
          "approve"
        ]
      },
      "M2AbsenceItemContent": {
        "type": "object",
        "properties": {
          "absence": {
            "$ref": "#/components/schemas/AbsenceRecord"
          },
          "by": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_MemberProfile"
          }
        },
        "required": [
          "absence"
        ]
      },
      "M2AbsenceItemDeletedContent": {
        "type": "object",
        "properties": {
          "absence": {
            "$ref": "#/components/schemas/AbsenceRecord"
          },
          "by": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_MemberProfile"
          }
        },
        "required": [
          "absence"
        ]
      },
      "M2AbsenceItemUpdatedContent": {
        "type": "object",
        "properties": {
          "absence": {
            "$ref": "#/components/schemas/AbsenceRecord"
          },
          "reason": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "$ref": "#/components/schemas/AbsenceReasonRecord"
              },
              "new": {
                "$ref": "#/components/schemas/AbsenceReasonRecord"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "description": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "string"
              },
              "new": {
                "type": "string"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "since": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "string",
                "format": "full-date"
              },
              "new": {
                "type": "string",
                "format": "full-date"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "till": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "string",
                "format": "full-date"
              },
              "new": {
                "type": "string",
                "format": "full-date"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "by": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_MemberProfile"
          }
        },
        "required": [
          "absence"
        ]
      },
      "M2BlogItemContent": {
        "type": "object",
        "properties": {
          "article": {
            "$ref": "#/components/schemas/ArticleRecord"
          },
          "articleContent": {
            "$ref": "#/components/schemas/ArticleContentRecord"
          },
          "articleDetails": {
            "$ref": "#/components/schemas/ArticleDetailsRecord"
          },
          "articleChannel": {
            "$ref": "#/components/schemas/ArticleChannelRecord"
          }
        },
        "required": [
          "article",
          "articleContent",
          "articleDetails",
          "articleChannel"
        ]
      },
      "M2BlogItemContentDetails": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/M2BlogItemContent"
          },
          {
            "$ref": "#/components/schemas/M2BlogItemPreview"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "M2BlogItemPreview": {
        "type": "object",
        "properties": {
          "article": {
            "$ref": "#/components/schemas/ArticleRecord"
          },
          "articlePreview": {
            "$ref": "#/components/schemas/ArticlePreviewRecord"
          },
          "articleDetails": {
            "$ref": "#/components/schemas/ArticleDetailsRecord"
          },
          "articleChannel": {
            "$ref": "#/components/schemas/ArticleChannelRecord"
          }
        },
        "required": [
          "article",
          "articlePreview",
          "articleDetails",
          "articleChannel"
        ]
      },
      "M2ChannelArchivedItemDetails": {
        "type": "object",
        "properties": {}
      },
      "M2ChannelAutomationJobFeedInfo": {
        "type": "object",
        "properties": {
          "jobSubscription": {
            "$ref": "#/components/schemas/JobSubscription"
          },
          "jobName": {
            "type": "string"
          },
          "repoName": {
            "nullable": true,
            "type": "string"
          },
          "notificationDefaults": {
            "$ref": "#/components/schemas/ChannelSpecificDefaults"
          }
        },
        "required": [
          "jobSubscription",
          "jobName",
          "notificationDefaults"
        ]
      },
      "M2ChannelContact": {
        "type": "object",
        "properties": {
          "defaultName": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "ext": {
            "nullable": true,
            "$ref": "#/components/schemas/M2ChannelContactInfo"
          }
        },
        "required": [
          "defaultName",
          "key"
        ]
      },
      "M2ChannelContactArticle": {
        "type": "object",
        "properties": {
          "article": {
            "$ref": "#/components/schemas/ArticleRecord"
          },
          "notificationDefaults": {
            "$ref": "#/components/schemas/ChannelSpecificDefaults"
          }
        },
        "required": [
          "article",
          "notificationDefaults"
        ]
      },
      "M2ChannelContactInfo": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/M2ChannelContentCodeDiscussion"
          },
          {
            "$ref": "#/components/schemas/M2ChannelContactObsolete"
          },
          {
            "$ref": "#/components/schemas/SpaceNewsFeedChannel"
          },
          {
            "$ref": "#/components/schemas/M2ChannelContentCodeReviewDiscussion"
          },
          {
            "$ref": "#/components/schemas/M2PrivateConversationChannelContent"
          },
          {
            "$ref": "#/components/schemas/M2ChannelContentNamedPrivateChannel"
          },
          {
            "$ref": "#/components/schemas/M2ChannelContentCodeDiscussionInReview"
          },
          {
            "$ref": "#/components/schemas/M2ChannelContactThread"
          },
          {
            "$ref": "#/components/schemas/M2ChannelRdWsTimelineInfo"
          },
          {
            "$ref": "#/components/schemas/M2ChannelContactArticle"
          },
          {
            "$ref": "#/components/schemas/DeploymentM2ChannelInfo"
          },
          {
            "$ref": "#/components/schemas/M2ChannelAutomationJobFeedInfo"
          },
          {
            "$ref": "#/components/schemas/M2ChannelContentMember"
          },
          {
            "$ref": "#/components/schemas/DeploymentTargetM2ChannelInfo"
          },
          {
            "$ref": "#/components/schemas/M2ChannelContentApplication"
          },
          {
            "$ref": "#/components/schemas/BillingFeedChannel"
          },
          {
            "$ref": "#/components/schemas/M2SharedChannelContent"
          },
          {
            "$ref": "#/components/schemas/M2ChannelContentCodeReviewFeed"
          },
          {
            "$ref": "#/components/schemas/M2ChannelIssueInfo"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "M2ChannelContactObsolete": {
        "type": "object",
        "properties": {
          "cause": {
            "nullable": true,
            "$ref": "#/components/schemas/M2ObsoleteCause"
          }
        }
      },
      "M2ChannelContactThread": {
        "type": "object",
        "properties": {
          "parent": {
            "$ref": "#/components/schemas/M2ChannelRecord"
          },
          "text": {
            "nullable": true,
            "type": "string"
          },
          "messageId": {
            "type": "string"
          },
          "messageAuthor": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipal"
          },
          "attachments": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "parent",
          "messageId"
        ]
      },
      "M2ChannelContentApplication": {
        "type": "object",
        "properties": {
          "app": {
            "$ref": "#/components/schemas/ES_App"
          },
          "notificationDefaults": {
            "$ref": "#/components/schemas/ChannelSpecificDefaults"
          }
        },
        "required": [
          "app",
          "notificationDefaults"
        ]
      },
      "M2ChannelContentArticle": {
        "type": "object",
        "properties": {
          "article": {
            "$ref": "#/components/schemas/ArticleRecord"
          },
          "articleContent": {
            "$ref": "#/components/schemas/ArticleContentRecord"
          },
          "details": {
            "nullable": true,
            "$ref": "#/components/schemas/ArticleDetailsRecord"
          },
          "channel": {
            "nullable": true,
            "$ref": "#/components/schemas/ArticleChannelRecord"
          }
        },
        "required": [
          "article",
          "articleContent"
        ]
      },
      "M2ChannelContentCodeDiscussion": {
        "type": "object",
        "properties": {
          "codeDiscussionId": {
            "type": "string"
          },
          "notificationDefaults": {
            "$ref": "#/components/schemas/ChannelSpecificDefaults"
          },
          "codeDiscussion": {
            "nullable": true,
            "$ref": "#/components/schemas/CodeDiscussionRecord"
          }
        },
        "required": [
          "codeDiscussionId",
          "notificationDefaults"
        ]
      },
      "M2ChannelContentCodeDiscussionInReview": {
        "type": "object",
        "properties": {
          "notificationDefaults": {
            "$ref": "#/components/schemas/ChannelSpecificDefaults"
          },
          "codeDiscussion": {
            "$ref": "#/components/schemas/CodeDiscussionRecord"
          },
          "parent": {
            "$ref": "#/components/schemas/M2ChannelRecord"
          },
          "messageId": {
            "type": "string"
          }
        },
        "required": [
          "notificationDefaults",
          "codeDiscussion",
          "parent",
          "messageId"
        ]
      },
      "M2ChannelContentCodeReviewDiscussion": {
        "type": "object",
        "properties": {
          "codeReviewDiscussion": {
            "type": "string"
          },
          "notificationDefaults": {
            "$ref": "#/components/schemas/ChannelSpecificDefaults"
          }
        },
        "required": [
          "codeReviewDiscussion",
          "notificationDefaults"
        ]
      },
      "M2ChannelContentCodeReviewFeed": {
        "type": "object",
        "properties": {
          "codeReviewId": {
            "type": "string"
          },
          "notificationDefaults": {
            "$ref": "#/components/schemas/ChannelSpecificDefaults"
          },
          "codeReview": {
            "nullable": true,
            "$ref": "#/components/schemas/CodeReviewRecord"
          },
          "participants": {
            "nullable": true,
            "$ref": "#/components/schemas/CodeReviewParticipants"
          },
          "pendingMessageCounter": {
            "nullable": true,
            "$ref": "#/components/schemas/CodeReviewPendingMessageCounter"
          },
          "project": {
            "nullable": true,
            "$ref": "#/components/schemas/PR_Project"
          }
        },
        "required": [
          "codeReviewId",
          "notificationDefaults"
        ]
      },
      "M2ChannelContentInfo": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/M2ChannelContentCodeDiscussion"
          },
          {
            "$ref": "#/components/schemas/M2ChannelContactObsolete"
          },
          {
            "$ref": "#/components/schemas/SpaceNewsFeedChannel"
          },
          {
            "$ref": "#/components/schemas/M2ChannelContentCodeReviewDiscussion"
          },
          {
            "$ref": "#/components/schemas/M2PrivateConversationChannelContent"
          },
          {
            "$ref": "#/components/schemas/M2ChannelContentNamedPrivateChannel"
          },
          {
            "$ref": "#/components/schemas/M2ChannelContentArticle"
          },
          {
            "$ref": "#/components/schemas/M2ChannelRdWsTimelineInfo"
          },
          {
            "$ref": "#/components/schemas/DeploymentM2ChannelInfo"
          },
          {
            "$ref": "#/components/schemas/M2ChannelAutomationJobFeedInfo"
          },
          {
            "$ref": "#/components/schemas/M2ChannelContentMember"
          },
          {
            "$ref": "#/components/schemas/DeploymentTargetM2ChannelInfo"
          },
          {
            "$ref": "#/components/schemas/M2ChannelContentThread"
          },
          {
            "$ref": "#/components/schemas/M2ChannelContentApplication"
          },
          {
            "$ref": "#/components/schemas/BillingFeedChannel"
          },
          {
            "$ref": "#/components/schemas/M2SharedChannelContent"
          },
          {
            "$ref": "#/components/schemas/M2ChannelContentCodeReviewFeed"
          },
          {
            "$ref": "#/components/schemas/M2ChannelIssueInfo"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "M2ChannelContentMember": {
        "type": "object",
        "properties": {
          "member": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "notificationDefaults": {
            "$ref": "#/components/schemas/ChannelSpecificDefaults"
          },
          "memberTeams": {
            "nullable": true,
            "$ref": "#/components/schemas/ProfileMembershipRecord"
          }
        },
        "required": [
          "member",
          "notificationDefaults"
        ]
      },
      "M2ChannelContentNamedPrivateChannel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "notificationDefaults": {
            "nullable": true,
            "$ref": "#/components/schemas/ChannelSpecificDefaults"
          },
          "canHaveThreads": {
            "type": "boolean"
          },
          "color": {
            "nullable": true,
            "$ref": "#/components/schemas/PrivateFeedColor"
          },
          "icon": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "name",
          "canHaveThreads"
        ]
      },
      "M2ChannelContentRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "content": {
            "nullable": true,
            "$ref": "#/components/schemas/M2ChannelContentInfo"
          }
        },
        "required": [
          "id"
        ]
      },
      "M2ChannelContentThread": {
        "type": "object",
        "properties": {
          "record": {
            "$ref": "#/components/schemas/ChannelItemRecord"
          },
          "parent": {
            "$ref": "#/components/schemas/M2ChannelRecord"
          }
        },
        "required": [
          "record",
          "parent"
        ]
      },
      "M2ChannelCreatedItemDetails": {
        "type": "object",
        "properties": {}
      },
      "M2ChannelFeedIntroItemDetails": {
        "type": "object",
        "properties": {}
      },
      "M2ChannelIssueInfo": {
        "type": "object",
        "properties": {
          "projectKey": {
            "nullable": true,
            "$ref": "#/components/schemas/ProjectKey"
          },
          "issue": {
            "$ref": "#/components/schemas/Issue"
          },
          "notificationDefaults": {
            "$ref": "#/components/schemas/ChannelSpecificDefaults"
          }
        },
        "required": [
          "issue",
          "notificationDefaults"
        ]
      },
      "M2ChannelRdWsTimelineInfo": {
        "type": "object",
        "properties": {
          "notificationDefaults": {
            "$ref": "#/components/schemas/ChannelSpecificDefaults"
          },
          "workspaceId": {
            "type": "string"
          },
          "workspaceName": {
            "type": "string"
          }
        },
        "required": [
          "notificationDefaults",
          "workspaceId",
          "workspaceName"
        ]
      },
      "M2ChannelRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "contact": {
            "$ref": "#/components/schemas/M2ChannelContact"
          },
          "totalMessages": {
            "type": "integer",
            "format": "int32"
          },
          "lastMessage": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageInfo"
          },
          "participants": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelParticipant"
            }
          },
          "channelArchived": {
            "nullable": true,
            "type": "boolean"
          },
          "archived": {
            "type": "boolean"
          },
          "content": {
            "nullable": true,
            "$ref": "#/components/schemas/M2ChannelContentInfo"
          },
          "pinnedMessages": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelItemRecord"
            }
          }
        },
        "required": [
          "id",
          "contact",
          "totalMessages",
          "archived"
        ]
      },
      "M2ChannelRestoredItemDetails": {
        "type": "object",
        "properties": {}
      },
      "M2DraftEditorAddedItemContent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "title"
        ]
      },
      "M2DraftEditorTeamAddedItemContent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "team": {
            "$ref": "#/components/schemas/TD_Team"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "team",
          "title"
        ]
      },
      "M2ExternalStatusFailureItemContent": {
        "type": "object",
        "properties": {
          "projectId": {
            "nullable": true,
            "type": "string"
          },
          "repository": {
            "type": "string"
          },
          "branch": {
            "type": "string"
          },
          "revisionInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/RevisionAuthorInfo"
          },
          "changesInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/LastChanges"
          },
          "url": {
            "type": "string"
          },
          "externalServiceName": {
            "type": "string"
          },
          "taskName": {
            "type": "string"
          },
          "timestamp": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "description": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "repository",
          "branch",
          "url",
          "externalServiceName",
          "taskName"
        ]
      },
      "M2ExternalStatusSucceedItemContent": {
        "type": "object",
        "properties": {
          "projectId": {
            "nullable": true,
            "type": "string"
          },
          "repository": {
            "type": "string"
          },
          "branch": {
            "type": "string"
          },
          "revisionInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/RevisionAuthorInfo"
          },
          "changesInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/LastChanges"
          },
          "url": {
            "type": "string"
          },
          "externalServiceName": {
            "type": "string"
          },
          "taskName": {
            "type": "string"
          },
          "timestamp": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "description": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "repository",
          "branch",
          "url",
          "externalServiceName",
          "taskName"
        ]
      },
      "M2ItemContentDetails": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/DeploymentM2DetailsNoThread"
          },
          {
            "$ref": "#/components/schemas/M2TaskExecutionSucceedItemContent"
          },
          {
            "$ref": "#/components/schemas/DeploymentM2DetailsWithThread"
          },
          {
            "$ref": "#/components/schemas/M2AbsenceItemDeletedContent"
          },
          {
            "$ref": "#/components/schemas/M2AbsenceItemUpdatedContent"
          },
          {
            "$ref": "#/components/schemas/M2DraftEditorAddedItemContent"
          },
          {
            "$ref": "#/components/schemas/M2ChannelCreatedItemDetails"
          },
          {
            "$ref": "#/components/schemas/M2PackageCreatedDetails"
          },
          {
            "$ref": "#/components/schemas/M2PackageDeletedDetails"
          },
          {
            "$ref": "#/components/schemas/M2MaintenanceActionContent"
          },
          {
            "$ref": "#/components/schemas/TeamAddedItemDetails"
          },
          {
            "$ref": "#/components/schemas/IssueAttachmentsChangedDetails"
          },
          {
            "$ref": "#/components/schemas/IssueDeletedDetails"
          },
          {
            "$ref": "#/components/schemas/IssueStatusChangedDetails"
          },
          {
            "$ref": "#/components/schemas/IssueMentionedDetails"
          },
          {
            "$ref": "#/components/schemas/IssueDueDateChangedDetails"
          },
          {
            "$ref": "#/components/schemas/IssueCreatedDetails"
          },
          {
            "$ref": "#/components/schemas/IssueTitleChangedDetails"
          },
          {
            "$ref": "#/components/schemas/IssueChecklistsChangedDetails"
          },
          {
            "$ref": "#/components/schemas/IssueDescriptionChangedDetails"
          },
          {
            "$ref": "#/components/schemas/IssueMCExtension"
          },
          {
            "$ref": "#/components/schemas/IssueTagsChangedDetails"
          },
          {
            "$ref": "#/components/schemas/IssueAssigneeChangedDetails"
          },
          {
            "$ref": "#/components/schemas/MCMessage"
          },
          {
            "$ref": "#/components/schemas/M2MembershipContent"
          },
          {
            "$ref": "#/components/schemas/M2MembershipCreatedContent"
          },
          {
            "$ref": "#/components/schemas/M2MembershipRequestedContent"
          },
          {
            "$ref": "#/components/schemas/M2MembershipTerminatedContent"
          },
          {
            "$ref": "#/components/schemas/M2BlogItemContent"
          },
          {
            "$ref": "#/components/schemas/M2BlogItemPreview"
          },
          {
            "$ref": "#/components/schemas/M2DraftEditorTeamAddedItemContent"
          },
          {
            "$ref": "#/components/schemas/M2ChannelFeedIntroItemDetails"
          },
          {
            "$ref": "#/components/schemas/VideoCallChannelItemContent"
          },
          {
            "$ref": "#/components/schemas/M2ChannelRestoredItemDetails"
          },
          {
            "$ref": "#/components/schemas/MembersAddedItemDetails"
          },
          {
            "$ref": "#/components/schemas/M2TextItemContent"
          },
          {
            "$ref": "#/components/schemas/M2UserLeftChannel"
          },
          {
            "$ref": "#/components/schemas/M2AbsenceItemApprovedContent"
          },
          {
            "$ref": "#/components/schemas/MCMessageCommonDetails"
          },
          {
            "$ref": "#/components/schemas/M2PollContent"
          },
          {
            "$ref": "#/components/schemas/CodeSuggestedEditHeadContentDetails"
          },
          {
            "$ref": "#/components/schemas/M2AbsenceItemApproveDeletedContent"
          },
          {
            "$ref": "#/components/schemas/M2ChannelArchivedItemDetails"
          },
          {
            "$ref": "#/components/schemas/MembershipMCExtension"
          },
          {
            "$ref": "#/components/schemas/M2TaskExecutionFailureItemContent"
          },
          {
            "$ref": "#/components/schemas/M2ExternalStatusSucceedItemContent"
          },
          {
            "$ref": "#/components/schemas/IssueCodeChangesMCExtension"
          },
          {
            "$ref": "#/components/schemas/M2AbsenceItemContent"
          },
          {
            "$ref": "#/components/schemas/M2ExternalStatusFailureItemContent"
          },
          {
            "$ref": "#/components/schemas/M2MemberContent"
          },
          {
            "$ref": "#/components/schemas/M2MemberLeavesContent"
          },
          {
            "$ref": "#/components/schemas/M2MemberJoinsContent"
          },
          {
            "$ref": "#/components/schemas/ReviewerChangedEvent"
          },
          {
            "$ref": "#/components/schemas/ReviewTitleChangedEvent"
          },
          {
            "$ref": "#/components/schemas/ReviewRevisionsChangedEvent"
          },
          {
            "$ref": "#/components/schemas/CodeReviewDiscussionAddedFeedEvent"
          },
          {
            "$ref": "#/components/schemas/MergeRequestBranchRestoredEvent"
          },
          {
            "$ref": "#/components/schemas/MergeRequestBranchDeletedEvent"
          },
          {
            "$ref": "#/components/schemas/ReviewStateChangedEvent"
          },
          {
            "$ref": "#/components/schemas/CodeDiscussionAddedFeedEvent"
          },
          {
            "$ref": "#/components/schemas/MergeRequestMergedEvent"
          },
          {
            "$ref": "#/components/schemas/ReviewBranchTrackEvent"
          },
          {
            "$ref": "#/components/schemas/ReviewCompletionStateChangedEvent"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "M2MaintenanceActionContent": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          },
          "details": {
            "type": "string"
          }
        },
        "required": [
          "action",
          "success",
          "details"
        ]
      },
      "M2MemberContent": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/M2MemberContent"
          },
          {
            "$ref": "#/components/schemas/M2MemberLeavesContent"
          },
          {
            "$ref": "#/components/schemas/M2MemberJoinsContent"
          },
          {
            "type": "object",
            "properties": {}
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "M2MemberJoinsContent": {
        "type": "object",
        "properties": {
          "member": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          }
        },
        "required": [
          "member"
        ]
      },
      "M2MemberLeavesContent": {
        "type": "object",
        "properties": {
          "member": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          }
        },
        "required": [
          "member"
        ]
      },
      "M2MembershipContent": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/M2MembershipContent"
          },
          {
            "$ref": "#/components/schemas/M2MembershipCreatedContent"
          },
          {
            "$ref": "#/components/schemas/M2MembershipRequestedContent"
          },
          {
            "$ref": "#/components/schemas/M2MembershipTerminatedContent"
          },
          {
            "type": "object",
            "properties": {}
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "M2MembershipCreatedContent": {
        "type": "object",
        "properties": {
          "membership": {
            "$ref": "#/components/schemas/TD_Membership"
          }
        },
        "required": [
          "membership"
        ]
      },
      "M2MembershipRequestedContent": {
        "type": "object",
        "properties": {
          "membership": {
            "$ref": "#/components/schemas/TD_Membership"
          },
          "leave": {
            "type": "boolean"
          }
        },
        "required": [
          "membership",
          "leave"
        ]
      },
      "M2MembershipTerminatedContent": {
        "type": "object",
        "properties": {
          "membership": {
            "$ref": "#/components/schemas/TD_Membership"
          }
        },
        "required": [
          "membership"
        ]
      },
      "M2PackageContentDetails": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/M2PackageCreatedDetails"
          },
          {
            "$ref": "#/components/schemas/M2PackageDeletedDetails"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "M2PackageCreatedDetails": {
        "type": "object",
        "properties": {
          "pkg": {
            "$ref": "#/components/schemas/PackageVersionInfo"
          }
        },
        "required": [
          "pkg"
        ]
      },
      "M2PackageDeletedDetails": {
        "type": "object",
        "properties": {
          "pkg": {
            "$ref": "#/components/schemas/PackageVersionInfo"
          }
        },
        "required": [
          "pkg"
        ]
      },
      "M2PollContent": {
        "type": "object",
        "properties": {
          "poll": {
            "$ref": "#/components/schemas/PollRecord"
          }
        },
        "required": [
          "poll"
        ]
      },
      "M2PrivateConversationChannelContent": {
        "type": "object",
        "properties": {
          "channelId": {
            "type": "string"
          },
          "subject": {
            "nullable": true,
            "type": "string"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_MemberProfile"
            }
          },
          "notificationDefaults": {
            "nullable": true,
            "$ref": "#/components/schemas/ChannelSpecificDefaults"
          }
        },
        "required": [
          "channelId",
          "members"
        ]
      },
      "M2SharedChannelContent": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "access": {
            "$ref": "#/components/schemas/M2.Access"
          },
          "description": {
            "type": "string"
          },
          "iconId": {
            "nullable": true,
            "type": "string"
          },
          "notificationDefaults": {
            "$ref": "#/components/schemas/ChannelSpecificDefaults"
          },
          "teams": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_Team"
            }
          },
          "canEdit": {
            "nullable": true,
            "type": "boolean"
          },
          "project": {
            "nullable": true,
            "$ref": "#/components/schemas/PR_Project"
          }
        },
        "required": [
          "name",
          "group",
          "access",
          "description",
          "notificationDefaults"
        ]
      },
      "M2TaskExecutionFailureItemContent": {
        "type": "object",
        "properties": {
          "taskExecutionId": {
            "type": "string"
          },
          "taskExecutionName": {
            "type": "string"
          },
          "repoName": {
            "type": "string"
          },
          "branchName": {
            "type": "string"
          },
          "commit": {
            "type": "string"
          },
          "shortCommitMessage": {
            "type": "string"
          },
          "project": {
            "$ref": "#/components/schemas/ProjectKey"
          },
          "finishDateTime": {
            "type": "integer",
            "format": "int64"
          },
          "triggerInfo": {
            "type": "string"
          },
          "details": {
            "type": "string"
          }
        },
        "required": [
          "taskExecutionId",
          "taskExecutionName",
          "repoName",
          "branchName",
          "commit",
          "shortCommitMessage",
          "project",
          "finishDateTime",
          "triggerInfo",
          "details"
        ]
      },
      "M2TaskExecutionSucceedItemContent": {
        "type": "object",
        "properties": {
          "taskExecutionId": {
            "type": "string"
          },
          "taskExecutionName": {
            "type": "string"
          },
          "repoName": {
            "type": "string"
          },
          "branchName": {
            "type": "string"
          },
          "commit": {
            "type": "string"
          },
          "shortCommitMessage": {
            "type": "string"
          },
          "project": {
            "$ref": "#/components/schemas/ProjectKey"
          },
          "finishDateTime": {
            "type": "integer",
            "format": "int64"
          },
          "triggerInfo": {
            "type": "string"
          },
          "details": {
            "type": "string"
          }
        },
        "required": [
          "taskExecutionId",
          "taskExecutionName",
          "repoName",
          "branchName",
          "commit",
          "shortCommitMessage",
          "project",
          "finishDateTime",
          "triggerInfo",
          "details"
        ]
      },
      "M2TextItemContent": {
        "type": "object",
        "properties": {
          "markdown": {
            "nullable": true,
            "type": "boolean"
          },
          "mentions": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityMention"
            }
          }
        }
      },
      "M2UnreadStatus": {
        "type": "object",
        "properties": {
          "unread": {
            "type": "boolean"
          },
          "counter": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "unread",
          "counter",
          "id"
        ]
      },
      "M2UserLeftChannel": {
        "type": "object",
        "properties": {}
      },
      "MCAction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "clientSideAction": {
            "nullable": true,
            "$ref": "#/components/schemas/MCClientSideAction"
          }
        },
        "required": [
          "id",
          "value"
        ]
      },
      "MCButton": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "style": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageButtonStyle"
          },
          "action": {
            "$ref": "#/components/schemas/MCAction"
          },
          "disabled": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "text",
          "action"
        ]
      },
      "MCClientSideAction": {
        "type": "object",
        "properties": {
          "context": {
            "nullable": true,
            "$ref": "#/components/schemas/ClientSideActionContext"
          }
        }
      },
      "MCDivider": {
        "type": "object",
        "properties": {}
      },
      "MCElement": {
        "type": "object",
        "properties": {
          "defaultText": {
            "type": "string"
          },
          "details": {
            "nullable": true,
            "$ref": "#/components/schemas/MCElementDetails"
          }
        },
        "required": [
          "defaultText"
        ]
      },
      "MCElementDetails": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/MCText"
          },
          {
            "$ref": "#/components/schemas/MCGroup"
          },
          {
            "$ref": "#/components/schemas/MCIcon"
          },
          {
            "$ref": "#/components/schemas/MCParagraph"
          },
          {
            "$ref": "#/components/schemas/MCInlineGroup"
          },
          {
            "$ref": "#/components/schemas/MCDivider"
          },
          {
            "$ref": "#/components/schemas/MCButton"
          },
          {
            "$ref": "#/components/schemas/MCFields"
          },
          {
            "$ref": "#/components/schemas/MCSection"
          },
          {
            "$ref": "#/components/schemas/MCImage"
          },
          {
            "$ref": "#/components/schemas/MCTag"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "MCFields": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "first": {
                  "nullable": true,
                  "$ref": "#/components/schemas/MCElement"
                },
                "second": {
                  "nullable": true,
                  "$ref": "#/components/schemas/MCElement"
                }
              }
            }
          }
        },
        "required": [
          "fields"
        ]
      },
      "MCGroup": {
        "type": "object",
        "properties": {
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MCElement"
            }
          }
        },
        "required": [
          "elements"
        ]
      },
      "MCIcon": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "style": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageStyle"
          }
        },
        "required": [
          "name"
        ]
      },
      "MCImage": {
        "type": "object",
        "properties": {
          "src": {
            "type": "string"
          }
        },
        "required": [
          "src"
        ]
      },
      "MCInlineElement": {
        "type": "object",
        "properties": {
          "defaultText": {
            "type": "string"
          },
          "details": {
            "nullable": true,
            "$ref": "#/components/schemas/MCInlineElementDetails"
          }
        },
        "required": [
          "defaultText"
        ]
      },
      "MCInlineElementDetails": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/MCTimestamp"
          },
          {
            "$ref": "#/components/schemas/MCIcon"
          },
          {
            "$ref": "#/components/schemas/MCButton"
          },
          {
            "$ref": "#/components/schemas/MCInlineText"
          },
          {
            "$ref": "#/components/schemas/MCTag"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "MCInlineGroup": {
        "type": "object",
        "properties": {
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MCInlineElement"
            }
          },
          "accessory": {
            "nullable": true,
            "$ref": "#/components/schemas/MCElement"
          },
          "textSize": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageTextSize"
          }
        },
        "required": [
          "elements"
        ]
      },
      "MCInlineText": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "markdown": {
            "type": "boolean"
          },
          "style": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageStyle"
          }
        },
        "required": [
          "content",
          "markdown"
        ]
      },
      "MCMessage": {
        "type": "object",
        "properties": {
          "style": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageStyle"
          },
          "outline": {
            "nullable": true,
            "$ref": "#/components/schemas/MCOutline"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MCElement"
            }
          },
          "extension": {
            "nullable": true,
            "$ref": "#/components/schemas/M2ItemContentDetails"
          }
        },
        "required": [
          "content"
        ]
      },
      "MCMessageCommonDetails": {
        "type": "object",
        "properties": {}
      },
      "MCOutline": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/MCOutlineV2"
          },
          {
            "$ref": "#/components/schemas/MCOutlineLegacy"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "MCOutlineLegacy": {
        "type": "object",
        "properties": {
          "icon": {
            "nullable": true,
            "$ref": "#/components/schemas/MCElement"
          },
          "text": {
            "nullable": true,
            "$ref": "#/components/schemas/MCText"
          }
        }
      },
      "MCOutlineV2": {
        "type": "object",
        "properties": {
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MCInlineElement"
            }
          }
        },
        "required": [
          "elements"
        ]
      },
      "MCParagraph": {
        "type": "object",
        "properties": {
          "accessory": {
            "nullable": true,
            "$ref": "#/components/schemas/MCElement"
          },
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MCElement"
            }
          }
        },
        "required": [
          "elements"
        ]
      },
      "MCSection": {
        "type": "object",
        "properties": {
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MCElement"
            }
          },
          "style": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageStyle"
          },
          "header": {
            "nullable": true,
            "$ref": "#/components/schemas/MCText"
          },
          "footer": {
            "nullable": true,
            "$ref": "#/components/schemas/MCText"
          }
        },
        "required": [
          "elements"
        ]
      },
      "MCTag": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "style": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageStyle"
          }
        },
        "required": [
          "text"
        ]
      },
      "MCText": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "markdown": {
            "type": "boolean"
          },
          "accessory": {
            "nullable": true,
            "$ref": "#/components/schemas/MCElement"
          },
          "style": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageStyle"
          },
          "size": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageTextSize"
          }
        },
        "required": [
          "content",
          "markdown"
        ]
      },
      "MCTextOrInline": {
        "type": "object",
        "properties": {}
      },
      "MCTimestamp": {
        "type": "object",
        "properties": {
          "ts": {
            "type": "integer",
            "format": "int64"
          },
          "style": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageStyle"
          },
          "format": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageTimestampFormat"
          },
          "strikethrough": {
            "type": "boolean"
          }
        },
        "required": [
          "ts",
          "strikethrough"
        ]
      },
      "MarketplaceAppMetadata": {
        "type": "object",
        "properties": {
          "marketplaceAppId": {
            "type": "string"
          },
          "lastSentServerUrl": {
            "type": "string"
          },
          "connectionStatus": {
            "$ref": "#/components/schemas/AppConnectionStatus"
          }
        },
        "required": [
          "marketplaceAppId",
          "lastSentServerUrl",
          "connectionStatus"
        ]
      },
      "MavenChecksum": {
        "type": "object",
        "properties": {
          "algorithm": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "algorithm",
          "value"
        ]
      },
      "MavenCoordinates": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string"
          },
          "artifactId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "required": [
          "groupId",
          "artifactId",
          "version"
        ]
      },
      "MavenPackageDependency": {
        "type": "object",
        "properties": {
          "scope": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "artifact": {
            "type": "string"
          },
          "version": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "scope",
          "group",
          "artifact"
        ]
      },
      "MavenPackageFile": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "created": {
            "type": "integer",
            "format": "int64"
          },
          "length": {
            "type": "integer",
            "format": "int64"
          },
          "checksums": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MavenChecksum"
            }
          }
        },
        "required": [
          "name",
          "created",
          "length",
          "checksums"
        ]
      },
      "MavenPackageParent": {
        "type": "object",
        "properties": {
          "group": {
            "type": "string"
          },
          "artifact": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "required": [
          "group",
          "artifact",
          "version"
        ]
      },
      "MavenPackageType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "MavenPackageVersionDetails": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PackageType"
          },
          "repository": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "tags": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created": {
            "type": "integer",
            "format": "int64"
          },
          "accessed": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "downloads": {
            "type": "integer",
            "format": "int64"
          },
          "pinned": {
            "type": "boolean"
          },
          "comment": {
            "nullable": true,
            "type": "string"
          },
          "diskSize": {
            "type": "integer",
            "format": "int64"
          },
          "author": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipal"
          },
          "authors": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CPrincipal"
            }
          },
          "origin": {
            "nullable": true,
            "$ref": "#/components/schemas/PackageOrigin"
          },
          "metadata": {
            "nullable": true,
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "packaging": {
            "nullable": true,
            "type": "string"
          },
          "packageName": {
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "url": {
            "nullable": true,
            "type": "string"
          },
          "licenses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "scmUrl": {
            "nullable": true,
            "type": "string"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MavenPackageDependency"
            }
          },
          "kotlinPlatforms": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KotlinPlatform"
            }
          },
          "parent": {
            "nullable": true,
            "$ref": "#/components/schemas/MavenPackageParent"
          },
          "pathPrefix": {
            "nullable": true,
            "type": "string"
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MavenPackageFile"
            }
          }
        },
        "required": [
          "type",
          "repository",
          "name",
          "version",
          "created",
          "downloads",
          "pinned",
          "diskSize",
          "licenses",
          "dependencies",
          "files"
        ]
      },
      "MavenRepositoryConnectionSettings": {
        "type": "object",
        "properties": {
          "nexusStagingProfile": {
            "nullable": true,
            "$ref": "#/components/schemas/NexusStagingProfile"
          }
        }
      },
      "MdMarkup": {
        "type": "object",
        "properties": {
          "unfurl": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Unfurl"
            }
          }
        },
        "required": [
          "unfurl"
        ]
      },
      "MdTextDocumentContent": {
        "type": "object",
        "properties": {
          "markdown": {
            "type": "string"
          }
        },
        "required": [
          "markdown"
        ]
      },
      "MeCodeReviewParticipantRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "role": {
            "nullable": true,
            "$ref": "#/components/schemas/CodeReviewParticipantRole"
          },
          "theirTurn": {
            "nullable": true,
            "type": "boolean"
          },
          "reviewerState": {
            "nullable": true,
            "$ref": "#/components/schemas/ReviewerState"
          },
          "review": {
            "$ref": "#/components/schemas/CodeReviewRecord"
          },
          "participants": {
            "$ref": "#/components/schemas/CodeReviewParticipants"
          },
          "pendingCounter": {
            "$ref": "#/components/schemas/CodeReviewPendingMessageCounter"
          },
          "archived": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "review",
          "participants",
          "pendingCounter",
          "archived"
        ]
      },
      "MediaAttachment": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/VideoAttachment"
          },
          {
            "$ref": "#/components/schemas/ImageAttachment"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "MeetingAttachment": {
        "type": "object",
        "properties": {
          "fileUrl": {
            "nullable": true,
            "type": "string"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "mimeType": {
            "nullable": true,
            "type": "string"
          },
          "fileId": {
            "nullable": true,
            "type": "string"
          },
          "source": {
            "nullable": true,
            "type": "string"
          },
          "iconLink": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "MeetingMenuActionContext": {
        "type": "object",
        "properties": {
          "meetingId": {
            "type": "string"
          }
        },
        "required": [
          "meetingId"
        ]
      },
      "MeetingMenuItemUiExtensionApi": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "menuItemUniqueCode": {
            "type": "string"
          }
        },
        "required": [
          "displayName",
          "menuItemUniqueCode"
        ]
      },
      "MeetingMenuItemUiExtensionIn": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "menuItemUniqueCode": {
            "type": "string"
          }
        },
        "required": [
          "displayName",
          "menuItemUniqueCode"
        ]
      },
      "MeetingOccurrenceTime": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "start",
          "end"
        ]
      },
      "MeetingOrganizer": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/MeetingOrganizer.Application"
          },
          {
            "$ref": "#/components/schemas/MeetingOrganizer.ExternalUser"
          },
          {
            "$ref": "#/components/schemas/MeetingOrganizer.HiddenUser"
          },
          {
            "$ref": "#/components/schemas/MeetingOrganizer.User"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "MeetingOrganizer.Application": {
        "type": "object",
        "properties": {
          "applicationRef": {
            "nullable": true,
            "$ref": "#/components/schemas/ES_App"
          }
        }
      },
      "MeetingOrganizer.ExternalUser": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ]
      },
      "MeetingOrganizer.HiddenUser": {
        "type": "object",
        "properties": {}
      },
      "MeetingOrganizer.User": {
        "type": "object",
        "properties": {
          "profileRef": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          }
        },
        "required": [
          "profileRef"
        ]
      },
      "MeetingRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "starts": {
            "type": "string",
            "format": "date-time"
          },
          "finishes": {
            "type": "string",
            "format": "date-time"
          },
          "timezone": {
            "nullable": true,
            "$ref": "#/components/schemas/ATimeZone"
          },
          "allDay": {
            "type": "boolean"
          },
          "rooms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_Location"
            }
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Participant"
            }
          },
          "article": {
            "nullable": true,
            "$ref": "#/components/schemas/ArticleRecord"
          }
        },
        "required": [
          "id",
          "archived",
          "starts",
          "finishes",
          "allDay",
          "rooms",
          "participants"
        ]
      },
      "MeetingWebhookEvent": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/KMetaMod"
          },
          "meeting": {
            "$ref": "#/components/schemas/MeetingRecord"
          }
        },
        "required": [
          "meta",
          "meeting"
        ]
      },
      "MeetingWithOccurrenceTime": {
        "type": "object",
        "properties": {
          "meetingId": {
            "type": "string"
          },
          "occurrenceTime": {
            "$ref": "#/components/schemas/MeetingOccurrenceTime"
          }
        },
        "required": [
          "meetingId",
          "occurrenceTime"
        ]
      },
      "MemberCommonSubscriptionFilter": {
        "type": "object",
        "properties": {
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_Team"
            }
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_Location"
            }
          },
          "profiles": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_MemberProfile"
            }
          }
        },
        "required": [
          "teams",
          "locations"
        ]
      },
      "MemberCommonSubscriptionFilterIn": {
        "type": "object",
        "properties": {
          "teams": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "locations": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "profiles": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProfileIdentifier"
            }
          }
        },
        "required": [
          "teams",
          "locations"
        ]
      },
      "MembersAddedItemDetails": {
        "type": "object",
        "properties": {
          "principals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CPrincipal"
            }
          },
          "othersDisplayNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "principals",
          "othersDisplayNames"
        ]
      },
      "MembershipEvent": {
        "type": "object",
        "properties": {
          "profile": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "membership": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_Membership"
            }
          }
        },
        "required": [
          "profile",
          "membership"
        ]
      },
      "MembershipMCExtension": {
        "type": "object",
        "properties": {}
      },
      "MenuActionContext": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/MeetingMenuActionContext"
          },
          {
            "$ref": "#/components/schemas/ChannelMessageMenuActionContext"
          },
          {
            "$ref": "#/components/schemas/IssueMenuActionContext"
          },
          {
            "$ref": "#/components/schemas/DocumentMenuActionContext"
          },
          {
            "$ref": "#/components/schemas/BlogEventMenuActionContext"
          },
          {
            "$ref": "#/components/schemas/DocumentFolderMenuActionContext"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "MenuActionPayload": {
        "type": "object",
        "properties": {
          "menuItemUniqueCode": {
            "type": "string"
          },
          "context": {
            "nullable": true,
            "$ref": "#/components/schemas/MenuActionContext"
          },
          "clientId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "verificationToken": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "menuItemUniqueCode",
          "clientId",
          "userId"
        ]
      },
      "MenuItemUiExtensionApi": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ChatMessageMenuItemUiExtensionApi"
          },
          {
            "$ref": "#/components/schemas/IssueMenuItemUiExtensionApi"
          },
          {
            "$ref": "#/components/schemas/MeetingMenuItemUiExtensionApi"
          },
          {
            "$ref": "#/components/schemas/DocumentMenuItemUiExtensionApi"
          },
          {
            "$ref": "#/components/schemas/DocumentFolderMenuItemUiExtensionApi"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "MenuItemUiExtensionIn": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/DocumentMenuItemUiExtensionIn"
          },
          {
            "$ref": "#/components/schemas/ChatMessageMenuItemUiExtensionIn"
          },
          {
            "$ref": "#/components/schemas/DocumentFolderMenuItemUiExtensionIn"
          },
          {
            "$ref": "#/components/schemas/MeetingMenuItemUiExtensionIn"
          },
          {
            "$ref": "#/components/schemas/IssueMenuItemUiExtensionIn"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "MergeRequestBranch": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "ref": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean"
          },
          "head": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "displayName",
          "ref",
          "deleted"
        ]
      },
      "MergeRequestBranchDeletedEvent": {
        "type": "object",
        "properties": {
          "repository": {
            "type": "string"
          },
          "branch": {
            "type": "string"
          },
          "branchType": {
            "$ref": "#/components/schemas/MergeRequestBranchType"
          }
        },
        "required": [
          "repository",
          "branch",
          "branchType"
        ]
      },
      "MergeRequestBranchPair": {
        "type": "object",
        "properties": {
          "repository": {
            "type": "string"
          },
          "sourceBranch": {
            "type": "string"
          },
          "targetBranch": {
            "type": "string"
          },
          "sourceBranchRef": {
            "type": "string"
          },
          "sourceBranchInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/MergeRequestBranch"
          },
          "targetBranchInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/MergeRequestBranch"
          },
          "isMerged": {
            "nullable": true,
            "type": "boolean"
          },
          "isStale": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "repository",
          "sourceBranch",
          "targetBranch",
          "sourceBranchRef"
        ]
      },
      "MergeRequestBranchRestoredEvent": {
        "type": "object",
        "properties": {
          "repository": {
            "type": "string"
          },
          "branch": {
            "type": "string"
          },
          "branchType": {
            "$ref": "#/components/schemas/MergeRequestBranchType"
          }
        },
        "required": [
          "repository",
          "branch",
          "branchType"
        ]
      },
      "MergeRequestMergedEvent": {
        "type": "object",
        "properties": {
          "repository": {
            "type": "string"
          },
          "sourceBranch": {
            "type": "string"
          },
          "targetBranch": {
            "type": "string"
          }
        },
        "required": [
          "repository",
          "sourceBranch",
          "targetBranch"
        ]
      },
      "MergeRequestRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "project": {
            "$ref": "#/components/schemas/ProjectKey"
          },
          "projectId": {
            "type": "string"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/CodeReviewState"
          },
          "canBeReopened": {
            "nullable": true,
            "type": "boolean"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "createdBy": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "turnBased": {
            "nullable": true,
            "type": "boolean"
          },
          "feedChannel": {
            "nullable": true,
            "$ref": "#/components/schemas/M2ChannelRecord"
          },
          "branchPairs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MergeRequestBranchPair"
            }
          },
          "issueIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "commits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReviewCommit"
            }
          },
          "participants": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeReviewParticipant"
            }
          },
          "reviewers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeReviewParticipantRecord"
            }
          },
          "authors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeReviewParticipantRecord"
            }
          },
          "watchers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeReviewParticipantRecord"
            }
          },
          "discussionCounter": {
            "$ref": "#/components/schemas/DiscussionCounter"
          }
        },
        "required": [
          "id",
          "project",
          "projectId",
          "number",
          "title",
          "state",
          "createdAt",
          "branchPairs",
          "issueIds",
          "commits",
          "reviewers",
          "authors",
          "watchers",
          "discussionCounter"
        ]
      },
      "MessageAccessoryElement": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/MessageImage"
          },
          {
            "$ref": "#/components/schemas/MessageTag"
          },
          {
            "$ref": "#/components/schemas/MessageIcon"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "MessageAction": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/PostMessageAction"
          },
          {
            "$ref": "#/components/schemas/NavigateUrlAction"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "MessageActionPayload": {
        "type": "object",
        "properties": {
          "actionId": {
            "type": "string"
          },
          "actionValue": {
            "type": "string"
          },
          "message": {
            "$ref": "#/components/schemas/MessageContext"
          },
          "clientId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "verificationToken": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "actionId",
          "actionValue",
          "message",
          "clientId",
          "userId"
        ]
      },
      "MessageButton": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "style": {
            "$ref": "#/components/schemas/MessageButtonStyle"
          },
          "action": {
            "$ref": "#/components/schemas/MessageAction"
          },
          "disabled": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "text",
          "style",
          "action"
        ]
      },
      "MessageContext": {
        "type": "object",
        "properties": {
          "messageId": {
            "type": "string"
          },
          "channelId": {
            "type": "string"
          },
          "messageData": {
            "nullable": true,
            "type": "string"
          },
          "body": {
            "nullable": true,
            "$ref": "#/components/schemas/ChatMessage"
          },
          "attachments": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            }
          },
          "externalId": {
            "nullable": true,
            "type": "string"
          },
          "createdTime": {
            "type": "string"
          }
        },
        "required": [
          "messageId",
          "channelId",
          "createdTime"
        ]
      },
      "MessageControlElement": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/MessageButton"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "MessageControlGroup": {
        "type": "object",
        "properties": {
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageControlElement"
            }
          }
        },
        "required": [
          "elements"
        ]
      },
      "MessageDivider": {
        "type": "object",
        "properties": {}
      },
      "MessageElement": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/MessageText"
          },
          {
            "$ref": "#/components/schemas/MessageDivider"
          },
          {
            "$ref": "#/components/schemas/MessageFields"
          },
          {
            "$ref": "#/components/schemas/MessageInlineGroup"
          },
          {
            "$ref": "#/components/schemas/MessageControlGroup"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "MessageField": {
        "type": "object",
        "properties": {
          "first": {
            "type": "string"
          },
          "second": {
            "type": "string"
          }
        },
        "required": [
          "first",
          "second"
        ]
      },
      "MessageFieldElement": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/MessageField"
          },
          {
            "$ref": "#/components/schemas/MessageFieldV2"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "MessageFieldV2": {
        "type": "object",
        "properties": {
          "first": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageInlineElement"
            }
          },
          "second": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageInlineElement"
            }
          }
        },
        "required": [
          "first",
          "second"
        ]
      },
      "MessageFields": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageFieldElement"
            }
          },
          "nameTextSize": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageTextSize"
          },
          "valueTextSize": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageTextSize"
          }
        },
        "required": [
          "fields"
        ]
      },
      "MessageForImport": {
        "type": "object",
        "properties": {
          "authorPrincipalId": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "createdAtUtc": {
            "type": "integer",
            "format": "int64"
          },
          "attachments": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentIn"
            }
          }
        },
        "required": [
          "authorPrincipalId",
          "text",
          "createdAtUtc"
        ]
      },
      "MessageIcon": {
        "type": "object",
        "properties": {
          "icon": {
            "$ref": "#/components/schemas/ApiIcon"
          },
          "style": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageStyle"
          }
        },
        "required": [
          "icon"
        ]
      },
      "MessageImage": {
        "type": "object",
        "properties": {
          "src": {
            "type": "string"
          }
        },
        "required": [
          "src"
        ]
      },
      "MessageInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "time": {
            "type": "integer",
            "format": "int64"
          },
          "author": {
            "$ref": "#/components/schemas/CPrincipal"
          },
          "attachments": {
            "nullable": true,
            "type": "string"
          },
          "inThirdPerson": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "text",
          "time",
          "author"
        ]
      },
      "MessageInlineElement": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/MessageInlineText"
          },
          {
            "$ref": "#/components/schemas/MessageButton"
          },
          {
            "$ref": "#/components/schemas/MessageTag"
          },
          {
            "$ref": "#/components/schemas/MessageIcon"
          },
          {
            "$ref": "#/components/schemas/MessageTimestamp"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "MessageInlineGroup": {
        "type": "object",
        "properties": {
          "accessory": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageAccessoryElement"
          },
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageInlineElement"
            }
          },
          "textSize": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageTextSize"
          },
          "textStyle": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageStyle"
          },
          "elementsStyle": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageStyle"
          }
        },
        "required": [
          "elements"
        ]
      },
      "MessageInlineText": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "style": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageStyle"
          }
        },
        "required": [
          "text"
        ]
      },
      "MessageLink": {
        "type": "object",
        "properties": {
          "channelKey": {
            "type": "string"
          },
          "channelId": {
            "type": "string"
          },
          "messageId": {
            "type": "string"
          }
        },
        "required": [
          "channelKey",
          "channelId",
          "messageId"
        ]
      },
      "MessageOutline": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/MessageOutlineLegacy"
          },
          {
            "$ref": "#/components/schemas/MessageOutlineV2"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "MessageOutlineLegacy": {
        "type": "object",
        "properties": {
          "icon": {
            "nullable": true,
            "$ref": "#/components/schemas/ApiIcon"
          },
          "text": {
            "type": "string"
          }
        },
        "required": [
          "text"
        ]
      },
      "MessageOutlineV2": {
        "type": "object",
        "properties": {
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageInlineElement"
            }
          }
        },
        "required": [
          "elements"
        ]
      },
      "MessagePayload": {
        "type": "object",
        "properties": {
          "message": {
            "$ref": "#/components/schemas/MessageContext"
          },
          "clientId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "verificationToken": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "message",
          "clientId",
          "userId"
        ]
      },
      "MessageSection": {
        "type": "object",
        "properties": {
          "header": {
            "nullable": true,
            "type": "string"
          },
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageElement"
            }
          },
          "footer": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "elements"
        ]
      },
      "MessageSectionElement": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/MessageSection"
          },
          {
            "$ref": "#/components/schemas/MessageDivider"
          },
          {
            "$ref": "#/components/schemas/MessageSectionV2"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "MessageSectionV2": {
        "type": "object",
        "properties": {
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageElement"
            }
          },
          "style": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageStyle"
          },
          "textSize": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageTextSize"
          }
        },
        "required": [
          "elements"
        ]
      },
      "MessageTag": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "style": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageStyle"
          }
        },
        "required": [
          "text"
        ]
      },
      "MessageText": {
        "type": "object",
        "properties": {
          "accessory": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageAccessoryElement"
          },
          "style": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageStyle"
          },
          "size": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageTextSize"
          },
          "content": {
            "type": "string"
          }
        },
        "required": [
          "content"
        ]
      },
      "MessageTimestamp": {
        "type": "object",
        "properties": {
          "ts": {
            "type": "integer",
            "format": "int64"
          },
          "style": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageStyle"
          },
          "format": {
            "nullable": true,
            "$ref": "#/components/schemas/MessageTimestampFormat"
          },
          "strikethrough": {
            "type": "boolean"
          }
        },
        "required": [
          "ts",
          "strikethrough"
        ]
      },
      "MessagesRangePosition": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/MessagesRangePosition.FirstOnDate"
          },
          {
            "$ref": "#/components/schemas/MessagesRangePosition.FirstUnread"
          },
          {
            "$ref": "#/components/schemas/MessagesRangePosition.MessageLink"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "MessagesRangePosition.FirstOnDate": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "full-date"
          }
        },
        "required": [
          "date"
        ]
      },
      "MessagesRangePosition.FirstUnread": {
        "type": "object",
        "properties": {
          "readTime": {
            "type": "integer",
            "format": "int64"
          },
          "subscribed": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "readTime"
        ]
      },
      "MessagesRangePosition.MessageLink": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "MetricsEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "time": {
            "type": "integer",
            "format": "int64"
          },
          "props": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricsProp"
            }
          },
          "points": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricsPoint"
            }
          }
        },
        "required": [
          "id",
          "time"
        ]
      },
      "MetricsPoint": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "key",
          "value"
        ]
      },
      "MetricsProp": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ]
      },
      "MetricsRequest": {
        "type": "object",
        "properties": {
          "client": {
            "$ref": "#/components/schemas/ClientInfo"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricsEvent"
            }
          }
        },
        "required": [
          "client",
          "events"
        ]
      },
      "NavBarMenuItem": {
        "type": "object",
        "properties": {
          "item": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "required": [
          "item",
          "enabled"
        ]
      },
      "NavigateUrlAction": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "withBackUrl": {
            "type": "boolean"
          },
          "openInNewTab": {
            "type": "boolean"
          }
        },
        "required": [
          "url",
          "withBackUrl",
          "openInNewTab"
        ]
      },
      "NavigateUrlActionContext": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "withBackUrl": {
            "type": "boolean"
          },
          "openInNewTab": {
            "type": "boolean"
          }
        },
        "required": [
          "url",
          "withBackUrl",
          "openInNewTab"
        ]
      },
      "NewMergeRequestFromIssueActionContext": {
        "type": "object",
        "properties": {
          "projectKey": {
            "$ref": "#/components/schemas/ProjectKey"
          },
          "repository": {
            "type": "string"
          },
          "commitId": {
            "type": "string"
          },
          "issueNumber": {
            "type": "integer",
            "format": "int32"
          },
          "projectRepos": {
            "$ref": "#/components/schemas/ProjectReposRecord"
          },
          "issueCommitsRef": {
            "$ref": "#/components/schemas/CommitLinksContainer"
          }
        },
        "required": [
          "projectKey",
          "repository",
          "commitId",
          "issueNumber",
          "projectRepos",
          "issueCommitsRef"
        ]
      },
      "NewMessage": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "temporaryId": {
            "type": "string"
          },
          "attachments": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            }
          },
          "pending": {
            "type": "boolean"
          },
          "draftTag": {
            "nullable": true,
            "type": "string"
          },
          "postponeId": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "text",
          "temporaryId",
          "pending"
        ]
      },
      "NewUnfurlQueueItemsPayload": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "verificationToken": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "clientId"
        ]
      },
      "NexusStagingProfile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "NonWorkingDays": {
        "type": "object",
        "properties": {
          "since": {
            "type": "string",
            "format": "full-date"
          },
          "till": {
            "type": "string",
            "format": "full-date"
          },
          "startsEarlier": {
            "type": "boolean"
          },
          "endsLater": {
            "type": "boolean"
          }
        },
        "required": [
          "since",
          "till",
          "startsEarlier",
          "endsLater"
        ]
      },
      "NonWorkingDaysEvent": {
        "type": "object",
        "properties": {
          "profile": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "days": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NonWorkingDays"
            }
          }
        },
        "required": [
          "profile",
          "days"
        ]
      },
      "NonZeroExitCodeDTO": {
        "type": "object",
        "properties": {}
      },
      "NpmPackageDependency": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "type": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "name",
          "version"
        ]
      },
      "NpmPackageType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "NpmPackageVersionDetails": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PackageType"
          },
          "repository": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "tags": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created": {
            "type": "integer",
            "format": "int64"
          },
          "accessed": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "downloads": {
            "type": "integer",
            "format": "int64"
          },
          "pinned": {
            "type": "boolean"
          },
          "comment": {
            "nullable": true,
            "type": "string"
          },
          "diskSize": {
            "type": "integer",
            "format": "int64"
          },
          "author": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipal"
          },
          "authors": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CPrincipal"
            }
          },
          "origin": {
            "nullable": true,
            "$ref": "#/components/schemas/PackageOrigin"
          },
          "metadata": {
            "nullable": true,
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NpmPackageDependency"
            }
          },
          "keywords": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "license": {
            "nullable": true,
            "type": "string"
          },
          "projectUrl": {
            "nullable": true,
            "type": "string"
          },
          "repositoryUrl": {
            "nullable": true,
            "type": "string"
          },
          "repositoryRevision": {
            "nullable": true,
            "type": "string"
          },
          "readme": {
            "nullable": true,
            "type": "string"
          },
          "unityVersion": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "type",
          "repository",
          "name",
          "version",
          "created",
          "downloads",
          "pinned",
          "diskSize",
          "dependencies",
          "keywords"
        ]
      },
      "NuGetDependency": {
        "type": "object",
        "properties": {
          "targetFramework": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "range": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "range"
        ]
      },
      "NuGetPackageType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "NuGetPackageVersionDetails": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PackageType"
          },
          "repository": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "tags": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created": {
            "type": "integer",
            "format": "int64"
          },
          "accessed": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "downloads": {
            "type": "integer",
            "format": "int64"
          },
          "pinned": {
            "type": "boolean"
          },
          "comment": {
            "nullable": true,
            "type": "string"
          },
          "diskSize": {
            "type": "integer",
            "format": "int64"
          },
          "author": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipal"
          },
          "authors": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CPrincipal"
            }
          },
          "origin": {
            "nullable": true,
            "$ref": "#/components/schemas/PackageOrigin"
          },
          "metadata": {
            "nullable": true,
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "verbatimVersion": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "projectUrl": {
            "nullable": true,
            "type": "string"
          },
          "license": {
            "nullable": true,
            "type": "string"
          },
          "licenseUrl": {
            "nullable": true,
            "type": "string"
          },
          "icon": {
            "nullable": true,
            "type": "string"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NuGetDependency"
            }
          }
        },
        "required": [
          "type",
          "repository",
          "name",
          "version",
          "created",
          "downloads",
          "pinned",
          "diskSize",
          "verbatimVersion",
          "dependencies"
        ]
      },
      "OIDCDiscovery": {
        "type": "object",
        "properties": {
          "issuer": {
            "type": "string"
          },
          "authorizationEndpoint": {
            "type": "string"
          },
          "tokenEndpoint": {
            "nullable": true,
            "type": "string"
          },
          "userinfoEndpoint": {
            "nullable": true,
            "type": "string"
          },
          "jwksUri": {
            "type": "string"
          }
        },
        "required": [
          "issuer",
          "authorizationEndpoint",
          "jwksUri"
        ]
      },
      "OpenEnumCFCreateParameters": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "values"
        ]
      },
      "OpenEnumCFInputValue": {
        "type": "object",
        "properties": {
          "enumValueIdentifier": {
            "nullable": true,
            "$ref": "#/components/schemas/CFEnumValueIdentifier"
          }
        }
      },
      "OpenEnumCFType": {
        "type": "object",
        "properties": {}
      },
      "OpenEnumCFUpdateParameters": {
        "type": "object",
        "properties": {
          "modifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CFEnumValueModification"
            }
          }
        },
        "required": [
          "modifications"
        ]
      },
      "OpenEnumCFValue": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true,
            "$ref": "#/components/schemas/EnumValueData"
          }
        }
      },
      "OpenEnumListCFInputValue": {
        "type": "object",
        "properties": {
          "enumValueIdentifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CFEnumValueIdentifier"
            }
          }
        },
        "required": [
          "enumValueIdentifiers"
        ]
      },
      "OpenEnumListCFType": {
        "type": "object",
        "properties": {}
      },
      "OpenEnumListCFValue": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnumValueData"
            }
          }
        },
        "required": [
          "values"
        ]
      },
      "OpenPersonalFeedSettingsAction": {
        "type": "object",
        "properties": {
          "tab": {
            "type": "string"
          },
          "feed": {
            "type": "string"
          },
          "feedId": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "tab",
          "feed"
        ]
      },
      "OrgDomainDTO": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string"
          },
          "expireAt": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "orgUrl": {
            "type": "string"
          }
        },
        "required": [
          "domain",
          "orgUrl"
        ]
      },
      "OrgThrottlingStatus": {
        "type": "object",
        "properties": {
          "throttledUntil": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "OrganizationForUpdateDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "slogan": {
            "nullable": true,
            "type": "string"
          },
          "logoSmall": {
            "nullable": true,
            "type": "string"
          },
          "logo": {
            "nullable": true,
            "type": "string"
          },
          "logoId": {
            "nullable": true,
            "type": "string"
          },
          "slackWorkspace": {
            "nullable": true,
            "type": "string"
          },
          "onboardingRequired": {
            "nullable": true,
            "type": "boolean"
          },
          "userAgreementAccepted": {
            "nullable": true,
            "type": "boolean"
          },
          "timezone": {
            "nullable": true,
            "$ref": "#/components/schemas/ATimeZone"
          },
          "license": {
            "nullable": true,
            "type": "string"
          },
          "orgSize": {
            "nullable": true,
            "$ref": "#/components/schemas/OrgSizeDTO"
          },
          "orgIndustry": {
            "nullable": true,
            "$ref": "#/components/schemas/OrgIndustryDTO"
          }
        },
        "required": [
          "name"
        ]
      },
      "OrganizationRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "orgId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "slogan": {
            "nullable": true,
            "type": "string"
          },
          "logoId": {
            "nullable": true,
            "type": "string"
          },
          "onboardingRequired": {
            "nullable": true,
            "type": "boolean"
          },
          "allowDomainsEdit": {
            "nullable": true,
            "type": "boolean"
          },
          "createdAt": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "timezone": {
            "nullable": true,
            "$ref": "#/components/schemas/ATimeZone"
          },
          "orgSize": {
            "nullable": true,
            "$ref": "#/components/schemas/OrgSizeDTO"
          },
          "orgIndustry": {
            "nullable": true,
            "$ref": "#/components/schemas/OrgIndustryDTO"
          },
          "slackWorkspace": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "id",
          "orgId",
          "name"
        ]
      },
      "OutOfMemoryDTO": {
        "type": "object",
        "properties": {}
      },
      "Overdrafts": {
        "type": "object",
        "properties": {
          "storage": {
            "type": "integer",
            "format": "int32"
          },
          "bandwidth": {
            "type": "integer",
            "format": "int32"
          },
          "ciCredits": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "storage",
          "bandwidth",
          "ciCredits"
        ]
      },
      "PR_PrivateProject": {
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/components/schemas/ProjectKey"
          },
          "name": {
            "type": "string"
          },
          "accessAllowed": {
            "type": "boolean"
          },
          "admins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_MemberProfile"
            }
          }
        },
        "required": [
          "key",
          "name",
          "accessAllowed",
          "admins"
        ]
      },
      "PR_Project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "key": {
            "$ref": "#/components/schemas/ProjectKey"
          },
          "name": {
            "type": "string"
          },
          "private": {
            "type": "boolean"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "icon": {
            "nullable": true,
            "type": "string"
          },
          "latestRepositoryActivity": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "archived": {
            "type": "boolean"
          },
          "enable": {
            "type": "boolean"
          },
          "hoursInDay": {
            "type": "integer",
            "format": "int32"
          },
          "daysInWeek": {
            "type": "integer",
            "format": "int32"
          },
          "format": {
            "$ref": "#/components/schemas/DurationTextFormat"
          },
          "memberProfiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_MemberProfile"
            }
          },
          "memberTeams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_Team"
            }
          },
          "adminProfiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_MemberProfile"
            }
          },
          "adminTeams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_Team"
            }
          },
          "repos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PR_RepositoryInfo"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "boards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BoardRecord"
            }
          },
          "packages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectPackageRepository"
            }
          },
          "trackers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectIssueTrackerItem"
            }
          },
          "type": {
            "$ref": "#/components/schemas/ProjectTeamType"
          },
          "teams": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_Team"
            }
          },
          "members": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectTeamMemberRecord"
            }
          },
          "team": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_Team"
          },
          "externalUserProfiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_MemberProfile"
            }
          },
          "collaboratorsProfiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_MemberProfile"
            }
          },
          "collaboratorsTeams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_Team"
            }
          },
          "projectId": {
            "type": "string"
          },
          "features": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectFeatureState"
            }
          }
        },
        "required": [
          "id",
          "key",
          "name",
          "private",
          "archived",
          "enable",
          "hoursInDay",
          "daysInWeek",
          "format",
          "memberProfiles",
          "memberTeams",
          "adminProfiles",
          "adminTeams",
          "repos",
          "tags",
          "boards",
          "packages",
          "trackers",
          "type",
          "externalUserProfiles",
          "collaboratorsProfiles",
          "collaboratorsTeams",
          "projectId"
        ]
      },
      "PR_RepositoryInfo": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "latestActivity": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "proxyPushNotification": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "proxyPushNotificationBody": {
            "nullable": true,
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/RepositoryState"
          },
          "initProgress": {
            "nullable": true,
            "type": "string"
          },
          "readmeName": {
            "nullable": true,
            "type": "string"
          },
          "monthlyActivity": {
            "nullable": true,
            "$ref": "#/components/schemas/RepositoryActivity"
          }
        },
        "required": [
          "name",
          "description",
          "state"
        ]
      },
      "PR_Tag": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "projectCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "name",
          "projectCount"
        ]
      },
      "PackageData": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PackageType"
          },
          "repository": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "versions": {
            "type": "integer",
            "format": "int64"
          },
          "updated": {
            "type": "integer",
            "format": "int64"
          },
          "lastVersion": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "repository",
          "name",
          "versions",
          "updated",
          "lastVersion"
        ]
      },
      "PackageMetadata": {
        "type": "object",
        "properties": {
          "connectionId": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "PackageOrigin": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/PackageOrigin.Build"
          },
          {
            "$ref": "#/components/schemas/PackageOrigin.Url"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "PackageOrigin.Build": {
        "type": "object",
        "properties": {
          "name": {
            "nullable": true,
            "type": "string"
          },
          "url": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "PackageOrigin.Url": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          }
        },
        "required": [
          "url"
        ]
      },
      "PackageRepository": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/PackageType"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "cleanupEnabled": {
            "type": "boolean"
          },
          "settings": {
            "nullable": true,
            "$ref": "#/components/schemas/ES_PackageRepositorySettings"
          },
          "mode": {
            "$ref": "#/components/schemas/PackageRepositoryMode"
          },
          "archived": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "type",
          "public",
          "cleanupEnabled",
          "mode",
          "archived"
        ]
      },
      "PackageRepositoryConnection": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/PackageRepositoryConnection.Remote"
          },
          {
            "$ref": "#/components/schemas/PackageRepositoryConnection.Space"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "PackageRepositoryConnection.Remote": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "rememberDownloaded": {
            "type": "boolean"
          },
          "packageNameFilters": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "url": {
            "type": "string"
          },
          "credentials": {
            "$ref": "#/components/schemas/PackageRepositoryCredentials"
          },
          "secretId": {
            "nullable": true,
            "type": "string"
          },
          "secretValue": {
            "nullable": true,
            "type": "string"
          },
          "settings": {
            "nullable": true,
            "$ref": "#/components/schemas/PackageRepositoryConnectionSettings"
          }
        },
        "required": [
          "id",
          "enabled",
          "rememberDownloaded",
          "url",
          "credentials"
        ]
      },
      "PackageRepositoryConnection.Space": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "rememberDownloaded": {
            "type": "boolean"
          },
          "packageNameFilters": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "repository": {
            "$ref": "#/components/schemas/ProjectPackageRepository"
          }
        },
        "required": [
          "id",
          "enabled",
          "rememberDownloaded",
          "repository"
        ]
      },
      "PackageRepositoryConnectionSettings": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/MavenRepositoryConnectionSettings"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "PackageType": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/PythonPackageType"
          },
          {
            "$ref": "#/components/schemas/ComposerPackageType"
          },
          {
            "$ref": "#/components/schemas/FileType"
          },
          {
            "$ref": "#/components/schemas/NuGetPackageType"
          },
          {
            "$ref": "#/components/schemas/MavenPackageType"
          },
          {
            "$ref": "#/components/schemas/NpmPackageType"
          },
          {
            "$ref": "#/components/schemas/ContainerPackageType"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "PackageVersionData": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PackageType"
          },
          "repository": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "tags": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "lastAccessed": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "downloads": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "pinned": {
            "type": "boolean"
          },
          "comment": {
            "nullable": true,
            "type": "string"
          },
          "diskSize": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "path": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "type",
          "repository",
          "name",
          "version",
          "pinned"
        ]
      },
      "PackageVersionDetails": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/NpmPackageVersionDetails"
          },
          {
            "$ref": "#/components/schemas/ComposerPackageVersionDetails"
          },
          {
            "$ref": "#/components/schemas/ContainerPackageVersionDetails"
          },
          {
            "$ref": "#/components/schemas/PythonPackageVersionDetails"
          },
          {
            "$ref": "#/components/schemas/MavenPackageVersionDetails"
          },
          {
            "$ref": "#/components/schemas/NuGetPackageVersionDetails"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "PackageVersionInfo": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PackageType"
          },
          "repository": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "tags": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "type",
          "repository",
          "name",
          "version"
        ]
      },
      "PackageVersionRef": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "version"
        ]
      },
      "PackagesExecutionResult": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/PackagesExecutionResult.Failure"
          },
          {
            "$ref": "#/components/schemas/PackagesExecutionResult.Success"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "PackagesExecutionResult.Failure": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          }
        },
        "required": [
          "error"
        ]
      },
      "PackagesExecutionResult.Success": {
        "type": "object",
        "properties": {}
      },
      "PackagesPublishing": {
        "type": "object",
        "properties": {
          "publishingId": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/PublishingSource"
          },
          "created": {
            "type": "integer",
            "format": "int64"
          },
          "started": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "completed": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "successful": {
            "type": "boolean"
          },
          "error": {
            "nullable": true,
            "type": "string"
          },
          "principal": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipal"
          }
        },
        "required": [
          "publishingId",
          "source",
          "created",
          "successful"
        ]
      },
      "PackagesSubscriptionFilter": {
        "type": "object",
        "properties": {
          "project": {
            "nullable": true,
            "$ref": "#/components/schemas/PR_Project"
          },
          "repository": {
            "nullable": true,
            "$ref": "#/components/schemas/ProjectPackageRepository"
          },
          "namePattern": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "versionPattern": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "namePattern"
        ]
      },
      "PackagesSubscriptionFilterIn": {
        "type": "object",
        "properties": {
          "project": {
            "nullable": true,
            "type": "string"
          },
          "repository": {
            "nullable": true,
            "type": "string"
          },
          "namePattern": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "versionPattern": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "namePattern"
        ]
      },
      "PageUiExtensionApi": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ApplicationHomepageUiExtensionApi"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "PageUiExtensionIn": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ApplicationHomepageUiExtensionIn"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ParameterLastUsageDTO": {
        "type": "object",
        "properties": {
          "jobExecutionId": {
            "type": "string"
          },
          "stepExecutionId": {
            "nullable": true,
            "type": "string"
          },
          "jobName": {
            "type": "string"
          },
          "usedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "jobExecutionId",
          "jobName",
          "usedAt"
        ]
      },
      "Participant": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "status": {
            "$ref": "#/components/schemas/EventParticipationStatus"
          }
        },
        "required": [
          "user",
          "status"
        ]
      },
      "PercentageCFConstraint": {
        "type": "object",
        "properties": {}
      },
      "PercentageCFType": {
        "type": "object",
        "properties": {}
      },
      "PercentageCFValue": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PermissionContextApi": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/GlobalPermissionContext"
          },
          {
            "$ref": "#/components/schemas/PrivateChannelPermissionContext"
          },
          {
            "$ref": "#/components/schemas/DocumentFolderPermissionContext"
          },
          {
            "$ref": "#/components/schemas/DocumentPermissionContext"
          },
          {
            "$ref": "#/components/schemas/PrivateProjectPermissionContext"
          },
          {
            "$ref": "#/components/schemas/ChannelPermissionContext"
          },
          {
            "$ref": "#/components/schemas/ProjectPermissionContext"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "PermissionTarget": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ProfilePermissionTarget"
          },
          {
            "$ref": "#/components/schemas/ProjectPermissionTarget"
          },
          {
            "$ref": "#/components/schemas/GlobalPermissionTarget"
          },
          {
            "$ref": "#/components/schemas/TeamPermissionTarget"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "PersonalDocumentContainerInfo": {
        "type": "object",
        "properties": {
          "owner": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          }
        },
        "required": [
          "owner"
        ]
      },
      "PersonalSubscriptionEvent": {
        "type": "object",
        "properties": {
          "eventCode": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "featureFlag": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "eventCode",
          "name"
        ]
      },
      "PersonalSubscriptionSettings": {
        "type": "object",
        "properties": {
          "feed": {
            "$ref": "#/components/schemas/PrivateFeed"
          },
          "subjectSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonalSubscriptionSubjectSettings"
            }
          },
          "enabledCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "feed",
          "subjectSettings",
          "enabledCodes"
        ]
      },
      "PersonalSubscriptionSubjectSettings": {
        "type": "object",
        "properties": {
          "subjectCode": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "required": [
          "subjectCode",
          "enabled"
        ]
      },
      "PersonalSubscriptionTarget": {
        "type": "object",
        "properties": {
          "subjectCode": {
            "type": "string"
          },
          "targetCode": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonalSubscriptionEvent"
            }
          },
          "featureFlag": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "subjectCode",
          "targetCode",
          "description",
          "events"
        ]
      },
      "PingWebhookEvent": {
        "type": "object",
        "properties": {
          "webhookName": {
            "type": "string"
          }
        },
        "required": [
          "webhookName"
        ]
      },
      "PlainParameterRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "bundleId": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "createdAt": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipal"
          },
          "updatedAt": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipal"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "archived",
          "bundleId",
          "key",
          "value"
        ]
      },
      "PlanItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "checklistId": {
            "type": "string"
          },
          "tag": {
            "nullable": true,
            "$ref": "#/components/schemas/PlanningTag"
          },
          "simpleText": {
            "nullable": true,
            "type": "string"
          },
          "simpleDone": {
            "nullable": true,
            "type": "boolean"
          },
          "issue": {
            "nullable": true,
            "$ref": "#/components/schemas/Issue"
          },
          "issueProblem": {
            "nullable": true,
            "type": "string"
          },
          "canEditIssue": {
            "nullable": true,
            "type": "boolean"
          },
          "hasChildren": {
            "type": "boolean"
          },
          "archived": {
            "type": "boolean"
          },
          "topics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Topic"
            }
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlanItem"
            }
          }
        },
        "required": [
          "id",
          "checklistId",
          "hasChildren",
          "archived",
          "topics",
          "children"
        ]
      },
      "PlanItemChildren": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlanItem"
            }
          },
          "archived": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "children",
          "archived"
        ]
      },
      "PlanningTag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "projectId": {
            "type": "string"
          },
          "parent": {
            "nullable": true,
            "$ref": "#/components/schemas/PlanningTag"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "archived",
          "projectId",
          "name"
        ]
      },
      "PollRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "question": {
            "type": "string"
          },
          "meVote": {
            "type": "boolean"
          },
          "countPeople": {
            "type": "integer",
            "format": "int32"
          },
          "anonymous": {
            "type": "boolean"
          },
          "closed": {
            "type": "boolean"
          },
          "extendable": {
            "type": "boolean"
          },
          "multiChoice": {
            "type": "boolean"
          },
          "ended": {
            "type": "boolean"
          },
          "expirationTime": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "votes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoteGroup"
            }
          }
        },
        "required": [
          "id",
          "owner",
          "question",
          "meVote",
          "countPeople",
          "anonymous",
          "closed",
          "extendable",
          "multiChoice",
          "ended",
          "votes"
        ]
      },
      "PostMessageAction": {
        "type": "object",
        "properties": {
          "actionId": {
            "type": "string"
          },
          "payload": {
            "type": "string"
          }
        },
        "required": [
          "actionId",
          "payload"
        ]
      },
      "PostUnfurlContentResult": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/PostUnfurlContentResult.EntityNotFound"
          },
          {
            "$ref": "#/components/schemas/PostUnfurlContentResult.NotApproved"
          },
          {
            "$ref": "#/components/schemas/PostUnfurlContentResult.QueueItemNotFound"
          },
          {
            "$ref": "#/components/schemas/PostUnfurlContentResult.Success"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "PostUnfurlContentResult.EntityNotFound": {
        "type": "object",
        "properties": {
          "queueItemId": {
            "type": "string"
          }
        },
        "required": [
          "queueItemId"
        ]
      },
      "PostUnfurlContentResult.NotApproved": {
        "type": "object",
        "properties": {
          "queueItemId": {
            "type": "string"
          }
        },
        "required": [
          "queueItemId"
        ]
      },
      "PostUnfurlContentResult.QueueItemNotFound": {
        "type": "object",
        "properties": {
          "queueItemId": {
            "type": "string"
          }
        },
        "required": [
          "queueItemId"
        ]
      },
      "PostUnfurlContentResult.Success": {
        "type": "object",
        "properties": {
          "queueItemId": {
            "type": "string"
          }
        },
        "required": [
          "queueItemId"
        ]
      },
      "PostponedChannelItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "channelId": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentInfo"
            }
          },
          "etag": {
            "type": "integer",
            "format": "int64"
          },
          "time": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "contactKey": {
            "nullable": true,
            "type": "string"
          },
          "postpone": {
            "type": "string",
            "format": "date-time"
          },
          "archived": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "channelId",
          "message",
          "attachments",
          "etag",
          "postpone",
          "archived"
        ]
      },
      "PrivateChannelPermissionContext": {
        "type": "object",
        "properties": {
          "channelId": {
            "type": "string"
          }
        },
        "required": [
          "channelId"
        ]
      },
      "PrivateFeed": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "color": {
            "$ref": "#/components/schemas/PrivateFeedColor"
          }
        },
        "required": [
          "id",
          "name",
          "icon",
          "color"
        ]
      },
      "PrivateProjectPermissionContext": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string"
          }
        },
        "required": [
          "projectId"
        ]
      },
      "ProducerOptions": {
        "type": "object",
        "properties": {
          "sfuOptions": {
            "$ref": "#/components/schemas/SFUProducerOptions"
          },
          "userConnectionId": {
            "type": "integer",
            "format": "int64"
          },
          "routerId": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/MediaSource"
          }
        },
        "required": [
          "sfuOptions",
          "userConnectionId",
          "routerId",
          "source"
        ]
      },
      "ProfileCFInputValue": {
        "type": "object",
        "properties": {
          "profile": {
            "nullable": true,
            "$ref": "#/components/schemas/ProfileIdentifier"
          }
        }
      },
      "ProfileCFType": {
        "type": "object",
        "properties": {}
      },
      "ProfileCFValue": {
        "type": "object",
        "properties": {
          "profile": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_MemberProfile"
          }
        }
      },
      "ProfileLinkPreview": {
        "type": "object",
        "properties": {
          "profile": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          }
        },
        "required": [
          "profile"
        ]
      },
      "ProfileListCFInputValue": {
        "type": "object",
        "properties": {
          "profiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProfileIdentifier"
            }
          }
        },
        "required": [
          "profiles"
        ]
      },
      "ProfileListCFType": {
        "type": "object",
        "properties": {}
      },
      "ProfileListCFValue": {
        "type": "object",
        "properties": {
          "profiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_MemberProfile"
            }
          }
        },
        "required": [
          "profiles"
        ]
      },
      "ProfileMembershipRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "memberships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_Membership"
            }
          },
          "unapprovedMemberships": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_Membership"
            }
          }
        },
        "required": [
          "id",
          "memberships"
        ]
      },
      "ProfileOrganizationEvent": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/KMetaMod"
          },
          "member": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "joinedOrganization": {
            "type": "boolean"
          },
          "leftOrganization": {
            "type": "boolean"
          }
        },
        "required": [
          "meta",
          "member",
          "joinedOrganization",
          "leftOrganization"
        ]
      },
      "ProfilePermissionTarget": {
        "type": "object",
        "properties": {
          "profile": {
            "$ref": "#/components/schemas/ProfileIdentifier"
          }
        },
        "required": [
          "profile"
        ]
      },
      "ProjectCFInputValue": {
        "type": "object",
        "properties": {
          "project": {
            "nullable": true,
            "$ref": "#/components/schemas/ProjectIdentifier"
          }
        }
      },
      "ProjectCFType": {
        "type": "object",
        "properties": {}
      },
      "ProjectCFValue": {
        "type": "object",
        "properties": {
          "project": {
            "nullable": true,
            "$ref": "#/components/schemas/PR_Project"
          }
        }
      },
      "ProjectCommonSubscriptionFilter": {
        "type": "object",
        "properties": {
          "project": {
            "nullable": true,
            "$ref": "#/components/schemas/PR_Project"
          }
        }
      },
      "ProjectCommonSubscriptionFilterIn": {
        "type": "object",
        "properties": {
          "project": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "ProjectEvent": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/KMetaMod"
          },
          "project": {
            "$ref": "#/components/schemas/PR_Project"
          }
        },
        "required": [
          "meta",
          "project"
        ]
      },
      "ProjectFeatureState": {
        "type": "object",
        "properties": {
          "feature": {
            "$ref": "#/components/schemas/ProjectFeature"
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "required": [
          "feature",
          "enabled"
        ]
      },
      "ProjectIssueTrackerItem": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "tracker": {
            "$ref": "#/components/schemas/IssueTracker"
          }
        },
        "required": [
          "key",
          "tracker"
        ]
      },
      "ProjectKey": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          }
        },
        "required": [
          "key"
        ]
      },
      "ProjectPackageRepository": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "project": {
            "$ref": "#/components/schemas/PR_Project"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "repository": {
            "$ref": "#/components/schemas/PackageRepository"
          },
          "archived": {
            "type": "boolean"
          },
          "connections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PackageRepositoryConnection"
            }
          }
        },
        "required": [
          "id",
          "project",
          "name",
          "repository",
          "archived",
          "connections"
        ]
      },
      "ProjectPermissionContext": {
        "type": "object",
        "properties": {
          "project": {
            "$ref": "#/components/schemas/PR_Project"
          }
        },
        "required": [
          "project"
        ]
      },
      "ProjectPermissionTarget": {
        "type": "object",
        "properties": {
          "project": {
            "$ref": "#/components/schemas/ProjectIdentifier"
          }
        },
        "required": [
          "project"
        ]
      },
      "ProjectReposRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "repos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PR_RepositoryInfo"
            }
          }
        },
        "required": [
          "id",
          "repos"
        ]
      },
      "ProjectScope": {
        "type": "object",
        "properties": {
          "project": {
            "$ref": "#/components/schemas/PR_Project"
          }
        },
        "required": [
          "project"
        ]
      },
      "ProjectTeamMemberRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "project": {
            "$ref": "#/components/schemas/PR_Project"
          },
          "profile": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "position": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_Role"
          },
          "since": {
            "type": "string",
            "format": "date-time"
          },
          "archived": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "project",
          "profile",
          "since",
          "archived"
        ]
      },
      "ProjectTeamRole": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ProjectTeamRole.Admin"
          },
          {
            "$ref": "#/components/schemas/ProjectTeamRole.Collaborator"
          },
          {
            "$ref": "#/components/schemas/ProjectTeamRole.Member"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ProjectTeamRole.Admin": {
        "type": "object",
        "properties": {}
      },
      "ProjectTeamRole.Collaborator": {
        "type": "object",
        "properties": {}
      },
      "ProjectTeamRole.Member": {
        "type": "object",
        "properties": {}
      },
      "PublicHoliday": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "calendar": {
            "$ref": "#/components/schemas/PublicHolidayCalendarRecord"
          },
          "name": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "full-date"
          },
          "workingDay": {
            "type": "boolean"
          },
          "halfDay": {
            "nullable": true,
            "type": "boolean"
          },
          "archived": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "calendar",
          "name",
          "date",
          "workingDay"
        ]
      },
      "PublicHolidayCalendarRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "firstDate": {
            "nullable": true,
            "type": "string",
            "format": "full-date"
          },
          "lastDate": {
            "nullable": true,
            "type": "string",
            "format": "full-date"
          },
          "eventsCount": {
            "type": "integer",
            "format": "int32"
          },
          "location": {
            "$ref": "#/components/schemas/TD_Location"
          }
        },
        "required": [
          "id",
          "archived",
          "name",
          "eventsCount",
          "location"
        ]
      },
      "PublicationDetails": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/BlogPublicationDetails"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "PublicationDetailsIn": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/BlogPublicationDetailsIn"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "PublishMessage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "PublishingSource": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/PublishingSource.Packages"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "PublishingSource.Packages": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PackageVersionRef"
            }
          }
        },
        "required": [
          "items"
        ]
      },
      "PurchasedBillingPlan": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "jetSalesId": {
            "nullable": true,
            "type": "string"
          },
          "plan": {
            "type": "string"
          },
          "billingPeriod": {
            "type": "string"
          },
          "since": {
            "type": "string",
            "format": "full-date"
          },
          "till": {
            "type": "string",
            "format": "full-date"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "addUserPrice": {
            "type": "number",
            "format": "double"
          },
          "addStoragePrice": {
            "type": "number",
            "format": "double"
          },
          "addBandwidthPrice": {
            "type": "number",
            "format": "double"
          },
          "addCiCreditPrice": {
            "type": "number",
            "format": "double"
          },
          "minActiveUsers": {
            "type": "integer",
            "format": "int32"
          },
          "prepaidUsers": {
            "type": "integer",
            "format": "int32"
          },
          "storagePerUser": {
            "type": "integer",
            "format": "int32"
          },
          "storageOverall": {
            "type": "integer",
            "format": "int32"
          },
          "bandwidthPerUser": {
            "type": "integer",
            "format": "int32"
          },
          "bandwidthOverall": {
            "type": "integer",
            "format": "int32"
          },
          "ciCredits": {
            "type": "integer",
            "format": "int32"
          },
          "ciCreditsReserve": {
            "type": "integer",
            "format": "int32"
          },
          "ciCreditsRateForExternalWorker": {
            "nullable": true,
            "type": "number",
            "format": "double"
          },
          "integrations": {
            "type": "integer",
            "format": "int32"
          },
          "searchHistory": {
            "type": "integer",
            "format": "int32"
          },
          "balance": {
            "type": "number",
            "format": "double"
          },
          "hardLimitAmount": {
            "type": "number",
            "format": "double"
          },
          "hasCardVerifiedAdmin": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "plan",
          "billingPeriod",
          "since",
          "till",
          "currency",
          "addUserPrice",
          "addStoragePrice",
          "addBandwidthPrice",
          "addCiCreditPrice",
          "minActiveUsers",
          "prepaidUsers",
          "storagePerUser",
          "storageOverall",
          "bandwidthPerUser",
          "bandwidthOverall",
          "ciCredits",
          "ciCreditsReserve",
          "integrations",
          "searchHistory",
          "balance",
          "hardLimitAmount"
        ]
      },
      "PythonChecksum": {
        "type": "object",
        "properties": {
          "algorithm": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "algorithm",
          "value"
        ]
      },
      "PythonPackageFile": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "created": {
            "type": "integer",
            "format": "int64"
          },
          "length": {
            "type": "integer",
            "format": "int64"
          },
          "checksums": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PythonChecksum"
            }
          }
        },
        "required": [
          "name",
          "created",
          "length",
          "checksums"
        ]
      },
      "PythonPackageType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "PythonPackageUrl": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "href": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "href"
        ]
      },
      "PythonPackageVersionDetails": {
        "type": "object",
        "properties": {
          "repository": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "tags": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created": {
            "type": "integer",
            "format": "int64"
          },
          "accessed": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "downloads": {
            "type": "integer",
            "format": "int64"
          },
          "pinned": {
            "type": "boolean"
          },
          "comment": {
            "nullable": true,
            "type": "string"
          },
          "diskSize": {
            "type": "integer",
            "format": "int64"
          },
          "author": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipal"
          },
          "authors": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CPrincipal"
            }
          },
          "origin": {
            "nullable": true,
            "$ref": "#/components/schemas/PackageOrigin"
          },
          "metadata": {
            "nullable": true,
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "notNormalizedName": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "summary": {
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "descriptionContentType": {
            "nullable": true,
            "type": "string"
          },
          "keywords": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "homePage": {
            "nullable": true,
            "type": "string"
          },
          "authorFromPackageDetails": {
            "nullable": true,
            "type": "string"
          },
          "authorEmail": {
            "nullable": true,
            "type": "string"
          },
          "maintainer": {
            "nullable": true,
            "type": "string"
          },
          "maintainerEmail": {
            "nullable": true,
            "type": "string"
          },
          "license": {
            "nullable": true,
            "type": "string"
          },
          "classifiers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "projectUrls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PythonPackageUrl"
            }
          },
          "requiresDist": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "requiresPython": {
            "nullable": true,
            "type": "string"
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PythonPackageFile"
            }
          }
        },
        "required": [
          "repository",
          "name",
          "version",
          "created",
          "downloads",
          "pinned",
          "diskSize",
          "notNormalizedName",
          "platform",
          "keywords",
          "classifiers",
          "projectUrls",
          "requiresDist",
          "files"
        ]
      },
      "QRCode": {
        "type": "object",
        "properties": {
          "width": {
            "type": "integer",
            "format": "int32"
          },
          "base64Bitmap": {
            "type": "string"
          }
        },
        "required": [
          "width",
          "base64Bitmap"
        ]
      },
      "RdGatewayConnectionInfo": {
        "type": "object",
        "properties": {
          "originalLink": {
            "type": "string"
          },
          "relayLink": {
            "type": "string"
          },
          "relayAuthData": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "required": [
          "originalLink",
          "relayLink",
          "relayAuthData",
          "version"
        ]
      },
      "RdInstanceType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "vcpus": {
            "type": "integer",
            "format": "int32"
          },
          "memMb": {
            "type": "integer",
            "format": "int32"
          },
          "volumeGb": {
            "type": "integer",
            "format": "int32"
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "name",
          "vcpus",
          "memMb",
          "volumeGb",
          "enabled"
        ]
      },
      "RdWorkspaceResources": {
        "type": "object",
        "properties": {
          "milliCpus": {
            "type": "integer",
            "format": "int32"
          },
          "memoryMb": {
            "type": "integer",
            "format": "int32"
          },
          "volumeGb": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "milliCpus",
          "memoryMb",
          "volumeGb"
        ]
      },
      "RdWorkspaceVcsData": {
        "type": "object",
        "properties": {
          "repoName": {
            "type": "string"
          },
          "branchName": {
            "type": "string"
          },
          "revision": {
            "type": "string"
          },
          "mergeRequestNumber": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "containsNotPushedChanges": {
            "type": "boolean"
          }
        },
        "required": [
          "repoName",
          "branchName",
          "revision",
          "containsNotPushedChanges"
        ]
      },
      "RdWorkspaceWithoutRefs": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "ideType": {
            "$ref": "#/components/schemas/IdeType"
          },
          "name": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/RdWorkspaceState"
          },
          "projectId": {
            "type": "string"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "externalId": {
            "type": "string"
          },
          "vcsData": {
            "nullable": true,
            "$ref": "#/components/schemas/RdWorkspaceVcsData"
          },
          "resources": {
            "$ref": "#/components/schemas/RdWorkspaceResources"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "ideVersion": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "id",
          "ideType",
          "name",
          "state",
          "projectId",
          "number",
          "externalId",
          "resources",
          "created",
          "updated"
        ]
      },
      "RecurrenceRule": {
        "type": "object",
        "properties": {
          "freq": {
            "$ref": "#/components/schemas/RecurrenceRuleFreq"
          },
          "ends": {
            "$ref": "#/components/schemas/RecurrenceRuleEnds"
          }
        },
        "required": [
          "freq",
          "ends"
        ]
      },
      "RecurrenceRuleEnds": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/RecurrenceRuleEnds.Never"
          },
          {
            "$ref": "#/components/schemas/RecurrenceRuleEnds.OnDate"
          },
          {
            "$ref": "#/components/schemas/RecurrenceRuleEnds.TotalCount"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "RecurrenceRuleEnds.Never": {
        "type": "object",
        "properties": {}
      },
      "RecurrenceRuleEnds.OnDate": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "full-date"
          }
        },
        "required": [
          "date"
        ]
      },
      "RecurrenceRuleEnds.TotalCount": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "count"
        ]
      },
      "RecurrenceRuleFreq": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/RecurrenceRuleFreq.Daily"
          },
          {
            "$ref": "#/components/schemas/RecurrenceRuleFreq.MonthlyOnDate"
          },
          {
            "$ref": "#/components/schemas/RecurrenceRuleFreq.MonthlyOnFirstWeekday"
          },
          {
            "$ref": "#/components/schemas/RecurrenceRuleFreq.MonthlyOnLastWeekday"
          },
          {
            "$ref": "#/components/schemas/RecurrenceRuleFreq.MonthlyOnStartDate"
          },
          {
            "$ref": "#/components/schemas/RecurrenceRuleFreq.Weekly"
          },
          {
            "$ref": "#/components/schemas/RecurrenceRuleFreq.Yearly"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "RecurrenceRuleFreq.Daily": {
        "type": "object",
        "properties": {
          "interval": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "interval"
        ]
      },
      "RecurrenceRuleFreq.MonthlyOnDate": {
        "type": "object",
        "properties": {
          "day": {
            "type": "integer",
            "format": "int32"
          },
          "interval": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "day",
          "interval"
        ]
      },
      "RecurrenceRuleFreq.MonthlyOnFirstWeekday": {
        "type": "object",
        "properties": {
          "weekday": {
            "$ref": "#/components/schemas/Weekday"
          },
          "shift": {
            "type": "integer",
            "format": "int32"
          },
          "interval": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "weekday",
          "shift",
          "interval"
        ]
      },
      "RecurrenceRuleFreq.MonthlyOnLastWeekday": {
        "type": "object",
        "properties": {
          "weekday": {
            "$ref": "#/components/schemas/Weekday"
          },
          "interval": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "weekday",
          "interval"
        ]
      },
      "RecurrenceRuleFreq.MonthlyOnStartDate": {
        "type": "object",
        "properties": {
          "interval": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "interval"
        ]
      },
      "RecurrenceRuleFreq.Weekly": {
        "type": "object",
        "properties": {
          "weekdays": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Weekday"
            }
          },
          "interval": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "weekdays",
          "interval"
        ]
      },
      "RecurrenceRuleFreq.Yearly": {
        "type": "object",
        "properties": {
          "interval": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "interval"
        ]
      },
      "RefreshTokenPayload": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "verificationToken": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "refreshToken",
          "scope",
          "clientId",
          "userId"
        ]
      },
      "RepoChanges": {
        "type": "object",
        "properties": {
          "heads": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RepoHeadsChange"
            }
          },
          "commits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitCommitInfoWithChanges"
            }
          },
          "totalNewCommits": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "heads",
          "commits",
          "totalNewCommits"
        ]
      },
      "RepoCommitsSubscriptionFilter": {
        "type": "object",
        "properties": {
          "project": {
            "nullable": true,
            "$ref": "#/components/schemas/PR_Project"
          },
          "repository": {
            "type": "string"
          },
          "spec": {
            "$ref": "#/components/schemas/RepoCommitsSubscriptionFilterSpec"
          }
        },
        "required": [
          "repository",
          "spec"
        ]
      },
      "RepoCommitsSubscriptionFilterIn": {
        "type": "object",
        "properties": {
          "project": {
            "nullable": true,
            "type": "string"
          },
          "repository": {
            "type": "string"
          },
          "spec": {
            "$ref": "#/components/schemas/RepoCommitsSubscriptionFilterSpec"
          }
        },
        "required": [
          "repository",
          "spec"
        ]
      },
      "RepoCommitsSubscriptionFilterSpec": {
        "type": "object",
        "properties": {
          "authors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "committers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "branchSpec": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pathSpec": {
            "type": "string"
          },
          "messageRegex": {
            "type": "string"
          }
        },
        "required": [
          "authors",
          "committers",
          "branchSpec",
          "pathSpec",
          "messageRegex"
        ]
      },
      "RepoHeadsChange": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "oldId": {
            "type": "string"
          },
          "newId": {
            "type": "string"
          },
          "force": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "oldId",
          "newId"
        ]
      },
      "RepoHeadsSubscriptionFilter": {
        "type": "object",
        "properties": {
          "project": {
            "nullable": true,
            "$ref": "#/components/schemas/PR_Project"
          },
          "repository": {
            "type": "string"
          }
        },
        "required": [
          "repository"
        ]
      },
      "RepoHeadsSubscriptionFilterIn": {
        "type": "object",
        "properties": {
          "project": {
            "nullable": true,
            "type": "string"
          },
          "repository": {
            "type": "string"
          }
        },
        "required": [
          "repository"
        ]
      },
      "RepositoryActivity": {
        "type": "object",
        "properties": {
          "lastActivity": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "first": {
                  "type": "string",
                  "format": "full-date"
                },
                "second": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "required": [
                "first",
                "second"
              ]
            }
          }
        },
        "required": [
          "lastActivity"
        ]
      },
      "RepositoryCommitRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "repositoryId": {
            "type": "string"
          },
          "repositoryName": {
            "type": "string"
          },
          "revision": {
            "type": "string"
          },
          "message": {
            "nullable": true,
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "authorName": {
            "nullable": true,
            "type": "string"
          },
          "authorEmail": {
            "nullable": true,
            "type": "string"
          },
          "committerName": {
            "nullable": true,
            "type": "string"
          },
          "committerEmail": {
            "nullable": true,
            "type": "string"
          },
          "authorProfile": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_MemberProfile"
          }
        },
        "required": [
          "id",
          "repositoryId",
          "repositoryName",
          "revision",
          "date"
        ]
      },
      "RepositoryDetails": {
        "type": "object",
        "properties": {
          "projectKey": {
            "type": "string"
          },
          "repository": {
            "type": "string"
          },
          "starred": {
            "type": "boolean"
          }
        },
        "required": [
          "projectKey",
          "repository",
          "starred"
        ]
      },
      "RepositoryInProject": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "isDeleted": {
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "isDeleted"
        ]
      },
      "RepositoryInReview": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "deleted"
        ]
      },
      "RepositoryUrls": {
        "type": "object",
        "properties": {
          "httpUrl": {
            "nullable": true,
            "type": "string"
          },
          "sshUrl": {
            "nullable": true,
            "type": "string"
          },
          "sshHost": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "ResponsibilityRecord": {
        "type": "object",
        "properties": {
          "responsibilityId": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "notes": {
            "nullable": true,
            "type": "string"
          },
          "assignedPeople": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssignedPerson"
            }
          }
        },
        "required": [
          "responsibilityId",
          "summary",
          "assignedPeople"
        ]
      },
      "RetentionPolicyParams": {
        "type": "object",
        "properties": {
          "numberOfDaysToRetain": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "numberOfVersionsToRetain": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "retainDownloadedOnce": {
            "type": "boolean"
          }
        },
        "required": [
          "retainDownloadedOnce"
        ]
      },
      "ReviewBranchTrackEvent": {
        "type": "object",
        "properties": {
          "repository": {
            "type": "string"
          },
          "branch": {
            "type": "string"
          },
          "track": {
            "type": "boolean"
          }
        },
        "required": [
          "repository",
          "branch",
          "track"
        ]
      },
      "ReviewCommit": {
        "type": "object",
        "properties": {
          "repositoryId": {
            "type": "string"
          },
          "commitId": {
            "type": "string"
          }
        },
        "required": [
          "repositoryId",
          "commitId"
        ]
      },
      "ReviewCommitIn": {
        "type": "object",
        "properties": {
          "repository": {
            "type": "string"
          },
          "commit": {
            "type": "string"
          }
        },
        "required": [
          "repository",
          "commit"
        ]
      },
      "ReviewCompletionStateChangedEvent": {
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/ReviewerState"
          }
        },
        "required": [
          "state"
        ]
      },
      "ReviewRevisionsChangedEvent": {
        "type": "object",
        "properties": {
          "commits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RepositoryCommitRecord"
            }
          },
          "changeType": {
            "$ref": "#/components/schemas/ReviewRevisionsChangedType"
          },
          "projectKey": {
            "nullable": true,
            "type": "string"
          },
          "review": {
            "nullable": true,
            "$ref": "#/components/schemas/CodeReviewRecord"
          }
        },
        "required": [
          "commits",
          "changeType"
        ]
      },
      "ReviewStateChangedEvent": {
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/CodeReviewState"
          },
          "review": {
            "nullable": true,
            "$ref": "#/components/schemas/CodeReviewRecord"
          }
        },
        "required": [
          "state"
        ]
      },
      "ReviewTitleChangedEvent": {
        "type": "object",
        "properties": {
          "oldTitle": {
            "type": "string"
          },
          "newTitle": {
            "type": "string"
          }
        },
        "required": [
          "oldTitle",
          "newTitle"
        ]
      },
      "ReviewerChangedEvent": {
        "type": "object",
        "properties": {
          "uid": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "changeType": {
            "$ref": "#/components/schemas/ReviewerChangedType"
          }
        },
        "required": [
          "uid",
          "changeType"
        ]
      },
      "ReviewerParam": {
        "type": "object",
        "properties": {
          "profileId": {
            "type": "string"
          },
          "qualityGateSlot": {
            "nullable": true,
            "$ref": "#/components/schemas/CodeReviewParticipantSlotBase"
          }
        },
        "required": [
          "profileId"
        ]
      },
      "RevisionAuthor": {
        "type": "object",
        "properties": {
          "authorName": {
            "type": "string"
          },
          "profile": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_MemberProfile"
          }
        },
        "required": [
          "authorName"
        ]
      },
      "RevisionAuthorInfo": {
        "type": "object",
        "properties": {
          "revisionInfo": {
            "$ref": "#/components/schemas/RevisionInfo"
          },
          "author": {
            "$ref": "#/components/schemas/RevisionAuthor"
          }
        },
        "required": [
          "revisionInfo",
          "author"
        ]
      },
      "RevisionInfo": {
        "type": "object",
        "properties": {
          "revision": {
            "type": "string"
          },
          "date": {
            "type": "integer",
            "format": "int64"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "revision",
          "date",
          "message"
        ]
      },
      "RevisionsInReview": {
        "type": "object",
        "properties": {
          "repository": {
            "$ref": "#/components/schemas/RepositoryInReview"
          },
          "commits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitCommitWithGraph"
            }
          }
        },
        "required": [
          "repository",
          "commits"
        ]
      },
      "RightDTO": {
        "type": "object",
        "properties": {
          "rightCode": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "targetName": {
            "type": "string"
          },
          "editable": {
            "type": "boolean"
          },
          "status": {
            "$ref": "#/components/schemas/RightStatus"
          },
          "modificationAuthor": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipal"
          },
          "modificationTimestamp": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "rightCode",
          "name",
          "group",
          "description",
          "targetName",
          "editable",
          "status",
          "dependencies"
        ]
      },
      "RightDescriptorDTO": {
        "type": "object",
        "properties": {
          "rightCode": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "targetName": {
            "type": "string"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "rightCode",
          "name",
          "group",
          "description",
          "targetName",
          "dependencies"
        ]
      },
      "RightUpdateDTO": {
        "type": "object",
        "properties": {
          "rightCode": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/RightStatus"
          }
        },
        "required": [
          "rightCode",
          "status"
        ]
      },
      "RoleDTO": {
        "type": "object",
        "properties": {
          "roleId": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/PermissionRoleType"
          },
          "code": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "membersEditable": {
            "type": "boolean"
          },
          "rightsEditable": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "roleId",
          "type",
          "name",
          "description",
          "membersEditable"
        ]
      },
      "Room": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "channel": {
            "$ref": "#/components/schemas/M2ChannelRecord"
          }
        },
        "required": [
          "id",
          "archived",
          "name",
          "channel"
        ]
      },
      "RtBlockquote": {
        "type": "object",
        "properties": {
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlockNode"
            }
          },
          "marks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentMark"
            }
          }
        },
        "required": [
          "children",
          "marks"
        ]
      },
      "RtBoldMark": {
        "type": "object",
        "properties": {}
      },
      "RtBreak": {
        "type": "object",
        "properties": {
          "soft": {
            "type": "boolean"
          },
          "marks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentMark"
            }
          }
        },
        "required": [
          "soft",
          "marks"
        ]
      },
      "RtBulletList": {
        "type": "object",
        "properties": {
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RtListItem"
            }
          },
          "marks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentMark"
            }
          }
        },
        "required": [
          "children",
          "marks"
        ]
      },
      "RtCode": {
        "type": "object",
        "properties": {
          "lang": {
            "type": "string"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RtText"
            }
          }
        },
        "required": [
          "lang",
          "children"
        ]
      },
      "RtCodeMark": {
        "type": "object",
        "properties": {}
      },
      "RtDocument": {
        "type": "object",
        "properties": {
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlockNode"
            }
          },
          "marks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentMark"
            }
          }
        },
        "required": [
          "children",
          "marks"
        ]
      },
      "RtEmoji": {
        "type": "object",
        "properties": {
          "emojiName": {
            "type": "string"
          },
          "marks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentMark"
            }
          }
        },
        "required": [
          "emojiName",
          "marks"
        ]
      },
      "RtHeading": {
        "type": "object",
        "properties": {
          "level": {
            "type": "integer",
            "format": "int32"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InlineNode"
            }
          },
          "marks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentMark"
            }
          }
        },
        "required": [
          "level",
          "children",
          "marks"
        ]
      },
      "RtHorizontalRule": {
        "type": "object",
        "properties": {}
      },
      "RtImage": {
        "type": "object",
        "properties": {
          "attrs": {
            "$ref": "#/components/schemas/RtImageAttrs"
          },
          "marks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentMark"
            }
          }
        },
        "required": [
          "attrs",
          "marks"
        ]
      },
      "RtImageAttrs": {
        "type": "object",
        "properties": {
          "src": {
            "type": "string"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "alt": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "src"
        ]
      },
      "RtItalicMark": {
        "type": "object",
        "properties": {}
      },
      "RtLinkAttrs": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "details": {
            "nullable": true,
            "$ref": "#/components/schemas/RtLinkDetails"
          }
        },
        "required": [
          "href"
        ]
      },
      "RtLinkDetails": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/RtPredefinedMentionLinkDetails"
          },
          {
            "$ref": "#/components/schemas/RtTeamLinkDetails"
          },
          {
            "$ref": "#/components/schemas/RtProfileLinkDetails"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "RtLinkMark": {
        "type": "object",
        "properties": {
          "attrs": {
            "$ref": "#/components/schemas/RtLinkAttrs"
          }
        },
        "required": [
          "attrs"
        ]
      },
      "RtListItem": {
        "type": "object",
        "properties": {
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlockNode"
            }
          },
          "marks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentMark"
            }
          }
        },
        "required": [
          "children",
          "marks"
        ]
      },
      "RtOrderedList": {
        "type": "object",
        "properties": {
          "startNumber": {
            "type": "integer",
            "format": "int32"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RtListItem"
            }
          },
          "marks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentMark"
            }
          }
        },
        "required": [
          "startNumber",
          "children",
          "marks"
        ]
      },
      "RtParagraph": {
        "type": "object",
        "properties": {
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InlineNode"
            }
          },
          "marks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentMark"
            }
          }
        },
        "required": [
          "children",
          "marks"
        ]
      },
      "RtPredefinedMentionLinkDetails": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value"
        ]
      },
      "RtProfileLinkDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "userName"
        ]
      },
      "RtStrikeThroughMark": {
        "type": "object",
        "properties": {}
      },
      "RtTable": {
        "type": "object",
        "properties": {
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RtTableRow"
            }
          },
          "marks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentMark"
            }
          }
        },
        "required": [
          "children",
          "marks"
        ]
      },
      "RtTableCell": {
        "type": "object",
        "properties": {
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlockNode"
            }
          },
          "marks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentMark"
            }
          },
          "attrs": {
            "nullable": true,
            "$ref": "#/components/schemas/RtTableCellAttrs"
          }
        },
        "required": [
          "children",
          "marks"
        ]
      },
      "RtTableCellAttrs": {
        "type": "object",
        "properties": {
          "rowspan": {
            "type": "integer",
            "format": "int32"
          },
          "colspan": {
            "type": "integer",
            "format": "int32"
          },
          "colwidth": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            }
          }
        },
        "required": [
          "rowspan",
          "colspan"
        ]
      },
      "RtTableHeader": {
        "type": "object",
        "properties": {
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlockNode"
            }
          },
          "marks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentMark"
            }
          },
          "attrs": {
            "nullable": true,
            "$ref": "#/components/schemas/RtTableCellAttrs"
          }
        },
        "required": [
          "children",
          "marks"
        ]
      },
      "RtTableRow": {
        "type": "object",
        "properties": {
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RtTableRowContent"
            }
          },
          "marks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentMark"
            }
          }
        },
        "required": [
          "children",
          "marks"
        ]
      },
      "RtTableRowContent": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/RtTableHeader"
          },
          {
            "$ref": "#/components/schemas/RtTableCell"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "RtTeamLinkDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "RtText": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "marks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentMark"
            }
          }
        },
        "required": [
          "value",
          "marks"
        ]
      },
      "SFUDataProducerOptions": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "SFUProducerOptions": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "parameters": {
            "$ref": "#/components/schemas/SFUProducerParameters"
          }
        },
        "required": [
          "id",
          "parameters"
        ]
      },
      "SFUProducerParameters": {
        "type": "object",
        "properties": {
          "mediaKind": {
            "$ref": "#/components/schemas/SFUMediaKind"
          },
          "rtpParameters": {
            "type": "string"
          },
          "paused": {
            "type": "boolean"
          },
          "closed": {
            "type": "boolean"
          }
        },
        "required": [
          "mediaKind",
          "rtpParameters",
          "paused",
          "closed"
        ]
      },
      "SPackageRepositoryWebhookEvent": {
        "type": "object",
        "properties": {
          "projectKey": {
            "$ref": "#/components/schemas/ProjectKey"
          },
          "repository": {
            "type": "string"
          },
          "repositoryType": {
            "$ref": "#/components/schemas/PackageType"
          },
          "action": {
            "$ref": "#/components/schemas/PackageRepositoryEventAction"
          },
          "packageInfo": {
            "$ref": "#/components/schemas/PackageVersionRef"
          }
        },
        "required": [
          "projectKey",
          "repository",
          "repositoryType",
          "action",
          "packageInfo"
        ]
      },
      "SRepoCommitsWebhookEvent": {
        "type": "object",
        "properties": {
          "projectKey": {
            "$ref": "#/components/schemas/ProjectKey"
          },
          "repository": {
            "type": "string"
          },
          "commit": {
            "$ref": "#/components/schemas/GitCommitInfoWithChanges"
          }
        },
        "required": [
          "projectKey",
          "repository",
          "commit"
        ]
      },
      "SRepoHeadsWebhookEvent": {
        "type": "object",
        "properties": {
          "projectKey": {
            "$ref": "#/components/schemas/ProjectKey"
          },
          "repository": {
            "type": "string"
          },
          "changes": {
            "$ref": "#/components/schemas/RepoChanges"
          }
        },
        "required": [
          "projectKey",
          "repository",
          "changes"
        ]
      },
      "SSLKeystore": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "created": {
            "type": "string",
            "format": "full-date"
          }
        },
        "required": [
          "name",
          "created"
        ]
      },
      "SSLKeystoreEndpointAuth": {
        "type": "object",
        "properties": {
          "sslKeystore": {
            "type": "string"
          }
        },
        "required": [
          "sslKeystore"
        ]
      },
      "SamlMetadataResponse": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/SamlMetadataResponse.Error"
          },
          {
            "$ref": "#/components/schemas/SamlMetadataResponse.Success"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "SamlMetadataResponse.Error": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "messages"
        ]
      },
      "SamlMetadataResponse.Success": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "string"
          }
        },
        "required": [
          "metadata"
        ]
      },
      "SecretParameterRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "bundleId": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "createdAt": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipal"
          },
          "updatedAt": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipal"
          }
        },
        "required": [
          "id",
          "archived",
          "bundleId",
          "key"
        ]
      },
      "SessionParticipationRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "connectionId": {
            "type": "integer",
            "format": "int64"
          },
          "sessionId": {
            "type": "string"
          },
          "member": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "state": {
            "$ref": "#/components/schemas/ParticipationState"
          },
          "producers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProducerOptions"
            }
          },
          "dataProducers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataProducerOptions"
            }
          }
        },
        "required": [
          "id",
          "connectionId",
          "sessionId",
          "member",
          "state",
          "producers",
          "dataProducers"
        ]
      },
      "SettingsValue": {
        "type": "object",
        "properties": {
          "emailNotificationsEnabled": {
            "type": "boolean"
          },
          "firstDayOfWeek": {
            "$ref": "#/components/schemas/Weekday"
          },
          "darkTheme": {
            "nullable": true,
            "$ref": "#/components/schemas/DarkTheme"
          },
          "themeName": {
            "nullable": true,
            "type": "string"
          },
          "calendarView": {
            "nullable": true,
            "type": "string"
          },
          "notificationEmail": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_ProfileEmail"
          },
          "draftType": {
            "nullable": true,
            "$ref": "#/components/schemas/DraftDocumentType"
          },
          "todoFilters": {
            "nullable": true,
            "type": "boolean"
          },
          "defaultProject": {
            "nullable": true,
            "$ref": "#/components/schemas/PR_Project"
          }
        },
        "required": [
          "emailNotificationsEnabled",
          "firstDayOfWeek"
        ]
      },
      "SpaceNewsFeedChannel": {
        "type": "object",
        "properties": {
          "notificationDefaults": {
            "nullable": true,
            "$ref": "#/components/schemas/ChannelSpecificDefaults"
          },
          "supportReplies": {
            "nullable": true,
            "type": "boolean"
          }
        }
      },
      "SprintLaunch": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/SprintLaunch.Immediate"
          },
          {
            "$ref": "#/components/schemas/SprintLaunch.Manual"
          },
          {
            "$ref": "#/components/schemas/SprintLaunch.Scheduled"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "SprintLaunch.Immediate": {
        "type": "object",
        "properties": {
          "moveUnresolvedIssues": {
            "type": "boolean"
          },
          "notifySubscribers": {
            "type": "boolean"
          }
        },
        "required": [
          "moveUnresolvedIssues",
          "notifySubscribers"
        ]
      },
      "SprintLaunch.Manual": {
        "type": "object",
        "properties": {}
      },
      "SprintLaunch.Scheduled": {
        "type": "object",
        "properties": {
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "moveUnresolvedIssues": {
            "type": "boolean"
          },
          "notifySubscribers": {
            "type": "boolean"
          }
        },
        "required": [
          "time",
          "moveUnresolvedIssues",
          "notifySubscribers"
        ]
      },
      "SprintRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "board": {
            "$ref": "#/components/schemas/BoardRecord"
          },
          "name": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/SprintState"
          },
          "from": {
            "type": "string",
            "format": "full-date"
          },
          "to": {
            "type": "string",
            "format": "full-date"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "launch": {
            "$ref": "#/components/schemas/SprintLaunch"
          }
        },
        "required": [
          "id",
          "archived",
          "board",
          "name",
          "state",
          "from",
          "to",
          "launch"
        ]
      },
      "SshKeyData": {
        "type": "object",
        "properties": {
          "fingerprint": {
            "type": "string"
          },
          "sha256fingerprint": {
            "nullable": true,
            "type": "string"
          },
          "publicKey": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "lastUsed": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "lastResource": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "fingerprint",
          "publicKey",
          "comment"
        ]
      },
      "StringCFConstraint": {
        "type": "object",
        "properties": {
          "min": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "max": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "pattern": {
            "nullable": true,
            "type": "string"
          },
          "message": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "StringCFType": {
        "type": "object",
        "properties": {}
      },
      "StringCFValue": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "StringListCFType": {
        "type": "object",
        "properties": {}
      },
      "StringListCFValue": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "values"
        ]
      },
      "SubjectResponsibilitiesTable": {
        "type": "object",
        "properties": {
          "subjectId": {
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "reusedInProjects": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "responsibilityRecords": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponsibilityRecord"
            }
          }
        },
        "required": [
          "subjectId",
          "reusedInProjects",
          "responsibilityRecords"
        ]
      },
      "Subscription": {
        "type": "object",
        "properties": {
          "subjectCode": {
            "type": "string"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionFilter"
            }
          },
          "eventTypeCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "subjectCode",
          "filters",
          "eventTypeCodes"
        ]
      },
      "SubscriptionDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "subscription": {
            "$ref": "#/components/schemas/Subscription"
          },
          "privateFeed": {
            "nullable": true,
            "$ref": "#/components/schemas/PrivateFeed"
          },
          "application": {
            "nullable": true,
            "$ref": "#/components/schemas/ES_App"
          },
          "requestedAuthentication": {
            "nullable": true,
            "$ref": "#/components/schemas/SubscriptionRequestedAuthorizations"
          }
        },
        "required": [
          "id",
          "name",
          "enabled",
          "subscription"
        ]
      },
      "SubscriptionFilter": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/CodeReviewSubscriptionFilter"
          },
          {
            "$ref": "#/components/schemas/BlogCommonSubscriptionFilter"
          },
          {
            "$ref": "#/components/schemas/DocumentCustomSubscriptionFilter"
          },
          {
            "$ref": "#/components/schemas/MemberCommonSubscriptionFilter"
          },
          {
            "$ref": "#/components/schemas/DeploymentsSubscriptionFilter"
          },
          {
            "$ref": "#/components/schemas/AutomationJobSubscriptionFilter"
          },
          {
            "$ref": "#/components/schemas/ChatChannelSubscriptionFilter"
          },
          {
            "$ref": "#/components/schemas/ApplicationsSubscriptionFilter"
          },
          {
            "$ref": "#/components/schemas/ProjectCommonSubscriptionFilter"
          },
          {
            "$ref": "#/components/schemas/RepoCommitsSubscriptionFilter"
          },
          {
            "$ref": "#/components/schemas/RepoHeadsSubscriptionFilter"
          },
          {
            "$ref": "#/components/schemas/AbsenceCommonSubscriptionFilter"
          },
          {
            "$ref": "#/components/schemas/PackagesSubscriptionFilter"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "SubscriptionFilterIn": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/DeploymentsSubscriptionFilterIn"
          },
          {
            "$ref": "#/components/schemas/ProjectCommonSubscriptionFilterIn"
          },
          {
            "$ref": "#/components/schemas/RepoHeadsSubscriptionFilterIn"
          },
          {
            "$ref": "#/components/schemas/AutomationJobSubscriptionFilterIn"
          },
          {
            "$ref": "#/components/schemas/ChatChannelSubscriptionFilterIn"
          },
          {
            "$ref": "#/components/schemas/AbsenceCommonSubscriptionFilterIn"
          },
          {
            "$ref": "#/components/schemas/MemberCommonSubscriptionFilterIn"
          },
          {
            "$ref": "#/components/schemas/PackagesSubscriptionFilterIn"
          },
          {
            "$ref": "#/components/schemas/ApplicationsSubscriptionFilterIn"
          },
          {
            "$ref": "#/components/schemas/BlogCommonSubscriptionFilterIn"
          },
          {
            "$ref": "#/components/schemas/RepoCommitsSubscriptionFilterIn"
          },
          {
            "$ref": "#/components/schemas/DocumentCustomSubscriptionFilterIn"
          },
          {
            "$ref": "#/components/schemas/CodeReviewSubscriptionFilterIn"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "SubscriptionMetadata": {
        "type": "object",
        "properties": {
          "channel": {
            "$ref": "#/components/schemas/M2ChannelRecord"
          },
          "subscription": {
            "type": "string"
          },
          "subscriptionName": {
            "type": "string"
          }
        },
        "required": [
          "channel",
          "subscription",
          "subscriptionName"
        ]
      },
      "SubscriptionRequestedAuthorizations": {
        "type": "object",
        "properties": {
          "rights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_Right"
            }
          },
          "rightCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "permissionContext": {
            "nullable": true,
            "$ref": "#/components/schemas/PermissionContextApi"
          },
          "projects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PR_Project"
            }
          }
        },
        "required": [
          "rights",
          "rightCodes",
          "projects"
        ]
      },
      "SupportProfileDTO": {
        "type": "object",
        "properties": {
          "profile": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "adminPermissionsGranted": {
            "type": "boolean"
          }
        },
        "required": [
          "profile",
          "adminPermissionsGranted"
        ]
      },
      "SyntaxMarkup": {
        "type": "object",
        "properties": {
          "type": {
            "nullable": true,
            "$ref": "#/components/schemas/SyntaxMarkupType"
          },
          "range": {
            "$ref": "#/components/schemas/TextRange"
          }
        },
        "required": [
          "range"
        ]
      },
      "TD_ContactKind": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/TD_ContactKind.Email"
          },
          {
            "$ref": "#/components/schemas/TD_ContactKind.Link"
          },
          {
            "$ref": "#/components/schemas/TD_ContactKind.Messenger"
          },
          {
            "$ref": "#/components/schemas/TD_ContactKind.PhoneNumber"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "TD_ContactKind.Email": {
        "type": "object",
        "properties": {}
      },
      "TD_ContactKind.Link": {
        "type": "object",
        "properties": {}
      },
      "TD_ContactKind.Messenger": {
        "type": "object",
        "properties": {
          "messenger": {
            "type": "string"
          }
        },
        "required": [
          "messenger"
        ]
      },
      "TD_ContactKind.PhoneNumber": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "required": [
          "type"
        ]
      },
      "TD_Language": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nativeName": {
            "type": "string"
          },
          "firstNameTitle": {
            "type": "string"
          },
          "lastNameTitle": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "code",
          "name",
          "nativeName",
          "firstNameTitle",
          "lastNameTitle"
        ]
      },
      "TD_Location": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "timezone": {
            "nullable": true,
            "$ref": "#/components/schemas/ATimeZoneWithOffset"
          },
          "tz": {
            "nullable": true,
            "type": "string"
          },
          "workdays": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "phones": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "emails": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "equipment": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "address": {
            "nullable": true,
            "type": "string"
          },
          "parent": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_Location"
          },
          "type": {
            "type": "string"
          },
          "mapId": {
            "nullable": true,
            "type": "string"
          },
          "capacity": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "channelId": {
            "nullable": true,
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "equipment2": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_LocationEquipmentTypeRecord"
            }
          }
        },
        "required": [
          "id",
          "name",
          "phones",
          "emails",
          "type",
          "archived"
        ]
      },
      "TD_LocationEquipmentType": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "archived"
        ]
      },
      "TD_LocationEquipmentTypeRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "name",
          "archived"
        ]
      },
      "TD_LocationMap": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "picture": {
            "type": "string"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "width": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "height": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "id",
          "picture",
          "created"
        ]
      },
      "TD_LocationMapPoint": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "mapId": {
            "nullable": true,
            "type": "string"
          },
          "x": {
            "type": "integer",
            "format": "int32"
          },
          "y": {
            "type": "integer",
            "format": "int32"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "memberLocation": {
            "nullable": true,
            "type": "string"
          },
          "deleted": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "x",
          "y",
          "created"
        ]
      },
      "TD_LocationWithTimeZone": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "timezone": {
            "$ref": "#/components/schemas/ATimeZoneWithOffset"
          },
          "type": {
            "nullable": true,
            "$ref": "#/components/schemas/LocationType"
          },
          "parentLocation": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "timezone"
        ]
      },
      "TD_MemberInLocationMap": {
        "type": "object",
        "properties": {
          "profile": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "memberLocation": {
            "$ref": "#/components/schemas/TD_MemberLocation"
          },
          "locationMapPoint": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_LocationMapPoint"
          }
        },
        "required": [
          "profile",
          "memberLocation"
        ]
      },
      "TD_MemberLocation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/TD_Location"
          },
          "locationMapPoints": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_LocationMapPoint"
            }
          },
          "since": {
            "nullable": true,
            "type": "string",
            "format": "full-date"
          },
          "till": {
            "nullable": true,
            "type": "string",
            "format": "full-date"
          },
          "member": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "archived": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "location",
          "member",
          "archived"
        ]
      },
      "TD_MemberProfile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/TD_ProfileName"
          },
          "speaksEnglish": {
            "type": "boolean"
          },
          "smallAvatar": {
            "nullable": true,
            "type": "string"
          },
          "avatar": {
            "nullable": true,
            "type": "string"
          },
          "profilePicture": {
            "nullable": true,
            "type": "string"
          },
          "languages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_ProfileLanguage"
            }
          },
          "archived": {
            "type": "boolean"
          },
          "notAMember": {
            "type": "boolean"
          },
          "joined": {
            "nullable": true,
            "type": "string",
            "format": "full-date"
          },
          "leftAt": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "external": {
            "nullable": true,
            "type": "boolean"
          },
          "absences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AbsenceRecord"
            }
          },
          "holidays": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicHoliday"
            }
          },
          "folderWithChildren": {
            "$ref": "#/components/schemas/DocumentFolderWithChildren"
          },
          "memberships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_Membership"
            }
          },
          "unapprovedMemberships": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_Membership"
            }
          },
          "logins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ES_ProfileLogin"
            }
          },
          "locationHistory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_MemberLocation"
            }
          },
          "externalId": {
            "nullable": true,
            "type": "string"
          },
          "emails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_ProfileEmail"
            }
          },
          "phones": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "messengers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "about": {
            "nullable": true,
            "type": "string"
          },
          "avatarCropSquare": {
            "nullable": true,
            "$ref": "#/components/schemas/AvatarCropSquare"
          },
          "gender": {
            "nullable": true,
            "$ref": "#/components/schemas/Gender"
          },
          "birthday": {
            "nullable": true,
            "type": "string",
            "format": "full-date"
          },
          "onboardingRequired": {
            "type": "boolean"
          },
          "showBannerOnLandingPage": {
            "nullable": true,
            "type": "boolean"
          },
          "showBannerOnProjectPage": {
            "nullable": true,
            "type": "boolean"
          },
          "showBannerOnTeamDirectoryHomePage": {
            "nullable": true,
            "type": "boolean"
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_MemberLocation"
            }
          },
          "topics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Topic"
            }
          },
          "membershipHistory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_Membership"
            }
          },
          "managers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_MemberProfile"
            }
          },
          "left": {
            "nullable": true,
            "type": "string",
            "format": "full-date"
          },
          "customFields": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CFValue"
            }
          }
        },
        "required": [
          "id",
          "username",
          "name",
          "speaksEnglish",
          "languages",
          "archived",
          "notAMember",
          "absences",
          "holidays",
          "folderWithChildren",
          "memberships",
          "logins",
          "locationHistory",
          "emails",
          "phones",
          "messengers",
          "links",
          "onboardingRequired",
          "locations",
          "topics",
          "membershipHistory",
          "managers",
          "customFields"
        ]
      },
      "TD_MemberWithTeam": {
        "type": "object",
        "properties": {
          "profile": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_Team"
            }
          }
        },
        "required": [
          "profile",
          "teams"
        ]
      },
      "TD_Membership": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "member": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "team": {
            "$ref": "#/components/schemas/TD_Team"
          },
          "role": {
            "$ref": "#/components/schemas/TD_Role"
          },
          "lead": {
            "type": "boolean"
          },
          "manager": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "since": {
            "nullable": true,
            "type": "string",
            "format": "full-date"
          },
          "till": {
            "nullable": true,
            "type": "string",
            "format": "full-date"
          },
          "activeSince": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "activeTill": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "requiresApproval": {
            "type": "boolean"
          },
          "archived": {
            "type": "boolean"
          },
          "editFor": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_Membership"
          },
          "pendingEdit": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_Membership"
          },
          "approver": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "customFields": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CFValue"
            }
          }
        },
        "required": [
          "id",
          "member",
          "team",
          "role",
          "lead",
          "requiresApproval",
          "archived",
          "customFields"
        ]
      },
      "TD_MergedEvent": {
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "first": {
                  "$ref": "#/components/schemas/TD_Membership"
                },
                "second": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "required": [
                "first",
                "second"
              ]
            }
          },
          "profile": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          }
        },
        "required": [
          "events",
          "profile"
        ]
      },
      "TD_ProfileEmail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "blocked": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "email"
        ]
      },
      "TD_ProfileLanguage": {
        "type": "object",
        "properties": {
          "name": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_ProfileName"
          },
          "language": {
            "$ref": "#/components/schemas/TD_Language"
          },
          "languageCode": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "language"
        ]
      },
      "TD_ProfileName": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          }
        },
        "required": [
          "firstName",
          "lastName"
        ]
      },
      "TD_ProfileWorkingDays": {
        "type": "object",
        "properties": {
          "profile": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "workingDays": {
            "$ref": "#/components/schemas/TD_WorkingDays"
          }
        },
        "required": [
          "profile",
          "workingDays"
        ]
      },
      "TD_Role": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "parent": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_Role"
          },
          "archived": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "name",
          "archived"
        ]
      },
      "TD_Stats": {
        "type": "object",
        "properties": {
          "totalMembers": {
            "type": "integer",
            "format": "int32"
          },
          "teams": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "first": {
                  "$ref": "#/components/schemas/TD_Team"
                },
                "second": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "required": [
                "first",
                "second"
              ]
            }
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "first": {
                  "$ref": "#/components/schemas/TD_Role"
                },
                "second": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "required": [
                "first",
                "second"
              ]
            }
          },
          "locations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "first": {
                  "$ref": "#/components/schemas/TD_Location"
                },
                "second": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "required": [
                "first",
                "second"
              ]
            }
          }
        },
        "required": [
          "totalMembers",
          "teams",
          "roles",
          "locations"
        ]
      },
      "TD_Team": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "parent": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_Team"
          },
          "emails": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "channelId": {
            "nullable": true,
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "disbanded": {
            "nullable": true,
            "type": "boolean"
          },
          "disbandedAt": {
            "nullable": true,
            "type": "string",
            "format": "full-date"
          },
          "externalId": {
            "nullable": true,
            "type": "string"
          },
          "defaultManager": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "memberships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_Membership"
            }
          },
          "customFields": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CFValue"
            }
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "archived",
          "memberships",
          "customFields"
        ]
      },
      "TD_WorkingDays": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "dateStart": {
            "nullable": true,
            "type": "string",
            "format": "full-date"
          },
          "dateEnd": {
            "nullable": true,
            "type": "string",
            "format": "full-date"
          },
          "workingDaysSpec": {
            "$ref": "#/components/schemas/WorkingDaysSpec"
          }
        },
        "required": [
          "id",
          "workingDaysSpec"
        ]
      },
      "TabIndentedLinesBodyIn": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          }
        },
        "required": [
          "text"
        ]
      },
      "TargetCFInputValue": {
        "type": "object",
        "properties": {
          "target": {
            "nullable": true,
            "$ref": "#/components/schemas/TargetIdentifier"
          }
        }
      },
      "TargetCFType": {
        "type": "object",
        "properties": {}
      },
      "TargetCFValue": {
        "type": "object",
        "properties": {
          "target": {
            "nullable": true,
            "$ref": "#/components/schemas/DeployTargetRecord"
          }
        }
      },
      "TeamAddedItemDetails": {
        "type": "object",
        "properties": {
          "team": {
            "$ref": "#/components/schemas/TD_Team"
          }
        },
        "required": [
          "team"
        ]
      },
      "TeamCFInputValue": {
        "type": "object",
        "properties": {
          "team": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "TeamCFType": {
        "type": "object",
        "properties": {}
      },
      "TeamCFValue": {
        "type": "object",
        "properties": {
          "team": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_Team"
          }
        }
      },
      "TeamEvent": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/KMetaMod"
          },
          "team": {
            "$ref": "#/components/schemas/TD_Team"
          }
        },
        "required": [
          "meta",
          "team"
        ]
      },
      "TeamMembershipEvent": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/KMetaMod"
          },
          "membership": {
            "$ref": "#/components/schemas/TD_Membership"
          },
          "team": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "$ref": "#/components/schemas/TD_Team"
              },
              "new": {
                "$ref": "#/components/schemas/TD_Team"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "role": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "$ref": "#/components/schemas/TD_Role"
              },
              "new": {
                "$ref": "#/components/schemas/TD_Role"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "lead": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "boolean"
              },
              "new": {
                "type": "boolean"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "manager": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "$ref": "#/components/schemas/TD_MemberProfile"
              },
              "new": {
                "$ref": "#/components/schemas/TD_MemberProfile"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "since": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "string",
                "format": "date-time"
              },
              "new": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "till": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "string",
                "format": "date-time"
              },
              "new": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "deleted": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "type": "boolean"
              },
              "new": {
                "type": "boolean"
              }
            },
            "required": [
              "old",
              "new"
            ]
          },
          "approvedBy": {
            "nullable": true,
            "type": "object",
            "properties": {
              "old": {
                "$ref": "#/components/schemas/TD_MemberProfile"
              },
              "new": {
                "$ref": "#/components/schemas/TD_MemberProfile"
              }
            },
            "required": [
              "old",
              "new"
            ]
          }
        },
        "required": [
          "meta",
          "membership"
        ]
      },
      "TeamPermissionTarget": {
        "type": "object",
        "properties": {
          "team": {
            "type": "string"
          }
        },
        "required": [
          "team"
        ]
      },
      "TestFailedDTO": {
        "type": "object",
        "properties": {}
      },
      "TextDocument": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "resetCounter": {
            "type": "integer",
            "format": "int64"
          },
          "version": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "$ref": "#/components/schemas/DraftDocumentType"
          },
          "text": {
            "type": "string"
          },
          "model": {
            "nullable": true,
            "type": "string"
          },
          "attachments": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentInfo"
            }
          }
        },
        "required": [
          "id",
          "resetCounter",
          "type",
          "text"
        ]
      },
      "TextDocumentBodyConvertTypeIn": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DraftDocumentType"
          }
        },
        "required": [
          "type"
        ]
      },
      "TextDocumentBodyCreateInBase": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/TextDocumentBodyCreateTypedIn"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "TextDocumentBodyCreateTypedIn": {
        "type": "object",
        "properties": {
          "docContent": {
            "$ref": "#/components/schemas/TextDocumentContent"
          }
        },
        "required": [
          "docContent"
        ]
      },
      "TextDocumentBodyInfo": {
        "type": "object",
        "properties": {
          "textDocument": {
            "$ref": "#/components/schemas/TextDocumentRecord"
          }
        },
        "required": [
          "textDocument"
        ]
      },
      "TextDocumentBodyUpdateIn": {
        "type": "object",
        "properties": {
          "docContent": {
            "$ref": "#/components/schemas/TextDocumentContent"
          }
        },
        "required": [
          "docContent"
        ]
      },
      "TextDocumentBodyUpdateInBase": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/TextDocumentBodyConvertTypeIn"
          },
          {
            "$ref": "#/components/schemas/TextDocumentBodyUpdateIn"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "TextDocumentContent": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/MdTextDocumentContent"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "TextDocumentRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/DraftDocumentType"
          }
        },
        "required": [
          "id",
          "archived",
          "type"
        ]
      },
      "TextRange": {
        "type": "object",
        "properties": {
          "start": {
            "type": "integer",
            "format": "int32"
          },
          "length": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "start",
          "length"
        ]
      },
      "ThrottledLogin": {
        "type": "object",
        "properties": {
          "login": {
            "type": "string"
          },
          "throttledUntil": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "login",
          "throttledUntil"
        ]
      },
      "TimeInterval": {
        "type": "object",
        "properties": {
          "since": {
            "$ref": "#/components/schemas/TimeOfDay"
          },
          "till": {
            "$ref": "#/components/schemas/TimeOfDay"
          }
        },
        "required": [
          "since",
          "till"
        ]
      },
      "TimeOfDay": {
        "type": "object",
        "properties": {
          "hours": {
            "type": "integer",
            "format": "int32"
          },
          "minutes": {
            "type": "integer",
            "format": "int32"
          },
          "seconds": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "hours",
          "minutes"
        ]
      },
      "TimeOutDTO": {
        "type": "object",
        "properties": {}
      },
      "TodayBillingReport": {
        "type": "object",
        "properties": {
          "plan": {
            "$ref": "#/components/schemas/PurchasedBillingPlan"
          },
          "activeUsers": {
            "type": "integer",
            "format": "int32"
          },
          "userUsage": {
            "type": "integer",
            "format": "int32"
          },
          "userCost": {
            "type": "number",
            "format": "double"
          },
          "storageAllocationB": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "storageTotalUsage": {
            "type": "integer",
            "format": "int64"
          },
          "storageCost": {
            "type": "number",
            "format": "double"
          },
          "bandwidthTotalUsage": {
            "type": "integer",
            "format": "int64"
          },
          "bandwidthCost": {
            "type": "number",
            "format": "double"
          },
          "ciUsage": {
            "type": "integer",
            "format": "int64"
          },
          "ciCost": {
            "type": "number",
            "format": "double"
          },
          "appUsage": {
            "type": "integer",
            "format": "int64"
          },
          "chatUsage": {
            "type": "integer",
            "format": "int64"
          },
          "totalCost": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "plan",
          "activeUsers",
          "userUsage",
          "userCost",
          "storageTotalUsage",
          "storageCost",
          "bandwidthTotalUsage",
          "bandwidthCost",
          "ciUsage",
          "ciCost",
          "appUsage",
          "chatUsage",
          "totalCost"
        ]
      },
      "TodoContent": {
        "type": "object",
        "properties": {
          "originalText": {
            "type": "string"
          },
          "link": {
            "nullable": true,
            "type": "string"
          },
          "kind": {
            "nullable": true,
            "$ref": "#/components/schemas/TodoItemContentKind"
          },
          "principal": {
            "nullable": true,
            "$ref": "#/components/schemas/CPrincipal"
          },
          "time": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "text": {
            "type": "string"
          },
          "extId": {
            "nullable": true,
            "type": "string"
          },
          "unfurls": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Unfurl"
            }
          }
        },
        "required": [
          "originalText",
          "text"
        ]
      },
      "TodoItemContent": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/TodoContent"
          },
          {
            "$ref": "#/components/schemas/TodoItemContentText"
          },
          {
            "$ref": "#/components/schemas/TodoItemContentMdText"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "TodoItemContentMdText": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "mdMarkup": {
            "$ref": "#/components/schemas/MdMarkup"
          }
        },
        "required": [
          "text",
          "mdMarkup"
        ]
      },
      "TodoItemContentText": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          }
        },
        "required": [
          "text"
        ]
      },
      "TodoItemRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "content": {
            "$ref": "#/components/schemas/TodoItemContent"
          },
          "_status": {
            "type": "string"
          },
          "dueDate": {
            "nullable": true,
            "type": "string",
            "format": "full-date"
          }
        },
        "required": [
          "id",
          "archived",
          "created",
          "updated",
          "content",
          "_status"
        ]
      },
      "TodoItemUnfurlContext": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "todoItemId": {
            "type": "string"
          }
        },
        "required": [
          "userId",
          "todoItemId"
        ]
      },
      "Topic": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "parent": {
            "nullable": true,
            "$ref": "#/components/schemas/Topic"
          },
          "project": {
            "nullable": true,
            "$ref": "#/components/schemas/PR_Project"
          },
          "responsible": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_MemberProfile"
            }
          }
        },
        "required": [
          "id",
          "archived",
          "name",
          "responsible"
        ]
      },
      "TrackedBranchesInReview": {
        "type": "object",
        "properties": {
          "repository": {
            "type": "string"
          },
          "branches": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BranchInfo"
            }
          }
        },
        "required": [
          "repository",
          "branches"
        ]
      },
      "TrustedCertificate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "alias": {
            "type": "string"
          },
          "data": {
            "type": "string"
          },
          "info": {
            "$ref": "#/components/schemas/CertificateInfo"
          },
          "archived": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "alias",
          "data",
          "info",
          "archived"
        ]
      },
      "TwoFactorAuthenticationSecret": {
        "type": "object",
        "properties": {
          "secretKey": {
            "type": "string"
          },
          "qrCode": {
            "$ref": "#/components/schemas/QRCode"
          },
          "scratchCodes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "required": [
          "secretKey",
          "qrCode",
          "scratchCodes"
        ]
      },
      "TypographySettings": {
        "type": "object",
        "properties": {
          "fontLigaturesInRegularText": {
            "nullable": true,
            "type": "boolean"
          },
          "fontLigaturesInCodeSnippets": {
            "nullable": true,
            "type": "boolean"
          },
          "limitLineLengthInChatMessages": {
            "nullable": true,
            "type": "boolean"
          }
        }
      },
      "UA_JetBrainsUserAgreement": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/UA_Version"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "content",
          "version",
          "updated"
        ]
      },
      "UA_JetBrainsUserAgreementStatus": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/UA_JetBrainsUserAgreementStatus.Accepted"
          },
          {
            "$ref": "#/components/schemas/UA_JetBrainsUserAgreementStatus.NotAccepted"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "UA_JetBrainsUserAgreementStatus.Accepted": {
        "type": "object",
        "properties": {
          "profile": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "version": {
            "$ref": "#/components/schemas/UA_Version"
          },
          "accepted": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "profile",
          "version",
          "accepted"
        ]
      },
      "UA_JetBrainsUserAgreementStatus.NotAccepted": {
        "type": "object",
        "properties": {
          "profile": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          }
        },
        "required": [
          "profile"
        ]
      },
      "UA_UserAgreement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/UA_Version"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "content",
          "version",
          "updated"
        ]
      },
      "UA_UserAgreementStatus": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/UA_UserAgreementStatus.Accepted"
          },
          {
            "$ref": "#/components/schemas/UA_UserAgreementStatus.NotAccepted"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "UA_UserAgreementStatus.Accepted": {
        "type": "object",
        "properties": {
          "profile": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "userAgreement": {
            "$ref": "#/components/schemas/UA_UserAgreement"
          },
          "accepted": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "profile",
          "userAgreement",
          "accepted"
        ]
      },
      "UA_UserAgreementStatus.NotAccepted": {
        "type": "object",
        "properties": {
          "profile": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          }
        },
        "required": [
          "profile"
        ]
      },
      "UA_Version": {
        "type": "object",
        "properties": {
          "major": {
            "type": "integer",
            "format": "int32"
          },
          "minor": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "major",
          "minor"
        ]
      },
      "Unfurl": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "link": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "details": {
            "nullable": true,
            "$ref": "#/components/schemas/UnfurlDetails"
          },
          "sitename": {
            "nullable": true,
            "type": "string"
          },
          "image": {
            "nullable": true,
            "type": "string"
          },
          "imageMime": {
            "nullable": true,
            "type": "string"
          },
          "imageWidth": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "imageHeight": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "video": {
            "nullable": true,
            "type": "string"
          },
          "videoIFrame": {
            "nullable": true,
            "type": "string"
          },
          "videoMime": {
            "nullable": true,
            "type": "string"
          },
          "videoHeight": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "videoWidth": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "favicon": {
            "nullable": true,
            "type": "string"
          },
          "alwaysInline": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "title",
          "link",
          "text"
        ]
      },
      "UnfurlActionPayload": {
        "type": "object",
        "properties": {
          "actionId": {
            "type": "string"
          },
          "actionValue": {
            "type": "string"
          },
          "link": {
            "type": "string"
          },
          "context": {
            "$ref": "#/components/schemas/ApplicationUnfurlContext"
          },
          "clientId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "verificationToken": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "actionId",
          "actionValue",
          "link",
          "context",
          "clientId",
          "userId"
        ]
      },
      "UnfurlAttachment": {
        "type": "object",
        "properties": {
          "unfurl": {
            "$ref": "#/components/schemas/Unfurl"
          },
          "id": {
            "type": "string"
          },
          "onlyVisibleToYou": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "unfurl",
          "id"
        ]
      },
      "UnfurlDeployTargetDetails": {
        "type": "object",
        "properties": {
          "targetRef": {
            "$ref": "#/components/schemas/DeployTargetRecord"
          },
          "targetName": {
            "nullable": true,
            "type": "string"
          },
          "showLinkIcon": {
            "nullable": true,
            "type": "boolean"
          },
          "skipDetailsRender": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "targetRef"
        ]
      },
      "UnfurlDeploymentDetails": {
        "type": "object",
        "properties": {
          "deploymentRef": {
            "$ref": "#/components/schemas/DeploymentRecord"
          },
          "showLinkIcon": {
            "nullable": true,
            "type": "boolean"
          },
          "showDetails": {
            "nullable": true,
            "type": "boolean"
          },
          "showStatus": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "deploymentRef"
        ]
      },
      "UnfurlDetails": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/UnfurlDetailsCodeReview"
          },
          {
            "$ref": "#/components/schemas/UnfurlDetailsPackageDetails"
          },
          {
            "$ref": "#/components/schemas/AutomationJobExecutionUnfurlDetails"
          },
          {
            "$ref": "#/components/schemas/DocumentHistoryUnfurlDetails"
          },
          {
            "$ref": "#/components/schemas/UnfurlDeploymentDetails"
          },
          {
            "$ref": "#/components/schemas/UnfurlDetailsMeeting"
          },
          {
            "$ref": "#/components/schemas/UnfurlDetailsRole"
          },
          {
            "$ref": "#/components/schemas/UnfurlDetailsApplication"
          },
          {
            "$ref": "#/components/schemas/UnfurlDetailsShortCommit"
          },
          {
            "$ref": "#/components/schemas/UnfurlDetailsArticle"
          },
          {
            "$ref": "#/components/schemas/UnfurlDetailsCommit"
          },
          {
            "$ref": "#/components/schemas/AutomationJobUnfurlDetails"
          },
          {
            "$ref": "#/components/schemas/UnfurlDetailsProfile"
          },
          {
            "$ref": "#/components/schemas/UnfurlDetailsDateTimeRange"
          },
          {
            "$ref": "#/components/schemas/UnfurlDetailsChatLink"
          },
          {
            "$ref": "#/components/schemas/ChannelItemSnapshot"
          },
          {
            "$ref": "#/components/schemas/UnfurlDetailsFolder"
          },
          {
            "$ref": "#/components/schemas/UnfurlDetailsIssueStatus"
          },
          {
            "$ref": "#/components/schemas/UnfurlDetailsSprint"
          },
          {
            "$ref": "#/components/schemas/UnfurlDetailsIssueTag"
          },
          {
            "$ref": "#/components/schemas/UnfurlDetailsSnapshotDiff"
          },
          {
            "$ref": "#/components/schemas/UnfurlDetailsMC"
          },
          {
            "$ref": "#/components/schemas/UnfurlDeployTargetDetails"
          },
          {
            "$ref": "#/components/schemas/UnfurlDetailsIssueTopic"
          },
          {
            "$ref": "#/components/schemas/UnfurlDetailsDateTime"
          },
          {
            "$ref": "#/components/schemas/UnfurlDetailsDraft"
          },
          {
            "$ref": "#/components/schemas/UnfurlDetailsChecklist"
          },
          {
            "$ref": "#/components/schemas/UnfurlDetailsCodeSnippet"
          },
          {
            "$ref": "#/components/schemas/UnfurlDetailsRepositoryBranch"
          },
          {
            "$ref": "#/components/schemas/UnfurlDetailsProject"
          },
          {
            "$ref": "#/components/schemas/UnfurlDetailsImage"
          },
          {
            "$ref": "#/components/schemas/UnfurlDetailsIssue"
          },
          {
            "$ref": "#/components/schemas/UnfurlDetailsTeam"
          },
          {
            "$ref": "#/components/schemas/UnfurlDetailsChat"
          },
          {
            "$ref": "#/components/schemas/UnfurlDetailsLocation"
          },
          {
            "$ref": "#/components/schemas/UnfurlDetailsTextDiff"
          },
          {
            "$ref": "#/components/schemas/CallSessionUnfurlDetails"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "UnfurlDetailsApplication": {
        "type": "object",
        "properties": {
          "app": {
            "$ref": "#/components/schemas/ES_App"
          }
        },
        "required": [
          "app"
        ]
      },
      "UnfurlDetailsArticle": {
        "type": "object",
        "properties": {
          "article": {
            "$ref": "#/components/schemas/ArticleRecord"
          },
          "content": {
            "nullable": true,
            "$ref": "#/components/schemas/ArticleContentRecord"
          },
          "channel": {
            "nullable": true,
            "$ref": "#/components/schemas/ArticleChannelRecord"
          },
          "details": {
            "nullable": true,
            "$ref": "#/components/schemas/ArticleDetailsRecord"
          }
        },
        "required": [
          "article"
        ]
      },
      "UnfurlDetailsChat": {
        "type": "object",
        "properties": {
          "channel": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "channel",
          "title"
        ]
      },
      "UnfurlDetailsChatLink": {
        "type": "object",
        "properties": {
          "contactKey": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "contactKey",
          "title"
        ]
      },
      "UnfurlDetailsChecklist": {
        "type": "object",
        "properties": {
          "checklist": {
            "$ref": "#/components/schemas/Checklist"
          }
        },
        "required": [
          "checklist"
        ]
      },
      "UnfurlDetailsCodeReview": {
        "type": "object",
        "properties": {
          "review": {
            "$ref": "#/components/schemas/CodeReviewRecord"
          },
          "withIcon": {
            "nullable": true,
            "type": "boolean"
          },
          "withBranchPair": {
            "type": "boolean"
          },
          "defaultBranchInRepo": {
            "nullable": true,
            "type": "string"
          },
          "hideIfCannotResolve": {
            "nullable": true,
            "type": "boolean"
          },
          "reviewState": {
            "nullable": true,
            "$ref": "#/components/schemas/CodeReviewState"
          },
          "isMerged": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "review",
          "withBranchPair"
        ]
      },
      "UnfurlDetailsCodeSnippet": {
        "type": "object",
        "properties": {
          "anchor": {
            "$ref": "#/components/schemas/CodeSnippetAnchor"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeLine"
            }
          }
        },
        "required": [
          "anchor",
          "lines"
        ]
      },
      "UnfurlDetailsCommit": {
        "type": "object",
        "properties": {
          "project": {
            "$ref": "#/components/schemas/PR_Project"
          },
          "repository": {
            "type": "string"
          },
          "repositoryId": {
            "nullable": true,
            "type": "string"
          },
          "commitId": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "messageUnfurls": {
            "nullable": true,
            "$ref": "#/components/schemas/CommitMessageUnfurlsRecord"
          },
          "commitDate": {
            "type": "string",
            "format": "date-time"
          },
          "authorDate": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "author": {
            "$ref": "#/components/schemas/GitAuthorInfo"
          },
          "authorProfile": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "hideAuthorAndDate": {
            "nullable": true,
            "type": "boolean"
          },
          "withBranchTags": {
            "nullable": true,
            "type": "boolean"
          },
          "reviewId": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "project",
          "repository",
          "commitId",
          "message",
          "commitDate",
          "author"
        ]
      },
      "UnfurlDetailsDateTime": {
        "type": "object",
        "properties": {
          "utcMilliseconds": {
            "type": "integer",
            "format": "int64"
          },
          "params": {
            "nullable": true,
            "$ref": "#/components/schemas/DateTimeViewParams"
          }
        },
        "required": [
          "utcMilliseconds"
        ]
      },
      "UnfurlDetailsDateTimeRange": {
        "type": "object",
        "properties": {
          "since": {
            "type": "integer",
            "format": "int64"
          },
          "till": {
            "type": "integer",
            "format": "int64"
          },
          "params": {
            "nullable": true,
            "$ref": "#/components/schemas/DateTimeViewParams"
          }
        },
        "required": [
          "since",
          "till"
        ]
      },
      "UnfurlDetailsDraft": {
        "type": "object",
        "properties": {
          "draft": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "document": {
            "nullable": true,
            "$ref": "#/components/schemas/Document"
          },
          "strikeThrough": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "draft",
          "title"
        ]
      },
      "UnfurlDetailsFolder": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "root": {
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "root"
        ]
      },
      "UnfurlDetailsImage": {
        "type": "object",
        "properties": {
          "icon": {
            "nullable": true,
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "image": {
            "$ref": "#/components/schemas/ImageAttachment"
          }
        },
        "required": [
          "title",
          "image"
        ]
      },
      "UnfurlDetailsIssue": {
        "type": "object",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/Issue"
          },
          "strikeThrough": {
            "nullable": true,
            "type": "boolean"
          },
          "compact": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "issue"
        ]
      },
      "UnfurlDetailsIssueStatus": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/IssueStatus"
          }
        },
        "required": [
          "status"
        ]
      },
      "UnfurlDetailsIssueTag": {
        "type": "object",
        "properties": {
          "tag": {
            "$ref": "#/components/schemas/PlanningTag"
          },
          "strikeThrough": {
            "type": "boolean"
          }
        },
        "required": [
          "tag",
          "strikeThrough"
        ]
      },
      "UnfurlDetailsIssueTopic": {
        "type": "object",
        "properties": {
          "topic": {
            "$ref": "#/components/schemas/Topic"
          },
          "strikeThrough": {
            "type": "boolean"
          }
        },
        "required": [
          "topic",
          "strikeThrough"
        ]
      },
      "UnfurlDetailsLocation": {
        "type": "object",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/TD_Location"
          },
          "strikeThrough": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "location"
        ]
      },
      "UnfurlDetailsMC": {
        "type": "object",
        "properties": {
          "message": {
            "$ref": "#/components/schemas/MCMessage"
          },
          "inlineUnfurls": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentInfo"
            }
          }
        },
        "required": [
          "message"
        ]
      },
      "UnfurlDetailsMeeting": {
        "type": "object",
        "properties": {
          "meeting": {
            "$ref": "#/components/schemas/DTO_Meeting"
          },
          "compact": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "meeting"
        ]
      },
      "UnfurlDetailsPackageDetails": {
        "type": "object",
        "properties": {
          "repoRef": {
            "$ref": "#/components/schemas/ProjectPackageRepository"
          },
          "packageName": {
            "nullable": true,
            "type": "string"
          },
          "version": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "repoRef"
        ]
      },
      "UnfurlDetailsProfile": {
        "type": "object",
        "properties": {
          "profile": {
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "strikeThrough": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "profile"
        ]
      },
      "UnfurlDetailsProject": {
        "type": "object",
        "properties": {
          "project": {
            "$ref": "#/components/schemas/PR_Project"
          },
          "strikeThrough": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "project"
        ]
      },
      "UnfurlDetailsRepositoryBranch": {
        "type": "object",
        "properties": {
          "project": {
            "$ref": "#/components/schemas/PR_Project"
          },
          "repository": {
            "type": "string"
          },
          "branchHead": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean"
          },
          "isDefault": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "project",
          "repository",
          "branchHead",
          "deleted"
        ]
      },
      "UnfurlDetailsRole": {
        "type": "object",
        "properties": {
          "role": {
            "$ref": "#/components/schemas/TD_Role"
          }
        },
        "required": [
          "role"
        ]
      },
      "UnfurlDetailsShortCommit": {
        "type": "object",
        "properties": {
          "project": {
            "$ref": "#/components/schemas/PR_Project"
          },
          "repository": {
            "type": "string"
          },
          "commitId": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "strikeThrough": {
            "type": "boolean"
          }
        },
        "required": [
          "project",
          "repository",
          "commitId",
          "message",
          "strikeThrough"
        ]
      },
      "UnfurlDetailsSnapshotDiff": {
        "type": "object",
        "properties": {
          "snapshotId": {
            "type": "string"
          },
          "baseSnapshotId": {
            "type": "string"
          }
        },
        "required": [
          "snapshotId",
          "baseSnapshotId"
        ]
      },
      "UnfurlDetailsSprint": {
        "type": "object",
        "properties": {
          "project": {
            "$ref": "#/components/schemas/PR_Project"
          },
          "sprint": {
            "$ref": "#/components/schemas/SprintRecord"
          }
        },
        "required": [
          "project",
          "sprint"
        ]
      },
      "UnfurlDetailsTeam": {
        "type": "object",
        "properties": {
          "team": {
            "$ref": "#/components/schemas/TD_Team"
          },
          "strikeThrough": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "team"
        ]
      },
      "UnfurlDetailsTextDiff": {
        "type": "object",
        "properties": {
          "textBefore": {
            "type": "string"
          },
          "textAfter": {
            "type": "string"
          }
        },
        "required": [
          "textBefore",
          "textAfter"
        ]
      },
      "UnfurlsBlockListEntry": {
        "type": "object",
        "properties": {
          "link": {
            "type": "string"
          },
          "prefix": {
            "type": "boolean"
          },
          "global": {
            "type": "boolean"
          }
        },
        "required": [
          "link",
          "prefix",
          "global"
        ]
      },
      "UpdateErrorDTO": {
        "type": "object",
        "properties": {
          "message": {
            "nullable": true,
            "type": "string"
          },
          "errorType": {
            "$ref": "#/components/schemas/WorkerError"
          }
        },
        "required": [
          "errorType"
        ]
      },
      "UrlCFType": {
        "type": "object",
        "properties": {}
      },
      "UrlCFValue": {
        "type": "object",
        "properties": {
          "href": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "VaultConnectionRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "namespace": {
            "nullable": true,
            "type": "string"
          },
          "vaultNamespace": {
            "nullable": true,
            "type": "string"
          },
          "appRoleEndpointPath": {
            "type": "string"
          },
          "appRoleId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "$ref": "#/components/schemas/CPrincipal"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/CPrincipal"
          },
          "deleted": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "projectId",
          "url",
          "appRoleEndpointPath",
          "appRoleId",
          "createdAt",
          "createdBy",
          "updatedAt",
          "updatedBy",
          "deleted"
        ]
      },
      "VcsCFScope": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/VcsCFScope.Project"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "VcsCFScope.Project": {
        "type": "object",
        "properties": {
          "project": {
            "$ref": "#/components/schemas/PR_Project"
          }
        },
        "required": [
          "project"
        ]
      },
      "VcsCFScopeInput": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/VcsCFScopeInput.Project"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "VcsCFScopeInput.Project": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string"
          }
        },
        "required": [
          "projectId"
        ]
      },
      "VcsCommitCFInputValue": {
        "type": "object",
        "properties": {
          "commit": {
            "nullable": true,
            "$ref": "#/components/schemas/CFCommitIdentifier"
          }
        }
      },
      "VcsCommitCFParameters": {
        "type": "object",
        "properties": {
          "vcsCFScope": {
            "$ref": "#/components/schemas/VcsCFScope"
          }
        },
        "required": [
          "vcsCFScope"
        ]
      },
      "VcsCommitCFParametersInput": {
        "type": "object",
        "properties": {
          "vcsCFScope": {
            "$ref": "#/components/schemas/VcsCFScopeInput"
          }
        },
        "required": [
          "vcsCFScope"
        ]
      },
      "VcsCommitCFType": {
        "type": "object",
        "properties": {}
      },
      "VcsCommitCFValue": {
        "type": "object",
        "properties": {
          "commit": {
            "nullable": true,
            "$ref": "#/components/schemas/CFCommitInfoBase"
          }
        }
      },
      "VcsCommitListCFInputValue": {
        "type": "object",
        "properties": {
          "commits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CFCommitIdentifier"
            }
          }
        },
        "required": [
          "commits"
        ]
      },
      "VcsCommitListCFType": {
        "type": "object",
        "properties": {}
      },
      "VcsCommitListCFValue": {
        "type": "object",
        "properties": {
          "commits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CFCommitInfoBase"
            }
          }
        },
        "required": [
          "commits"
        ]
      },
      "VideoAttachment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "width": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "height": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          },
          "sizeBytes": {
            "type": "integer",
            "format": "int64"
          },
          "previewBytes": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "id",
          "sizeBytes"
        ]
      },
      "VideoCallChannelItemContent": {
        "type": "object",
        "properties": {
          "session": {
            "$ref": "#/components/schemas/CallSession"
          }
        },
        "required": [
          "session"
        ]
      },
      "VoteGroup": {
        "type": "object",
        "properties": {
          "variantName": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "meVote": {
            "type": "boolean"
          },
          "lastUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TD_MemberProfile"
            }
          },
          "owner": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_MemberProfile"
          }
        },
        "required": [
          "variantName",
          "count",
          "meVote",
          "lastUsers"
        ]
      },
      "WebhookDeliveryStatusDTO": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/WebhookDeliveryStatusDTO.ExpectedHttpClientError"
          },
          {
            "$ref": "#/components/schemas/WebhookDeliveryStatusDTO.FailedDelivery"
          },
          {
            "$ref": "#/components/schemas/WebhookDeliveryStatusDTO.InternalError"
          },
          {
            "$ref": "#/components/schemas/WebhookDeliveryStatusDTO.Successful"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "WebhookDeliveryStatusDTO.ExpectedHttpClientError": {
        "type": "object",
        "properties": {
          "clientError": {
            "$ref": "#/components/schemas/AppMessageDeliveryClientErrorDTO"
          },
          "deliveryId": {
            "type": "string"
          },
          "sentTime": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "clientError",
          "deliveryId",
          "sentTime"
        ]
      },
      "WebhookDeliveryStatusDTO.FailedDelivery": {
        "type": "object",
        "properties": {
          "deliveryId": {
            "type": "string"
          },
          "responseCode": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "sentTime": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "deliveryId",
          "responseCode",
          "message",
          "sentTime"
        ]
      },
      "WebhookDeliveryStatusDTO.InternalError": {
        "type": "object",
        "properties": {
          "deliveryId": {
            "type": "string"
          },
          "sentTime": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "deliveryId",
          "sentTime"
        ]
      },
      "WebhookDeliveryStatusDTO.Successful": {
        "type": "object",
        "properties": {
          "deliveryId": {
            "type": "string"
          },
          "responseCode": {
            "type": "integer",
            "format": "int32"
          },
          "sentTime": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "deliveryId",
          "responseCode",
          "sentTime"
        ]
      },
      "WebhookEvent": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/TeamEvent"
          },
          {
            "$ref": "#/components/schemas/ProjectEvent"
          },
          {
            "$ref": "#/components/schemas/DocumentMetaWebhookEvent"
          },
          {
            "$ref": "#/components/schemas/AutomationJobEvent"
          },
          {
            "$ref": "#/components/schemas/FeatureFlagWebhookEvent"
          },
          {
            "$ref": "#/components/schemas/TeamMembershipEvent"
          },
          {
            "$ref": "#/components/schemas/LocationEvent"
          },
          {
            "$ref": "#/components/schemas/ApplicationWebhookEvent"
          },
          {
            "$ref": "#/components/schemas/DocumentWebhookEvent"
          },
          {
            "$ref": "#/components/schemas/ApplicationUnfurlTargetWebhookEvent"
          },
          {
            "$ref": "#/components/schemas/AbsenceApprovalWebhookEvent"
          },
          {
            "$ref": "#/components/schemas/MeetingWebhookEvent"
          },
          {
            "$ref": "#/components/schemas/ChatMessageDeletedEvent"
          },
          {
            "$ref": "#/components/schemas/CodeReviewWebhookEvent"
          },
          {
            "$ref": "#/components/schemas/ApplicationAuthorizationRequestedEvent"
          },
          {
            "$ref": "#/components/schemas/SRepoHeadsWebhookEvent"
          },
          {
            "$ref": "#/components/schemas/ChannelEvent"
          },
          {
            "$ref": "#/components/schemas/DeploymentWebhookEvent"
          },
          {
            "$ref": "#/components/schemas/AbsenceWebhookEvent"
          },
          {
            "$ref": "#/components/schemas/SPackageRepositoryWebhookEvent"
          },
          {
            "$ref": "#/components/schemas/ApplicationSshKeyWebhookEvent"
          },
          {
            "$ref": "#/components/schemas/BlogWebhookEvent"
          },
          {
            "$ref": "#/components/schemas/ChatMessageUpdatedEvent"
          },
          {
            "$ref": "#/components/schemas/DocumentEditorsChangedEvent"
          },
          {
            "$ref": "#/components/schemas/EmailBouncedEvent"
          },
          {
            "$ref": "#/components/schemas/ApplicationAuthorizedWebhookEvent"
          },
          {
            "$ref": "#/components/schemas/ProfileOrganizationEvent"
          },
          {
            "$ref": "#/components/schemas/SRepoCommitsWebhookEvent"
          },
          {
            "$ref": "#/components/schemas/PingWebhookEvent"
          },
          {
            "$ref": "#/components/schemas/ApplicationUnfurlQueueItemsCreatedEvent"
          },
          {
            "$ref": "#/components/schemas/ChatMessageCreatedEvent"
          },
          {
            "$ref": "#/components/schemas/IssueWebhookEvent"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "WebhookRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "app": {
            "$ref": "#/components/schemas/ES_App"
          },
          "subscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionDTO"
            }
          },
          "name": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "useAppEndpoint": {
            "type": "boolean"
          },
          "endpoint": {
            "$ref": "#/components/schemas/EndpointDTO"
          },
          "useAppEndpointAuth": {
            "type": "boolean"
          },
          "endpointAuth": {
            "$ref": "#/components/schemas/EndpointAuthDTO"
          },
          "enabled": {
            "type": "boolean"
          },
          "acceptedHttpResponseCodes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "doRetries": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "archived",
          "app",
          "subscriptions",
          "name",
          "useAppEndpoint",
          "endpoint",
          "useAppEndpointAuth",
          "endpointAuth",
          "enabled",
          "acceptedHttpResponseCodes",
          "doRetries"
        ]
      },
      "WebhookRequestPayload": {
        "type": "object",
        "properties": {
          "verificationToken": {
            "nullable": true,
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "webhookId": {
            "type": "string"
          },
          "payload": {
            "$ref": "#/components/schemas/WebhookEvent"
          }
        },
        "required": [
          "clientId",
          "webhookId",
          "payload"
        ]
      },
      "WeekDayTimeInterval": {
        "type": "object",
        "properties": {
          "day": {
            "type": "integer",
            "format": "int32"
          },
          "checked": {
            "type": "boolean"
          },
          "interval": {
            "$ref": "#/components/schemas/TimeInterval"
          }
        },
        "required": [
          "day",
          "checked",
          "interval"
        ]
      },
      "Workday": {
        "type": "object",
        "properties": {
          "weekday": {
            "type": "string"
          },
          "working": {
            "type": "boolean"
          },
          "hours": {
            "type": "integer",
            "format": "int32"
          },
          "minutes": {
            "nullable": true,
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "weekday",
          "working",
          "hours"
        ]
      },
      "WorkerComputePoolDTO": {
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/components/schemas/ComputePoolKey"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "key",
          "name"
        ]
      },
      "WorkerDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "nullable": true,
            "$ref": "#/components/schemas/TD_MemberProfile"
          },
          "info": {
            "$ref": "#/components/schemas/WorkerInfoDTO"
          },
          "computePool": {
            "$ref": "#/components/schemas/WorkerComputePoolDTO"
          },
          "version": {
            "$ref": "#/components/schemas/WorkerVersionDTO"
          },
          "lastAccessTime": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/WorkerStatus"
          },
          "scope": {
            "$ref": "#/components/schemas/WorkerScope"
          },
          "suspended": {
            "type": "boolean"
          },
          "projects": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PR_Project"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkerTagDTO"
            }
          },
          "stepsStats": {
            "$ref": "#/components/schemas/WorkerStepsStatsDTO"
          },
          "workerStats": {
            "$ref": "#/components/schemas/WorkerStatsDTO"
          },
          "workerCapabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkerCapability"
            }
          },
          "permanentTokenInfo": {
            "nullable": true,
            "$ref": "#/components/schemas/WorkerPermanentTokenInfoDTO"
          }
        },
        "required": [
          "id",
          "name",
          "info",
          "computePool",
          "version",
          "status",
          "scope",
          "suspended",
          "tags",
          "stepsStats",
          "workerStats",
          "workerCapabilities"
        ]
      },
      "WorkerInfoDTO": {
        "type": "object",
        "properties": {
          "osType": {
            "nullable": true,
            "$ref": "#/components/schemas/WorkerOSType"
          },
          "osName": {
            "nullable": true,
            "type": "string"
          },
          "osArch": {
            "nullable": true,
            "type": "string"
          },
          "osVersion": {
            "nullable": true,
            "type": "string"
          },
          "hostname": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "WorkerPermanentTokenInfoDTO": {
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "created"
        ]
      },
      "WorkerStatsDTO": {
        "type": "object",
        "properties": {
          "volumeFreeSpace": {
            "nullable": true,
            "type": "string"
          },
          "diskPressure": {
            "type": "boolean"
          },
          "cpuLimit": {
            "nullable": true,
            "type": "string"
          },
          "memoryLimit": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "diskPressure"
        ]
      },
      "WorkerStepsStatsDTO": {
        "type": "object",
        "properties": {
          "activity": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "first": {
                  "type": "string",
                  "format": "full-date"
                },
                "second": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "required": [
                "first",
                "second"
              ]
            }
          }
        },
        "required": [
          "activity"
        ]
      },
      "WorkerTagDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "WorkerVersionDTO": {
        "type": "object",
        "properties": {
          "workerVersion": {
            "nullable": true,
            "type": "string"
          },
          "updateError": {
            "nullable": true,
            "$ref": "#/components/schemas/UpdateErrorDTO"
          }
        }
      },
      "WorkingDaysSpec": {
        "type": "object",
        "properties": {
          "days": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Workday"
            }
          },
          "workingHours": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WeekDayTimeInterval"
            }
          },
          "notificationHours": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WeekDayTimeInterval"
            }
          },
          "timezone": {
            "nullable": true,
            "$ref": "#/components/schemas/ATimeZone"
          }
        },
        "required": [
          "days"
        ]
      },
      "XScopeApi": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/XScopeApi.All"
          },
          {
            "$ref": "#/components/schemas/XScopeApi.None"
          },
          {
            "$ref": "#/components/schemas/XScopeApi.Scope"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "XScopeApi.All": {
        "type": "object",
        "properties": {}
      },
      "XScopeApi.None": {
        "type": "object",
        "properties": {}
      },
      "XScopeApi.Scope": {
        "type": "object",
        "properties": {
          "grants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/XScopeGrantApi"
            }
          }
        },
        "required": [
          "grants"
        ]
      },
      "XScopeGrantApi": {
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/PermissionContextApi"
          },
          "right": {
            "$ref": "#/components/schemas/RightDescriptorDTO"
          }
        },
        "required": [
          "context",
          "right"
        ]
      },
      "AbsenceListMode": {
        "type": "string",
        "enum": [
          "All",
          "WithAccessibleReasonUnapproved",
          "WithAccessibleReasonAll"
        ]
      },
      "AccessType": {
        "type": "string",
        "enum": [
          "PUBLIC",
          "CONFIDENTIAL",
          "RESTRICTED"
        ]
      },
      "AppConnectionStatus": {
        "type": "string",
        "enum": [
          "CONNECTING",
          "FAILED_TO_CONNECT",
          "RECONNECTING",
          "CONNECTED"
        ]
      },
      "ApplicationType": {
        "type": "string",
        "enum": [
          "Application",
          "InternalApp",
          "MarketplaceApp"
        ]
      },
      "AppsOrdering": {
        "type": "string",
        "enum": [
          "NAME_A_TO_Z",
          "NAME_Z_TO_A",
          "LAST_EDITED"
        ]
      },
      "BuiltInIssueField": {
        "type": "string",
        "enum": [
          "ID",
          "DUE_DATE",
          "ATTACHMENTS",
          "STATUS",
          "TITLE",
          "DESCRIPTION",
          "TAGS",
          "ASSIGNEE",
          "ATTACHMENT_COUNT",
          "SUBITEMS_COUNT"
        ]
      },
      "BusyStatus": {
        "type": "string",
        "enum": [
          "Busy",
          "Free"
        ]
      },
      "CDomainStatus": {
        "type": "string",
        "enum": [
          "AVAILABLE",
          "OCCUPIED",
          "BLOCKED"
        ]
      },
      "ChecklistSorting": {
        "type": "string",
        "enum": [
          "UPDATED",
          "TITLE",
          "FAV_TITLE"
        ]
      },
      "ClientBrowser": {
        "type": "string",
        "enum": [
          "Other",
          "Chrome",
          "Firefox",
          "Safari",
          "Edge",
          "Opera"
        ]
      },
      "ClientOS": {
        "type": "string",
        "enum": [
          "Other",
          "Windows",
          "MacOS",
          "Linux",
          "Android",
          "iOS"
        ]
      },
      "CodeDiscussionSuggestedEditState": {
        "type": "string",
        "enum": [
          "Accepted",
          "Rejected",
          "Deleted"
        ]
      },
      "CodeReviewParticipantRole": {
        "type": "string",
        "enum": [
          "Reviewer",
          "Author",
          "Watcher"
        ]
      },
      "CodeReviewState": {
        "type": "string",
        "enum": [
          "Opened",
          "Closed",
          "Deleted"
        ]
      },
      "CodeReviewStateFilter": {
        "type": "string",
        "enum": [
          "Opened",
          "Closed",
          "RequiresAuthorAttention",
          "NeedsReview",
          "Merged"
        ]
      },
      "ColumnSortOrder": {
        "type": "string",
        "enum": [
          "ASC",
          "DESC"
        ]
      },
      "CommitExecutionStatus": {
        "type": "string",
        "enum": [
          "SCHEDULED",
          "PENDING",
          "READY_TO_START",
          "FAILED_TO_START",
          "RUNNING",
          "FAILING",
          "SUCCEEDED",
          "TERMINATED",
          "FAILED",
          "HANGING"
        ]
      },
      "ConnectionTopology": {
        "type": "string",
        "enum": [
          "MESH",
          "SFU"
        ]
      },
      "CustomFieldType": {
        "type": "string",
        "enum": [
          "AUTONUMBER",
          "BOOLEAN",
          "DATE",
          "DATE_TIME",
          "DOCUMENT",
          "ENUM",
          "INTEGER",
          "ISSUE",
          "LOCATION",
          "OPEN_ENUM",
          "PERCENTAGE",
          "PROFILE",
          "PROJECT",
          "STRING",
          "TEAM",
          "URL",
          "COMMIT"
        ]
      },
      "DarkTheme": {
        "type": "string",
        "enum": [
          "AUTO",
          "ENABLED",
          "DISABLED"
        ]
      },
      "DashboardContainerType": {
        "type": "string",
        "enum": [
          "OLD_PERSONAL",
          "PROJECT",
          "PERSONAL"
        ]
      },
      "DeploymentIdentifierStatus": {
        "type": "string",
        "enum": [
          "deploying",
          "current"
        ]
      },
      "DeploymentStatus": {
        "type": "string",
        "enum": [
          "SCHEDULED",
          "DEPLOYING",
          "FAILED",
          "CURRENT",
          "OBSOLETE",
          "HANGING"
        ]
      },
      "DeploymentSyncStatus": {
        "type": "string",
        "enum": [
          "SYNCED",
          "DIRTY",
          "SYNCING",
          "FAILED"
        ]
      },
      "DesiredStatus": {
        "type": "string",
        "enum": [
          "UNKNOWN",
          "PENDING",
          "RUNNING",
          "STOPPED"
        ]
      },
      "DiffLineType": {
        "type": "string",
        "enum": [
          "ADDED",
          "DELETED",
          "MODIFIED",
          "FILTERED_ADDED",
          "FILTERED_DELETED",
          "FILTERED",
          "FILTERED_MODIFIED",
          "CONFLICT_OLD",
          "CONFLICT_NEW"
        ]
      },
      "DocumentBodyType": {
        "type": "string",
        "enum": [
          "TEXT",
          "CHECKLIST",
          "FILE"
        ]
      },
      "DraftDocumentType": {
        "type": "string",
        "enum": [
          "RICH_TEXT",
          "WYSIWYG",
          "MARKDOWN",
          "NEW_RICH_TEXT"
        ]
      },
      "DurationTextFormat": {
        "type": "string",
        "enum": [
          "WEEKS",
          "DAYS",
          "HOURS"
        ]
      },
      "EmojiSearchMatchType": {
        "type": "string",
        "enum": [
          "Name",
          "OtherName",
          "Emoticon",
          "Unicode"
        ]
      },
      "EndpointAppLevelAuthUpdateType": {
        "type": "string",
        "enum": [
          "PublicKeySignature",
          "SigningKey",
          "Bearer",
          "Basic"
        ]
      },
      "EnumValueOrdering": {
        "type": "string",
        "enum": [
          "NAME_ASC",
          "NAME_DESC"
        ]
      },
      "EventConferenceKind": {
        "type": "string",
        "enum": [
          "NONE",
          "GOOGLE_MEET",
          "SPACE_TELEKOM",
          "CUSTOM"
        ]
      },
      "EventParticipationStatus": {
        "type": "string",
        "enum": [
          "GOING",
          "NOT_GOING",
          "NOT_SURE",
          "WAITING_FOR_RESPONSE"
        ]
      },
      "ExecutionStatus": {
        "type": "string",
        "enum": [
          "SCHEDULED",
          "PENDING",
          "READY_TO_START",
          "RUNNING",
          "FINISHING",
          "FINISHED",
          "TERMINATING",
          "TERMINATED",
          "HIBERNATING",
          "HIBERNATED",
          "RESTARTING",
          "FAILED"
        ]
      },
      "ExtendedTypeScopeType": {
        "type": "string",
        "enum": [
          "Org",
          "Container"
        ]
      },
      "FailureConditionType": {
        "type": "string",
        "enum": [
          "NON_ZERO_EXIT_CODE",
          "TEST_FAILED",
          "OUT_OF_MEMORY",
          "TIME_OUT"
        ]
      },
      "FeatureFlagStatus": {
        "type": "string",
        "enum": [
          "WIP",
          "EXPERIMENTAL",
          "INTERNAL"
        ]
      },
      "FileDataType": {
        "type": "string",
        "enum": [
          "FILE",
          "DIR"
        ]
      },
      "Gender": {
        "type": "string",
        "enum": [
          "Female",
          "Male",
          "Other",
          "NotSpecified"
        ]
      },
      "GitCommitChangeType": {
        "type": "string",
        "enum": [
          "ADDED",
          "DELETED",
          "MODIFIED"
        ]
      },
      "GitEntryType": {
        "type": "string",
        "enum": [
          "EXE_FILE",
          "FILE",
          "DIR",
          "GIT_LINK",
          "SYM_LINK"
        ]
      },
      "GitGraphEdgeLineStyle": {
        "type": "string",
        "enum": [
          "SOLID",
          "DASHED",
          "DOTTED"
        ]
      },
      "GitGraphEdgeType": {
        "type": "string",
        "enum": [
          "UP",
          "DOWN"
        ]
      },
      "GitMergeMode": {
        "type": "string",
        "enum": [
          "FF",
          "FF_ONLY",
          "NO_FF"
        ]
      },
      "GitMergeStatusHttp": {
        "type": "string",
        "enum": [
          "SUCCESSFUL_MERGE",
          "SUCCESSFUL_FAST_FORWARD",
          "ALREADY_MERGED"
        ]
      },
      "GitRebaseMode": {
        "type": "string",
        "enum": [
          "FF",
          "NO_FF"
        ]
      },
      "HA_Method": {
        "type": "string",
        "enum": [
          "REST_CREATE",
          "REST_QUERY",
          "REST_GET",
          "REST_UPDATE",
          "REST_DELETE",
          "HTTP_GET",
          "HTTP_POST",
          "HTTP_PATCH",
          "HTTP_PUT",
          "HTTP_DELETE"
        ]
      },
      "HA_Primitive": {
        "type": "string",
        "enum": [
          "Byte",
          "Short",
          "Int",
          "Long",
          "Float",
          "Double",
          "Boolean",
          "String",
          "Date",
          "DateTime"
        ]
      },
      "HA_Type.Object.Kind": {
        "type": "string",
        "enum": [
          "PAIR",
          "TRIPLE",
          "BATCH",
          "SYNC_BATCH",
          "MOD",
          "REQUEST_BODY"
        ]
      },
      "HierarchyRole": {
        "type": "string",
        "enum": [
          "SEALED",
          "OPEN",
          "FINAL",
          "ABSTRACT",
          "INTERFACE"
        ]
      },
      "HierarchyRole2": {
        "type": "string",
        "enum": [
          "SEALED_CLASS",
          "OPEN_CLASS",
          "FINAL_CLASS",
          "ABSTRACT_CLASS",
          "INTERFACE",
          "SEALED_INTERFACE"
        ]
      },
      "IdeVersionSortOrder": {
        "type": "string",
        "enum": [
          "ByReleaseDate",
          "ByVersionAndQuality"
        ]
      },
      "InterpolatedLineState": {
        "type": "string",
        "enum": [
          "Normal",
          "Deleted",
          "Modified"
        ]
      },
      "IssueListGrouping": {
        "type": "string",
        "enum": [
          "NONE",
          "TAG",
          "ASSIGNEE",
          "STATUS"
        ]
      },
      "IssuesSorting": {
        "type": "string",
        "enum": [
          "UPDATED",
          "CREATED",
          "TITLE",
          "DUE"
        ]
      },
      "JobExecutionDisplayStatus": {
        "type": "string",
        "enum": [
          "Awaiting",
          "Running",
          "Restarting",
          "Finishing",
          "Stopped",
          "Succeeded",
          "Failed",
          "NoSuitableWorkers",
          "WaitingForWorkers"
        ]
      },
      "JobExecutionStatus": {
        "type": "string",
        "enum": [
          "Started",
          "Succeeded",
          "Failed",
          "Terminated"
        ]
      },
      "JobSubscriptionType": {
        "type": "string",
        "enum": [
          "ALL_FINISHED",
          "FAILED"
        ]
      },
      "JobTriggerType": {
        "type": "string",
        "enum": [
          "MANUAL",
          "GIT_PUSH",
          "SCHEDULE",
          "GIT_BRANCH_DELETED",
          "CODE_REVIEW_OPENED",
          "CODE_REVIEW_CLOSED"
        ]
      },
      "LdapModuleType": {
        "type": "string",
        "enum": [
          "AD",
          "OPEN_LDAP"
        ]
      },
      "LoadDirection": {
        "type": "string",
        "enum": [
          "Prev",
          "Next"
        ]
      },
      "LocationType": {
        "type": "string",
        "enum": [
          "Region",
          "Campus",
          "Building",
          "Floor",
          "Room",
          "ConferenceRoom"
        ]
      },
      "M2.Access": {
        "type": "string",
        "enum": [
          "Private",
          "Public"
        ]
      },
      "M2EmailNotificationType": {
        "type": "string",
        "enum": [
          "INSTANT",
          "DELAYED",
          "NONE"
        ]
      },
      "M2ObsoleteCause": {
        "type": "string",
        "enum": [
          "PermissionsDenied"
        ]
      },
      "MediaSource": {
        "type": "string",
        "enum": [
          "USER",
          "SCREEN"
        ]
      },
      "MeetingJoiningPreference": {
        "type": "string",
        "enum": [
          "NOBODY",
          "EVERYONE"
        ]
      },
      "MeetingModificationPreference": {
        "type": "string",
        "enum": [
          "ORGANIZER",
          "PARTICIPANTS",
          "EVERYONE"
        ]
      },
      "MeetingOrigin": {
        "type": "string",
        "enum": [
          "User",
          "GoogleCalendar"
        ]
      },
      "MeetingVisibility": {
        "type": "string",
        "enum": [
          "PARTICIPANTS",
          "EVERYONE"
        ]
      },
      "MergeRequestBranchType": {
        "type": "string",
        "enum": [
          "SOURCE",
          "TARGET"
        ]
      },
      "MessageButtonStyle": {
        "type": "string",
        "enum": [
          "PRIMARY",
          "REGULAR",
          "DANGER",
          "SECONDARY"
        ]
      },
      "MessageStyle": {
        "type": "string",
        "enum": [
          "PRIMARY",
          "SECONDARY",
          "SUCCESS",
          "ERROR",
          "WARNING"
        ]
      },
      "MessageTextSize": {
        "type": "string",
        "enum": [
          "LARGE",
          "REGULAR",
          "SMALL"
        ]
      },
      "MessageTimestampFormat": {
        "type": "string",
        "enum": [
          "RELATIVE_TO_NOW",
          "FULL",
          "TIME_ONLY",
          "DATE_ONLY"
        ]
      },
      "MessagesSorting": {
        "type": "string",
        "enum": [
          "FromOldestToNewest",
          "FromNewestToOldest"
        ]
      },
      "NotificationFilter": {
        "type": "string",
        "enum": [
          "ALL_MESSAGES",
          "MENTIONS",
          "NOTHING",
          "MUTE"
        ]
      },
      "OrgIndustryDTO": {
        "type": "string",
        "enum": [
          "SoftwareDevelopment",
          "Science",
          "Education",
          "Finance",
          "Health",
          "Manufacturing",
          "Retail",
          "Transportation",
          "Media",
          "Hospitality",
          "ProfessionalServices",
          "NonProfit",
          "Other"
        ]
      },
      "OrgSizeDTO": {
        "type": "string",
        "enum": [
          "N_1_5",
          "N_6_15",
          "N_16_25",
          "N_26_50",
          "MORE_THAN_50"
        ]
      },
      "PackageRepositoryCredentials": {
        "type": "string",
        "enum": [
          "ANONYMOUS",
          "PASSWORD",
          "TOKEN",
          "HEADER"
        ]
      },
      "PackageRepositoryEventAction": {
        "type": "string",
        "enum": [
          "published",
          "removed",
          "vulnerabilities"
        ]
      },
      "PackageRepositoryMode": {
        "type": "string",
        "enum": [
          "HOSTING",
          "PROXY"
        ]
      },
      "PackagesSortColumn": {
        "type": "string",
        "enum": [
          "Downloads",
          "LastAccessed",
          "Created",
          "Size"
        ]
      },
      "ParticipationState": {
        "type": "string",
        "enum": [
          "NONE",
          "CONNECTED",
          "DISCONNECTED"
        ]
      },
      "PasswordStrength": {
        "type": "string",
        "enum": [
          "NO_POLICY",
          "FAIR",
          "GOOD",
          "STRONG"
        ]
      },
      "PermissionRoleType": {
        "type": "string",
        "enum": [
          "PREDEFINED",
          "CUSTOM",
          "AUTHORIZABLE",
          "ANONYMOUS"
        ]
      },
      "PrivateFeedColor": {
        "type": "string",
        "enum": [
          "Blue",
          "Purple",
          "Yellow",
          "Green",
          "Grey",
          "Orange",
          "Pink"
        ]
      },
      "ProfileOrder": {
        "type": "string",
        "enum": [
          "DEFAULT",
          "FULL_NAME"
        ]
      },
      "ProfileOrgRelation": {
        "type": "string",
        "enum": [
          "MEMBER",
          "EXTERNAL",
          "ANY"
        ]
      },
      "ProjectFeature": {
        "type": "string",
        "enum": [
          "DOCUMENTS",
          "ISSUES",
          "BOARDS",
          "REPOSITORIES",
          "CODE_REVIEWS",
          "JOBS",
          "PACKAGES",
          "DEV_ENVIRONMENTS",
          "HOSTING",
          "DEPLOYMENTS",
          "TABLES",
          "PARAMETERS",
          "SECRETS"
        ]
      },
      "ProjectTeamType": {
        "type": "string",
        "enum": [
          "LEGACY",
          "MEMBERS",
          "ATTACHED"
        ]
      },
      "RdWorkspaceState": {
        "type": "string",
        "enum": [
          "Initializing",
          "Activating",
          "Active",
          "Unhealthy",
          "Hibernating",
          "Hibernated",
          "Deleting",
          "Deleted",
          "Restarting",
          "Failed",
          "FailedToStart",
          "Created",
          "Inactive"
        ]
      },
      "RecurrentModification": {
        "type": "string",
        "enum": [
          "Me",
          "SinceMe",
          "All"
        ]
      },
      "RepositoryState": {
        "type": "string",
        "enum": [
          "READY",
          "IN_PROGRESS",
          "ERROR"
        ]
      },
      "ReviewRevisionsChangedType": {
        "type": "string",
        "enum": [
          "Created",
          "Added",
          "Removed"
        ]
      },
      "ReviewSorting": {
        "type": "string",
        "enum": [
          "CreatedAtAsc",
          "CreatedAtDesc",
          "LastUpdatedAsc",
          "LastUpdatedDesc"
        ]
      },
      "ReviewType": {
        "type": "string",
        "enum": [
          "CommitSetReview",
          "MergeRequest"
        ]
      },
      "ReviewerChangedType": {
        "type": "string",
        "enum": [
          "Joined",
          "Left"
        ]
      },
      "ReviewerState": {
        "type": "string",
        "enum": [
          "Accepted",
          "Rejected"
        ]
      },
      "RightStatus": {
        "type": "string",
        "enum": [
          "NONE",
          "REQUESTED",
          "GRANTED",
          "REJECTED"
        ]
      },
      "SFUMediaKind": {
        "type": "string",
        "enum": [
          "video",
          "audio"
        ]
      },
      "SnapshotState": {
        "type": "string",
        "enum": [
          "UNKNOWN",
          "PENDING",
          "COMPLETED",
          "ERROR"
        ]
      },
      "SortOrderType": {
        "type": "string",
        "enum": [
          "ASC",
          "DESC"
        ]
      },
      "SprintState": {
        "type": "string",
        "enum": [
          "CLOSED",
          "CURRENT",
          "PLANNED"
        ]
      },
      "SyntaxMarkupType": {
        "type": "string",
        "enum": [
          "KEYWORD",
          "COMMENT",
          "NUM_LITERAL",
          "STRING_LITERAL",
          "DECLARATION",
          "PARAMETER_ASSIGNMENT",
          "IDENTIFIER",
          "IDENTIFIER_TYPE",
          "IDENTIFIER_DECLARATION",
          "KEY",
          "TAG",
          "ANNOTATION",
          "PREPROCESSOR_ANNOTATION",
          "PREPROCESSOR_MESSAGE",
          "HIGHLIGHT",
          "CODE_FOLD",
          "SKIP"
        ]
      },
      "TodoItemContentKind": {
        "type": "string",
        "enum": [
          "NONE",
          "REGULAR",
          "MESSAGE",
          "ISSUE",
          "BLOG",
          "DOCUMENT",
          "MEETING"
        ]
      },
      "TwoFactorAuthenticationStatus": {
        "type": "string",
        "enum": [
          "NOT_SETUP",
          "INACTIVE",
          "ACTIVE"
        ]
      },
      "UnfurlDateTimeFormat": {
        "type": "string",
        "enum": [
          "RELATIVE_TO_NOW",
          "FULL",
          "TIME_ONLY",
          "DATE_ONLY"
        ]
      },
      "UnfurlDateTimeStyle": {
        "type": "string",
        "enum": [
          "REGULAR",
          "SECONDARY",
          "STRIKETHROUGH",
          "BOLD",
          "CODE"
        ]
      },
      "VersionStatus": {
        "type": "string",
        "enum": [
          "Outdated",
          "Active"
        ]
      },
      "VolumeState": {
        "type": "string",
        "enum": [
          "UNKNOWN",
          "CREATING",
          "AVAILABLE",
          "IN_USE",
          "DELETING",
          "DELETED",
          "ERROR"
        ]
      },
      "Weekday": {
        "type": "string",
        "enum": [
          "SUNDAY",
          "MONDAY",
          "TUESDAY",
          "WEDNESDAY",
          "THURSDAY",
          "FRIDAY",
          "SATURDAY"
        ]
      },
      "WorkerCapability": {
        "type": "string",
        "enum": [
          "Docker",
          "DockerCompose",
          "BlockStorage",
          "Git"
        ]
      },
      "WorkerError": {
        "type": "string",
        "enum": [
          "StartError",
          "DownloadError",
          "Error"
        ]
      },
      "WorkerOSType": {
        "type": "string",
        "enum": [
          "Linux",
          "Windows",
          "Mac",
          "Other"
        ]
      },
      "WorkerScope": {
        "type": "string",
        "enum": [
          "Organization",
          "Project"
        ]
      },
      "WorkerStatus": {
        "type": "string",
        "enum": [
          "Healthy",
          "Disconnected",
          "Unhealthy",
          "Suspended",
          "GracefulShutdown",
          "Locked",
          "WithWarning",
          "NotInitialized"
        ]
      },
      "AbsenceIdentifier": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/AbsenceIdentifier.Id"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "AbsenceIdentifier.Id": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "ApplicationIdentifier": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ApplicationIdentifier.ClientId"
          },
          {
            "$ref": "#/components/schemas/ApplicationIdentifier.Id"
          },
          {
            "$ref": "#/components/schemas/ApplicationIdentifier.Me"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ApplicationIdentifier.ClientId": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          }
        },
        "required": [
          "clientId"
        ]
      },
      "ApplicationIdentifier.Id": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "ApplicationIdentifier.Me": {
        "type": "object",
        "properties": {}
      },
      "BoardIdentifier": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/BoardIdentifier.Id"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "BoardIdentifier.Id": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "CFEntityIdentifier": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/CFAbsenceIdentifier"
          },
          {
            "$ref": "#/components/schemas/CFIssueIdentifier"
          },
          {
            "$ref": "#/components/schemas/CFMembershipIdentifier"
          },
          {
            "$ref": "#/components/schemas/CFProfileIdentifier"
          },
          {
            "$ref": "#/components/schemas/CFTeamIdentifier"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "CFAbsenceIdentifier": {
        "type": "object",
        "properties": {
          "absence": {
            "$ref": "#/components/schemas/AbsenceIdentifier"
          }
        },
        "required": [
          "absence"
        ]
      },
      "CFIssueIdentifier": {
        "type": "object",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/IssueIdentifier"
          }
        },
        "required": [
          "issue"
        ]
      },
      "CFMembershipIdentifier": {
        "type": "object",
        "properties": {
          "membership": {
            "$ref": "#/components/schemas/TeamMembershipIdentifier"
          }
        },
        "required": [
          "membership"
        ]
      },
      "CFProfileIdentifier": {
        "type": "object",
        "properties": {
          "profile": {
            "$ref": "#/components/schemas/ProfileIdentifier"
          }
        },
        "required": [
          "profile"
        ]
      },
      "CFTeamIdentifier": {
        "type": "object",
        "properties": {
          "team": {
            "$ref": "#/components/schemas/TeamIdentifier"
          }
        },
        "required": [
          "team"
        ]
      },
      "CFEntityTypeIdentifier": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/CFAbsenceEntityType"
          },
          {
            "$ref": "#/components/schemas/CFIssueTrackerEntityType"
          },
          {
            "$ref": "#/components/schemas/CFMembershipEntityType"
          },
          {
            "$ref": "#/components/schemas/CFProfileEntityType"
          },
          {
            "$ref": "#/components/schemas/CFTeamEntityType"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "CFAbsenceEntityType": {
        "type": "object",
        "properties": {}
      },
      "CFIssueTrackerEntityType": {
        "type": "object",
        "properties": {
          "issueTracker": {
            "$ref": "#/components/schemas/IssueTrackerIdentifier"
          }
        },
        "required": [
          "issueTracker"
        ]
      },
      "CFMembershipEntityType": {
        "type": "object",
        "properties": {}
      },
      "CFProfileEntityType": {
        "type": "object",
        "properties": {}
      },
      "CFTeamEntityType": {
        "type": "object",
        "properties": {}
      },
      "CFEnumValueIdentifier": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/CFEnumValueIdentifier.Id"
          },
          {
            "$ref": "#/components/schemas/CFEnumValueIdentifier.Name"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "CFEnumValueIdentifier.Id": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "CFEnumValueIdentifier.Name": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "CFIdentifier": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/CFIdentifier.Id"
          },
          {
            "$ref": "#/components/schemas/CFIdentifier.Name"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "CFIdentifier.Id": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "CFIdentifier.Name": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "CalendarIdentifier": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/CalendarIdentifier.Id"
          },
          {
            "$ref": "#/components/schemas/CalendarIdentifier.PersonalCalendar"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "CalendarIdentifier.Id": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "CalendarIdentifier.PersonalCalendar": {
        "type": "object",
        "properties": {}
      },
      "ChannelIdentifier": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ChannelIdentifier.Application"
          },
          {
            "$ref": "#/components/schemas/ChannelIdentifier.Article"
          },
          {
            "$ref": "#/components/schemas/ChannelIdentifier.Channel"
          },
          {
            "$ref": "#/components/schemas/ChannelIdentifier.ContactKey"
          },
          {
            "$ref": "#/components/schemas/ChannelIdentifier.Id"
          },
          {
            "$ref": "#/components/schemas/ChannelIdentifier.Issue"
          },
          {
            "$ref": "#/components/schemas/ChannelIdentifier.Profile"
          },
          {
            "$ref": "#/components/schemas/ChannelIdentifier.Review"
          },
          {
            "$ref": "#/components/schemas/ChannelIdentifier.Thread"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ChannelIdentifier.Application": {
        "type": "object",
        "properties": {
          "application": {
            "$ref": "#/components/schemas/ApplicationIdentifier"
          }
        },
        "required": [
          "application"
        ]
      },
      "ChannelIdentifier.Article": {
        "type": "object",
        "properties": {
          "article": {
            "type": "string"
          }
        },
        "required": [
          "article"
        ]
      },
      "ChannelIdentifier.Channel": {
        "type": "object",
        "properties": {
          "channel": {
            "$ref": "#/components/schemas/ChatChannel"
          }
        },
        "required": [
          "channel"
        ]
      },
      "ChannelIdentifier.ContactKey": {
        "type": "object",
        "properties": {
          "contactKey": {
            "type": "string"
          }
        },
        "required": [
          "contactKey"
        ]
      },
      "ChannelIdentifier.Id": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "ChannelIdentifier.Issue": {
        "type": "object",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/IssueIdentifier"
          }
        },
        "required": [
          "issue"
        ]
      },
      "ChannelIdentifier.Profile": {
        "type": "object",
        "properties": {
          "member": {
            "$ref": "#/components/schemas/ProfileIdentifier"
          }
        },
        "required": [
          "member"
        ]
      },
      "ChannelIdentifier.Review": {
        "type": "object",
        "properties": {
          "codeReview": {
            "$ref": "#/components/schemas/ReviewIdentifier"
          }
        },
        "required": [
          "codeReview"
        ]
      },
      "ChannelIdentifier.Thread": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "ChatChannel": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ChatChannel.FromId"
          },
          {
            "$ref": "#/components/schemas/ChatChannel.FromName"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ChatChannel.FromId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "ChatChannel.FromName": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "ChatMessageIdentifier": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ChatMessageIdentifier.ExternalId"
          },
          {
            "$ref": "#/components/schemas/ChatMessageIdentifier.InternalId"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ChatMessageIdentifier.InternalId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "ComputePoolIdentifier": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ComputePoolIdentifier.Id"
          },
          {
            "$ref": "#/components/schemas/ComputePoolIdentifier.Key"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ComputePoolIdentifier.Id": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "ComputePoolIdentifier.Key": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value"
        ]
      },
      "DashboardIdentifier": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/DashboardIdentifier.Id"
          },
          {
            "$ref": "#/components/schemas/DashboardIdentifier.Personal"
          },
          {
            "$ref": "#/components/schemas/DashboardIdentifier.Project"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "DashboardIdentifier.Id": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "DashboardIdentifier.Personal": {
        "type": "object",
        "properties": {
          "profile": {
            "$ref": "#/components/schemas/ProfileIdentifier"
          }
        },
        "required": [
          "profile"
        ]
      },
      "DashboardIdentifier.Project": {
        "type": "object",
        "properties": {
          "project": {
            "$ref": "#/components/schemas/ProjectIdentifier"
          },
          "profile": {
            "$ref": "#/components/schemas/ProfileIdentifier"
          }
        },
        "required": [
          "project",
          "profile"
        ]
      },
      "DeploymentIdentifier": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/DeploymentIdentifier.Id"
          },
          {
            "$ref": "#/components/schemas/DeploymentIdentifier.Status"
          },
          {
            "$ref": "#/components/schemas/DeploymentIdentifier.Version"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "DeploymentIdentifier.Id": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "DeploymentIdentifier.Status": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/DeploymentIdentifierStatus"
          }
        },
        "required": [
          "status"
        ]
      },
      "DeploymentIdentifier.Version": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string"
          }
        },
        "required": [
          "version"
        ]
      },
      "ExtendedTypeScope": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ExtendedTypeScope.Container"
          },
          {
            "$ref": "#/components/schemas/ExtendedTypeScope.Org"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ExtendedTypeScope.Container": {
        "type": "object",
        "properties": {
          "containerId": {
            "type": "string"
          }
        },
        "required": [
          "containerId"
        ]
      },
      "ExtendedTypeScope.Org": {
        "type": "object",
        "properties": {}
      },
      "FolderIdentifier": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/FolderIdentifier.Id"
          },
          {
            "$ref": "#/components/schemas/FolderIdentifier.Root"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "FolderIdentifier.Id": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "FolderIdentifier.Root": {
        "type": "object",
        "properties": {}
      },
      "ImportExistsPolicy": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ImportExistsPolicy.Skip"
          },
          {
            "$ref": "#/components/schemas/ImportExistsPolicy.Update"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ImportExistsPolicy.Skip": {
        "type": "object",
        "properties": {}
      },
      "ImportExistsPolicy.Update": {
        "type": "object",
        "properties": {}
      },
      "ImportMissingPolicy": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ImportMissingPolicy.ReplaceWithDefault"
          },
          {
            "$ref": "#/components/schemas/ImportMissingPolicy.Skip"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ImportMissingPolicy.ReplaceWithDefault": {
        "type": "object",
        "properties": {}
      },
      "ImportMissingPolicy.Skip": {
        "type": "object",
        "properties": {}
      },
      "IssueIdentifier": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/IssueIdentifier.Id"
          },
          {
            "$ref": "#/components/schemas/IssueIdentifier.Key"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "IssueIdentifier.Id": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "IssueIdentifier.Key": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          }
        },
        "required": [
          "key"
        ]
      },
      "IssueTrackerIdentifier": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/IssueTrackerIdentifier.DefaultProjectTracker"
          },
          {
            "$ref": "#/components/schemas/IssueTrackerIdentifier.Id"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "IssueTrackerIdentifier.DefaultProjectTracker": {
        "type": "object",
        "properties": {
          "project": {
            "$ref": "#/components/schemas/ProjectIdentifier"
          }
        },
        "required": [
          "project"
        ]
      },
      "IssueTrackerIdentifier.Id": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "MessageRecipient": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/MessageRecipient.Channel"
          },
          {
            "$ref": "#/components/schemas/MessageRecipient.CodeReview"
          },
          {
            "$ref": "#/components/schemas/MessageRecipient.Issue"
          },
          {
            "$ref": "#/components/schemas/MessageRecipient.Member"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "MessageRecipient.Channel": {
        "type": "object",
        "properties": {
          "channel": {
            "$ref": "#/components/schemas/ChatChannel"
          }
        },
        "required": [
          "channel"
        ]
      },
      "MessageRecipient.CodeReview": {
        "type": "object",
        "properties": {
          "codeReview": {
            "type": "string"
          }
        },
        "required": [
          "codeReview"
        ]
      },
      "MessageRecipient.Issue": {
        "type": "object",
        "properties": {
          "issue": {
            "type": "string"
          }
        },
        "required": [
          "issue"
        ]
      },
      "MessageRecipient.Member": {
        "type": "object",
        "properties": {
          "member": {
            "$ref": "#/components/schemas/ProfileIdentifier"
          }
        },
        "required": [
          "member"
        ]
      },
      "PackageRepositoryIdentifier": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/PackageRepositoryIdentifier.Id"
          },
          {
            "$ref": "#/components/schemas/PackageRepositoryIdentifier.Key"
          },
          {
            "$ref": "#/components/schemas/PackageRepositoryIdentifier.TypeAndName"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "PackageRepositoryIdentifier.Id": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "PackageRepositoryIdentifier.Key": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          }
        },
        "required": [
          "key"
        ]
      },
      "PackageRepositoryIdentifier.TypeAndName": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ]
      },
      "PermissionContextIdentifier": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ChannelPermissionContextIdentifier"
          },
          {
            "$ref": "#/components/schemas/DocumentFolderPermissionContextIdentifier"
          },
          {
            "$ref": "#/components/schemas/DocumentPermissionContextIdentifier"
          },
          {
            "$ref": "#/components/schemas/GlobalPermissionContextIdentifier"
          },
          {
            "$ref": "#/components/schemas/ProjectPermissionContextIdentifier"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ChannelPermissionContextIdentifier": {
        "type": "object",
        "properties": {
          "channel": {
            "type": "string"
          }
        },
        "required": [
          "channel"
        ]
      },
      "DocumentFolderPermissionContextIdentifier": {
        "type": "object",
        "properties": {
          "folder": {
            "type": "string"
          }
        },
        "required": [
          "folder"
        ]
      },
      "DocumentPermissionContextIdentifier": {
        "type": "object",
        "properties": {
          "document": {
            "type": "string"
          }
        },
        "required": [
          "document"
        ]
      },
      "GlobalPermissionContextIdentifier": {
        "type": "object",
        "properties": {}
      },
      "ProjectPermissionContextIdentifier": {
        "type": "object",
        "properties": {
          "project": {
            "$ref": "#/components/schemas/ProjectIdentifier"
          }
        },
        "required": [
          "project"
        ]
      },
      "PrincipalIn": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/PrincipalIn.Application"
          },
          {
            "$ref": "#/components/schemas/PrincipalIn.BuiltIn"
          },
          {
            "$ref": "#/components/schemas/PrincipalIn.Profile"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "PrincipalIn.Application": {
        "type": "object",
        "properties": {
          "application": {
            "type": "string"
          }
        },
        "required": [
          "application"
        ]
      },
      "PrincipalIn.BuiltIn": {
        "type": "object",
        "properties": {
          "builtIn": {
            "type": "string"
          }
        },
        "required": [
          "builtIn"
        ]
      },
      "PrincipalIn.Profile": {
        "type": "object",
        "properties": {
          "profile": {
            "$ref": "#/components/schemas/ProfileIdentifier"
          }
        },
        "required": [
          "profile"
        ]
      },
      "ProfileIdentifier": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ProfileIdentifier.ExternalId"
          },
          {
            "$ref": "#/components/schemas/ProfileIdentifier.Id"
          },
          {
            "$ref": "#/components/schemas/ProfileIdentifier.Me"
          },
          {
            "$ref": "#/components/schemas/ProfileIdentifier.Username"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ProfileIdentifier.ExternalId": {
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string"
          }
        },
        "required": [
          "externalId"
        ]
      },
      "ProfileIdentifier.Id": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "ProfileIdentifier.Me": {
        "type": "object",
        "properties": {}
      },
      "ProfileIdentifier.Username": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          }
        },
        "required": [
          "username"
        ]
      },
      "ProjectIdentifier": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ProjectIdentifier.Id"
          },
          {
            "$ref": "#/components/schemas/ProjectIdentifier.Key"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ProjectIdentifier.Id": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "ProjectIdentifier.Key": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          }
        },
        "required": [
          "key"
        ]
      },
      "ReactionItemIdentifier": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ReactionItemIdentifier.ArticleReaction"
          },
          {
            "$ref": "#/components/schemas/ReactionItemIdentifier.ChatMessageReaction"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ReactionItemIdentifier.ArticleReaction": {
        "type": "object",
        "properties": {
          "article": {
            "type": "string"
          }
        },
        "required": [
          "article"
        ]
      },
      "ReactionItemIdentifier.ChatMessageReaction": {
        "type": "object",
        "properties": {
          "channel": {
            "$ref": "#/components/schemas/ChannelIdentifier"
          },
          "message": {
            "$ref": "#/components/schemas/ChatMessageIdentifier"
          }
        },
        "required": [
          "channel",
          "message"
        ]
      },
      "ReviewIdentifier": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/ReviewIdentifier.Id"
          },
          {
            "$ref": "#/components/schemas/ReviewIdentifier.Key"
          },
          {
            "$ref": "#/components/schemas/ReviewIdentifier.Number"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "ReviewIdentifier.Id": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "ReviewIdentifier.Key": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          }
        },
        "required": [
          "key"
        ]
      },
      "ReviewIdentifier.Number": {
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "number"
        ]
      },
      "SprintIdentifier": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/SprintIdentifier.Current"
          },
          {
            "$ref": "#/components/schemas/SprintIdentifier.Id"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "SprintIdentifier.Current": {
        "type": "object",
        "properties": {
          "board": {
            "$ref": "#/components/schemas/BoardIdentifier"
          }
        },
        "required": [
          "board"
        ]
      },
      "SprintIdentifier.Id": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "SyncBatchInfo": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/SyncBatchInfo.Since"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "SyncBatchInfo.Since": {
        "type": "object",
        "properties": {
          "sinceEtag": {
            "type": "string"
          },
          "batchSize": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "sinceEtag",
          "batchSize"
        ]
      },
      "TargetIdentifier": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/TargetIdentifier.Id"
          },
          {
            "$ref": "#/components/schemas/TargetIdentifier.Key"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "TargetIdentifier.Id": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "TargetIdentifier.Key": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          }
        },
        "required": [
          "key"
        ]
      },
      "TeamIdentifier": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/TeamIdentifier.ExternalId"
          },
          {
            "$ref": "#/components/schemas/TeamIdentifier.Id"
          },
          {
            "$ref": "#/components/schemas/TeamIdentifier.Name"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "TeamIdentifier.ExternalId": {
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string"
          }
        },
        "required": [
          "externalId"
        ]
      },
      "TeamIdentifier.Id": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "TeamIdentifier.Name": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "TeamMembershipIdentifier": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/TeamMembershipIdentifier.Id"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "TeamMembershipIdentifier.Id": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "WorkerScopeFilter": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/WorkerScopeFilter.OrganizationOnly"
          },
          {
            "$ref": "#/components/schemas/WorkerScopeFilter.Project"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "WorkerScopeFilter.OrganizationOnly": {
        "type": "object",
        "properties": {}
      },
      "WorkerScopeFilter.Project": {
        "type": "object",
        "properties": {
          "project": {
            "$ref": "#/components/schemas/ProjectIdentifier"
          }
        },
        "required": [
          "project"
        ]
      },
      "WorkerSortOrder": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/WorkerSortOrder.AccessTime"
          },
          {
            "$ref": "#/components/schemas/WorkerSortOrder.Name"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "WorkerSortOrder.AccessTime": {
        "type": "object",
        "properties": {
          "time": {
            "$ref": "#/components/schemas/SortOrderType"
          }
        },
        "required": [
          "time"
        ]
      },
      "WorkerSortOrder.Name": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/SortOrderType"
          }
        },
        "required": [
          "name"
        ]
      },
      "WorkspaceIdentifier": {
        "properties": {
          "className": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "$ref": "#/components/schemas/WorkspaceIdentifier.ByProject"
          },
          {
            "$ref": "#/components/schemas/WorkspaceIdentifier.ExternalId"
          },
          {
            "$ref": "#/components/schemas/WorkspaceIdentifier.Id"
          }
        ],
        "discriminator": {
          "propertyName": "className"
        },
        "required": [
          "className"
        ]
      },
      "WorkspaceIdentifier.ByProject": {
        "type": "object",
        "properties": {
          "project": {
            "$ref": "#/components/schemas/ProjectIdentifier"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "project",
          "number"
        ]
      },
      "WorkspaceIdentifier.ExternalId": {
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string"
          }
        },
        "required": [
          "externalId"
        ]
      },
      "WorkspaceIdentifier.Id": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      }
    },
    "securitySchemes": {
      "httpBearer": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "responses": {
      "default": {
        "description": "Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                },
                "error_description": {
                  "type": "string"
                }
              },
              "required": [
                "error",
                "error_description"
              ]
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "httpBearer": []
    }
  ]
}
